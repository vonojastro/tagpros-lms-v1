{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = parseToRgb;\n\nvar _hslToRgb = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"../internalHelpers/_hslToRgb\"));\n\nvar _nameToHex = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"../internalHelpers/_nameToHex\"));\n\nvar _errors = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"../internalHelpers/_errors\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar hexRegex = /^#[a-fA-F0-9]{6}$/;\nvar hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;\nvar reducedHexRegex = /^#[a-fA-F0-9]{3}$/;\nvar reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;\nvar rgbRegex = /^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$/i;\nvar rgbaRegex = /^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*([-+]?[0-9]*[.]?[0-9]+)\\s*\\)$/i;\nvar hslRegex = /^hsl\\(\\s*(\\d{0,3}[.]?[0-9]+)\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*\\)$/i;\nvar hslaRegex = /^hsla\\(\\s*(\\d{0,3}[.]?[0-9]+)\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*,\\s*([-+]?[0-9]*[.]?[0-9]+)\\s*\\)$/i;\n/**\n * Returns an RgbColor or RgbaColor object. This utility function is only useful\n * if want to extract a color component. With the color util `toColorString` you\n * can convert a RgbColor or RgbaColor object back to a string.\n *\n * @example\n * // Assigns `{ red: 255, green: 0, blue: 0 }` to color1\n * const color1 = parseToRgb('rgb(255, 0, 0)');\n * // Assigns `{ red: 92, green: 102, blue: 112, alpha: 0.75 }` to color2\n * const color2 = parseToRgb('hsla(210, 10%, 40%, 0.75)');\n */\n\nfunction parseToRgb(color) {\n  if (typeof color !== 'string') {\n    throw new _errors[\"default\"](3);\n  }\n\n  var normalizedColor = (0, _nameToHex[\"default\"])(color);\n\n  if (normalizedColor.match(hexRegex)) {\n    return {\n      red: parseInt(\"\" + normalizedColor[1] + normalizedColor[2], 16),\n      green: parseInt(\"\" + normalizedColor[3] + normalizedColor[4], 16),\n      blue: parseInt(\"\" + normalizedColor[5] + normalizedColor[6], 16)\n    };\n  }\n\n  if (normalizedColor.match(hexRgbaRegex)) {\n    var alpha = parseFloat((parseInt(\"\" + normalizedColor[7] + normalizedColor[8], 16) / 255).toFixed(2));\n    return {\n      red: parseInt(\"\" + normalizedColor[1] + normalizedColor[2], 16),\n      green: parseInt(\"\" + normalizedColor[3] + normalizedColor[4], 16),\n      blue: parseInt(\"\" + normalizedColor[5] + normalizedColor[6], 16),\n      alpha: alpha\n    };\n  }\n\n  if (normalizedColor.match(reducedHexRegex)) {\n    return {\n      red: parseInt(\"\" + normalizedColor[1] + normalizedColor[1], 16),\n      green: parseInt(\"\" + normalizedColor[2] + normalizedColor[2], 16),\n      blue: parseInt(\"\" + normalizedColor[3] + normalizedColor[3], 16)\n    };\n  }\n\n  if (normalizedColor.match(reducedRgbaHexRegex)) {\n    var _alpha = parseFloat((parseInt(\"\" + normalizedColor[4] + normalizedColor[4], 16) / 255).toFixed(2));\n\n    return {\n      red: parseInt(\"\" + normalizedColor[1] + normalizedColor[1], 16),\n      green: parseInt(\"\" + normalizedColor[2] + normalizedColor[2], 16),\n      blue: parseInt(\"\" + normalizedColor[3] + normalizedColor[3], 16),\n      alpha: _alpha\n    };\n  }\n\n  var rgbMatched = rgbRegex.exec(normalizedColor);\n\n  if (rgbMatched) {\n    return {\n      red: parseInt(\"\" + rgbMatched[1], 10),\n      green: parseInt(\"\" + rgbMatched[2], 10),\n      blue: parseInt(\"\" + rgbMatched[3], 10)\n    };\n  }\n\n  var rgbaMatched = rgbaRegex.exec(normalizedColor.substring(0, 50));\n\n  if (rgbaMatched) {\n    return {\n      red: parseInt(\"\" + rgbaMatched[1], 10),\n      green: parseInt(\"\" + rgbaMatched[2], 10),\n      blue: parseInt(\"\" + rgbaMatched[3], 10),\n      alpha: parseFloat(\"\" + rgbaMatched[4])\n    };\n  }\n\n  var hslMatched = hslRegex.exec(normalizedColor);\n\n  if (hslMatched) {\n    var hue = parseInt(\"\" + hslMatched[1], 10);\n    var saturation = parseInt(\"\" + hslMatched[2], 10) / 100;\n    var lightness = parseInt(\"\" + hslMatched[3], 10) / 100;\n    var rgbColorString = \"rgb(\" + (0, _hslToRgb[\"default\"])(hue, saturation, lightness) + \")\";\n    var hslRgbMatched = rgbRegex.exec(rgbColorString);\n\n    if (!hslRgbMatched) {\n      throw new _errors[\"default\"](4, normalizedColor, rgbColorString);\n    }\n\n    return {\n      red: parseInt(\"\" + hslRgbMatched[1], 10),\n      green: parseInt(\"\" + hslRgbMatched[2], 10),\n      blue: parseInt(\"\" + hslRgbMatched[3], 10)\n    };\n  }\n\n  var hslaMatched = hslaRegex.exec(normalizedColor.substring(0, 50));\n\n  if (hslaMatched) {\n    var _hue = parseInt(\"\" + hslaMatched[1], 10);\n\n    var _saturation = parseInt(\"\" + hslaMatched[2], 10) / 100;\n\n    var _lightness = parseInt(\"\" + hslaMatched[3], 10) / 100;\n\n    var _rgbColorString = \"rgb(\" + (0, _hslToRgb[\"default\"])(_hue, _saturation, _lightness) + \")\";\n\n    var _hslRgbMatched = rgbRegex.exec(_rgbColorString);\n\n    if (!_hslRgbMatched) {\n      throw new _errors[\"default\"](4, normalizedColor, _rgbColorString);\n    }\n\n    return {\n      red: parseInt(\"\" + _hslRgbMatched[1], 10),\n      green: parseInt(\"\" + _hslRgbMatched[2], 10),\n      blue: parseInt(\"\" + _hslRgbMatched[3], 10),\n      alpha: parseFloat(\"\" + hslaMatched[4])\n    };\n  }\n\n  throw new _errors[\"default\"](5);\n}\n\nmodule.exports = exports.default;","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/node_modules/polished/lib/color/parseToRgb.js"],"names":["exports","__esModule","parseToRgb","_hslToRgb","_interopRequireDefault","require","_nameToHex","_errors","obj","hexRegex","hexRgbaRegex","reducedHexRegex","reducedRgbaHexRegex","rgbRegex","rgbaRegex","hslRegex","hslaRegex","color","normalizedColor","match","red","parseInt","green","blue","alpha","parseFloat","toFixed","_alpha","rgbMatched","exec","rgbaMatched","substring","hslMatched","hue","saturation","lightness","rgbColorString","hslRgbMatched","hslaMatched","_hue","_saturation","_lightness","_rgbColorString","_hslRgbMatched","module","default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = parseToRgb;\n\nvar _hslToRgb = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"../internalHelpers/_hslToRgb\"));\n\nvar _nameToHex = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"../internalHelpers/_nameToHex\"));\n\nvar _errors = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require(\"../internalHelpers/_errors\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar hexRegex = /^#[a-fA-F0-9]{6}$/;\nvar hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;\nvar reducedHexRegex = /^#[a-fA-F0-9]{3}$/;\nvar reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;\nvar rgbRegex = /^rgb\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$/i;\nvar rgbaRegex = /^rgba\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*([-+]?[0-9]*[.]?[0-9]+)\\s*\\)$/i;\nvar hslRegex = /^hsl\\(\\s*(\\d{0,3}[.]?[0-9]+)\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*\\)$/i;\nvar hslaRegex = /^hsla\\(\\s*(\\d{0,3}[.]?[0-9]+)\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*,\\s*(\\d{1,3}[.]?[0-9]?)%\\s*,\\s*([-+]?[0-9]*[.]?[0-9]+)\\s*\\)$/i;\n/**\n * Returns an RgbColor or RgbaColor object. This utility function is only useful\n * if want to extract a color component. With the color util `toColorString` you\n * can convert a RgbColor or RgbaColor object back to a string.\n *\n * @example\n * // Assigns `{ red: 255, green: 0, blue: 0 }` to color1\n * const color1 = parseToRgb('rgb(255, 0, 0)');\n * // Assigns `{ red: 92, green: 102, blue: 112, alpha: 0.75 }` to color2\n * const color2 = parseToRgb('hsla(210, 10%, 40%, 0.75)');\n */\n\nfunction parseToRgb(color) {\n  if (typeof color !== 'string') {\n    throw new _errors[\"default\"](3);\n  }\n\n  var normalizedColor = (0, _nameToHex[\"default\"])(color);\n\n  if (normalizedColor.match(hexRegex)) {\n    return {\n      red: parseInt(\"\" + normalizedColor[1] + normalizedColor[2], 16),\n      green: parseInt(\"\" + normalizedColor[3] + normalizedColor[4], 16),\n      blue: parseInt(\"\" + normalizedColor[5] + normalizedColor[6], 16)\n    };\n  }\n\n  if (normalizedColor.match(hexRgbaRegex)) {\n    var alpha = parseFloat((parseInt(\"\" + normalizedColor[7] + normalizedColor[8], 16) / 255).toFixed(2));\n    return {\n      red: parseInt(\"\" + normalizedColor[1] + normalizedColor[2], 16),\n      green: parseInt(\"\" + normalizedColor[3] + normalizedColor[4], 16),\n      blue: parseInt(\"\" + normalizedColor[5] + normalizedColor[6], 16),\n      alpha: alpha\n    };\n  }\n\n  if (normalizedColor.match(reducedHexRegex)) {\n    return {\n      red: parseInt(\"\" + normalizedColor[1] + normalizedColor[1], 16),\n      green: parseInt(\"\" + normalizedColor[2] + normalizedColor[2], 16),\n      blue: parseInt(\"\" + normalizedColor[3] + normalizedColor[3], 16)\n    };\n  }\n\n  if (normalizedColor.match(reducedRgbaHexRegex)) {\n    var _alpha = parseFloat((parseInt(\"\" + normalizedColor[4] + normalizedColor[4], 16) / 255).toFixed(2));\n\n    return {\n      red: parseInt(\"\" + normalizedColor[1] + normalizedColor[1], 16),\n      green: parseInt(\"\" + normalizedColor[2] + normalizedColor[2], 16),\n      blue: parseInt(\"\" + normalizedColor[3] + normalizedColor[3], 16),\n      alpha: _alpha\n    };\n  }\n\n  var rgbMatched = rgbRegex.exec(normalizedColor);\n\n  if (rgbMatched) {\n    return {\n      red: parseInt(\"\" + rgbMatched[1], 10),\n      green: parseInt(\"\" + rgbMatched[2], 10),\n      blue: parseInt(\"\" + rgbMatched[3], 10)\n    };\n  }\n\n  var rgbaMatched = rgbaRegex.exec(normalizedColor.substring(0, 50));\n\n  if (rgbaMatched) {\n    return {\n      red: parseInt(\"\" + rgbaMatched[1], 10),\n      green: parseInt(\"\" + rgbaMatched[2], 10),\n      blue: parseInt(\"\" + rgbaMatched[3], 10),\n      alpha: parseFloat(\"\" + rgbaMatched[4])\n    };\n  }\n\n  var hslMatched = hslRegex.exec(normalizedColor);\n\n  if (hslMatched) {\n    var hue = parseInt(\"\" + hslMatched[1], 10);\n    var saturation = parseInt(\"\" + hslMatched[2], 10) / 100;\n    var lightness = parseInt(\"\" + hslMatched[3], 10) / 100;\n    var rgbColorString = \"rgb(\" + (0, _hslToRgb[\"default\"])(hue, saturation, lightness) + \")\";\n    var hslRgbMatched = rgbRegex.exec(rgbColorString);\n\n    if (!hslRgbMatched) {\n      throw new _errors[\"default\"](4, normalizedColor, rgbColorString);\n    }\n\n    return {\n      red: parseInt(\"\" + hslRgbMatched[1], 10),\n      green: parseInt(\"\" + hslRgbMatched[2], 10),\n      blue: parseInt(\"\" + hslRgbMatched[3], 10)\n    };\n  }\n\n  var hslaMatched = hslaRegex.exec(normalizedColor.substring(0, 50));\n\n  if (hslaMatched) {\n    var _hue = parseInt(\"\" + hslaMatched[1], 10);\n\n    var _saturation = parseInt(\"\" + hslaMatched[2], 10) / 100;\n\n    var _lightness = parseInt(\"\" + hslaMatched[3], 10) / 100;\n\n    var _rgbColorString = \"rgb(\" + (0, _hslToRgb[\"default\"])(_hue, _saturation, _lightness) + \")\";\n\n    var _hslRgbMatched = rgbRegex.exec(_rgbColorString);\n\n    if (!_hslRgbMatched) {\n      throw new _errors[\"default\"](4, normalizedColor, _rgbColorString);\n    }\n\n    return {\n      red: parseInt(\"\" + _hslRgbMatched[1], 10),\n      green: parseInt(\"\" + _hslRgbMatched[2], 10),\n      blue: parseInt(\"\" + _hslRgbMatched[3], 10),\n      alpha: parseFloat(\"\" + hslaMatched[4])\n    };\n  }\n\n  throw new _errors[\"default\"](5);\n}\n\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}