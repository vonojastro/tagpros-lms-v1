{"ast":null,"code":"import { useState } from \"react\";\nimport { useOnWindowResize } from \"./useOnWindowResize\";\nimport { useOnWindowScroll } from \"./useOnWindowScroll\";\n\nfunction computeScrollPosition() {\n  if (typeof window === \"undefined\") {\n    return {\n      scrollX: 0,\n      scrollY: 0\n    };\n  } else {\n    return {\n      scrollX: window.scrollX || window.pageXOffset,\n      scrollY: window.scrollY || window.pageYOffset\n    };\n  }\n}\n/**\n *\n * useWindowScrollPosition hook\n * A React hook to get the scroll position of the window\n *\n * @returns an object containing scrollX and scrollY values\n */\n\n\nfunction useWindowScrollPosition() {\n  var _a = useState(computeScrollPosition),\n      scrollPosition = _a[0],\n      setScrollPosition = _a[1];\n  /**\n   * Recalculate on scroll\n   */\n\n\n  useOnWindowScroll(function () {\n    setScrollPosition(computeScrollPosition());\n  }, true, true);\n  /**\n   * Recalculate on resize\n   */\n\n  useOnWindowResize(function () {\n    setScrollPosition(computeScrollPosition());\n  }, true, true);\n  return scrollPosition;\n}\n\nexport { useWindowScrollPosition };","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/node_modules/rooks/dist/esm/hooks/useWindowScrollPosition.js"],"names":["useState","useOnWindowResize","useOnWindowScroll","computeScrollPosition","window","scrollX","scrollY","pageXOffset","pageYOffset","useWindowScrollPosition","_a","scrollPosition","setScrollPosition"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;AACA,SAASC,qBAAT,GAAiC;AAC7B,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AAC/B,WAAO;AACHC,MAAAA,OAAO,EAAE,CADN;AAEHC,MAAAA,OAAO,EAAE;AAFN,KAAP;AAIH,GALD,MAMK;AACD,WAAO;AACHD,MAAAA,OAAO,EAAED,MAAM,CAACC,OAAP,IAAkBD,MAAM,CAACG,WAD/B;AAEHD,MAAAA,OAAO,EAAEF,MAAM,CAACE,OAAP,IAAkBF,MAAM,CAACI;AAF/B,KAAP;AAIH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,uBAAT,GAAmC;AAC/B,MAAIC,EAAE,GAAGV,QAAQ,CAACG,qBAAD,CAAjB;AAAA,MAA0CQ,cAAc,GAAGD,EAAE,CAAC,CAAD,CAA7D;AAAA,MAAkEE,iBAAiB,GAAGF,EAAE,CAAC,CAAD,CAAxF;AACA;AACJ;AACA;;;AACIR,EAAAA,iBAAiB,CAAC,YAAY;AAC1BU,IAAAA,iBAAiB,CAACT,qBAAqB,EAAtB,CAAjB;AACH,GAFgB,EAEd,IAFc,EAER,IAFQ,CAAjB;AAGA;AACJ;AACA;;AACIF,EAAAA,iBAAiB,CAAC,YAAY;AAC1BW,IAAAA,iBAAiB,CAACT,qBAAqB,EAAtB,CAAjB;AACH,GAFgB,EAEd,IAFc,EAER,IAFQ,CAAjB;AAGA,SAAOQ,cAAP;AACH;;AACD,SAASF,uBAAT","sourcesContent":["import { useState } from \"react\";\nimport { useOnWindowResize } from \"./useOnWindowResize\";\nimport { useOnWindowScroll } from \"./useOnWindowScroll\";\nfunction computeScrollPosition() {\n    if (typeof window === \"undefined\") {\n        return {\n            scrollX: 0,\n            scrollY: 0,\n        };\n    }\n    else {\n        return {\n            scrollX: window.scrollX || window.pageXOffset,\n            scrollY: window.scrollY || window.pageYOffset,\n        };\n    }\n}\n/**\n *\n * useWindowScrollPosition hook\n * A React hook to get the scroll position of the window\n *\n * @returns an object containing scrollX and scrollY values\n */\nfunction useWindowScrollPosition() {\n    var _a = useState(computeScrollPosition), scrollPosition = _a[0], setScrollPosition = _a[1];\n    /**\n     * Recalculate on scroll\n     */\n    useOnWindowScroll(function () {\n        setScrollPosition(computeScrollPosition());\n    }, true, true);\n    /**\n     * Recalculate on resize\n     */\n    useOnWindowResize(function () {\n        setScrollPosition(computeScrollPosition());\n    }, true, true);\n    return scrollPosition;\n}\nexport { useWindowScrollPosition };\n"]},"metadata":{},"sourceType":"module"}