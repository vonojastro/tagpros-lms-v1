{"ast":null,"code":"var _jsxFileName = \"/Users/vonojastro/Desktop/lms-frontend-v2/src/components/common/Register/Input.jsx\";\nimport React from 'react';\nimport schema from '../../../validators/registration';\nimport { errorMessage } from '../../../validators/errorMessages';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validationType: '',\n      isShowPassword: false\n    };\n  }\n\n  async onBlurValidate(event) {\n    let {\n      handleValidationList,\n      password\n    } = this.props;\n    let {\n      name,\n      value\n    } = event.target;\n\n    try {\n      if (name === 'confirmPassword') {\n        value = {\n          value,\n          password\n        };\n      }\n\n      await schema.validateAt(name, {\n        [name]: value\n      });\n      this.setState({\n        validationType: 'valid'\n      });\n      handleValidationList({\n        name: name,\n        isValid: true\n      });\n    } catch (error) {\n      let errorType = error.errors.toString(); //* yup error: { ValidationError, errors }\n\n      this.setState({\n        validationType: errorType\n      });\n      handleValidationList({\n        name: name,\n        isValid: false\n      });\n    }\n  }\n\n  onClickShowHidePassword() {\n    this.setState({\n      isShowPassword: !this.state.isShowPassword\n    });\n  }\n\n  handleInputType() {\n    let {\n      type\n    } = this.props;\n    let {\n      isShowPassword\n    } = this.state;\n\n    if (type === 'password') {\n      if (!isShowPassword) {\n        return 'password';\n      } else {\n        return 'text';\n      }\n    }\n\n    return type;\n  }\n\n  errorMessage() {\n    let {\n      validationType\n    } = this.state;\n\n    if (validationType) {\n      if (validationType in errorMessage) {\n        if (['too_short', 'too_long', 'special_char'].includes(validationType)) {\n          return this.props.placeholder + errorMessage[validationType];\n        }\n\n        return errorMessage[validationType];\n      }\n    }\n\n    return '';\n  }\n\n  validationFieldColor() {\n    let {\n      validationType\n    } = this.state;\n\n    if (validationType) {\n      if (validationType in errorMessage) return 'has-danger has-error';else return 'has-success';\n      /**Enable valid field color */\n    }\n\n    return '';\n  }\n\n  validationInputIcon() {\n    let {\n      validationType\n    } = this.state;\n\n    if (validationType) {\n      if (validationType in errorMessage) return 'is-invalid';else return 'valid-feedback';\n    }\n\n    return '';\n  }\n\n  validationMessage() {\n    let {\n      validationType\n    } = this.state;\n\n    if (validationType) {\n      if (validationType in errorMessage) return 'invalid-feedback';else return 'valid-feedback';\n    }\n\n    return '';\n  }\n\n  renderEyeIcon() {\n    let {\n      type\n    } = this.props;\n    let {\n      isShowPassword\n    } = this.state;\n\n    if (type === 'password') {\n      if (!isShowPassword) {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"register input-icon\",\n          onClick: () => this.onClickShowHidePassword(),\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"far fa-eye-slash\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"register input-icon\",\n          onClick: () => this.onClickShowHidePassword(),\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"far fa-eye\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this);\n      }\n    }\n  }\n\n  renderValidationMessage() {\n    let {\n      name\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: this.validationMessage(name),\n      children: this.errorMessage(name)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 12\n    }, this);\n  }\n\n  renderInput() {\n    let {\n      name,\n      placeholder,\n      required,\n      autoComplete,\n      handleChange\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      className: `form-control ${this.validationInputIcon()}`,\n      type: this.handleInputType(),\n      required: required,\n      placeholder: placeholder,\n      autoComplete: autoComplete,\n      name: name,\n      onBlur: e => this.onBlurValidate(e),\n      onChange: e => {\n        handleChange(e);\n        this.onBlurValidate(e);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `col-xs-12 ${this.props.topStyle ? this.props.topStyle : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `form-group ${this.validationFieldColor()} has-feedback`,\n        children: [this.renderInput(), this.renderEyeIcon(), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), this.renderValidationMessage()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Input;","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/components/common/Register/Input.jsx"],"names":["React","schema","errorMessage","Input","Component","constructor","props","state","validationType","isShowPassword","onBlurValidate","event","handleValidationList","password","name","value","target","validateAt","setState","isValid","error","errorType","errors","toString","onClickShowHidePassword","handleInputType","type","includes","placeholder","validationFieldColor","validationInputIcon","validationMessage","renderEyeIcon","renderValidationMessage","renderInput","required","autoComplete","handleChange","e","render","topStyle"],"mappings":"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","sourcesContent":["import React from 'react';\nimport schema from '../../../validators/registration';\n\nimport { errorMessage } from '../../../validators/errorMessages';\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      validationType: '',\n      isShowPassword: false,\n    };\n  }\n\n  async onBlurValidate(event) {\n\t\tlet { handleValidationList, password } = this.props;\n    let { name, value } = event.target;\n\n    try {\n      if (name === 'confirmPassword') {\n        value = { value, password };\n      }\n\n      await schema.validateAt(name, { [name]: value });\n\n      this.setState({ validationType: 'valid' });\n      handleValidationList({ name: name, isValid: true });\n    } catch (error) {\n      let errorType = error.errors.toString(); //* yup error: { ValidationError, errors }\n\n      this.setState({ validationType: errorType });\n      handleValidationList({ name: name, isValid: false });\n    }\n  }\n\n  onClickShowHidePassword() {\n    this.setState({ isShowPassword: !this.state.isShowPassword });\n  }\n\n  handleInputType() {\n    let { type } = this.props;\n    let { isShowPassword } = this.state;\n\n    if (type === 'password') {\n      if (!isShowPassword) {\n        return 'password';\n      } else {\n        return 'text';\n      }\n    }\n\n    return type;\n  }\n\n  errorMessage() {\n    let { validationType } = this.state;\n\n    if (validationType) {\n      if (validationType in errorMessage) {\n        if (['too_short', 'too_long', 'special_char'].includes(validationType)) {\n          return this.props.placeholder + errorMessage[validationType];\n        }\n        return errorMessage[validationType];\n      }\n    }\n\n    return '';\n  }\n\n  validationFieldColor() {\n    let { validationType } = this.state;\n\n    if (validationType) {\n      if (validationType in errorMessage) return 'has-danger has-error';\n      else return 'has-success'; /**Enable valid field color */\n    }\n\n    return '';\n  }\n\n  validationInputIcon() {\n    let { validationType } = this.state;\n\n    if (validationType) {\n      if (validationType in errorMessage) return 'is-invalid';\n      else return 'valid-feedback';\n    }\n\n    return '';\n  }\n\n  validationMessage() {\n    let { validationType } = this.state;\n\n    if (validationType) {\n      if (validationType in errorMessage) return 'invalid-feedback';\n      else return 'valid-feedback';\n    }\n\n    return '';\n  }\n\n  renderEyeIcon() {\n    let { type } = this.props;\n    let { isShowPassword } = this.state;\n\n    if (type === 'password') {\n      if (!isShowPassword) {\n        return (\n          <span\n            className='register input-icon'\n            onClick={() => this.onClickShowHidePassword()}\n          >\n            <i className='far fa-eye-slash'></i>\n          </span>\n        );\n      } else {\n        return (\n          <span\n            className='register input-icon'\n            onClick={() => this.onClickShowHidePassword()}\n          >\n            <i className='far fa-eye'></i>\n          </span>\n        );\n      }\n    }\n  }\n\n  renderValidationMessage() {\n    let { name } = this.props;\n\n    return <div className={this.validationMessage(name)}>{this.errorMessage(name)}</div>;\n  }\n\n  renderInput() {\n    let { name, placeholder, required, autoComplete, handleChange } = this.props;\n\n    return (\n      <input\n        className={`form-control ${this.validationInputIcon()}`}\n        type={this.handleInputType()}\n        required={required}\n        placeholder={placeholder}\n        autoComplete={autoComplete}\n        name={name}\n        onBlur={(e) => this.onBlurValidate(e)}\n        onChange={(e) => {handleChange(e);this.onBlurValidate(e)}}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className={`col-xs-12 ${this.props.topStyle ? this.props.topStyle : ''}`}>\n        <div className={`form-group ${this.validationFieldColor()} has-feedback`}>\n          {this.renderInput()}\n\n          {this.renderEyeIcon()}\n          <span className='bar'></span>\n\n          {this.renderValidationMessage()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}