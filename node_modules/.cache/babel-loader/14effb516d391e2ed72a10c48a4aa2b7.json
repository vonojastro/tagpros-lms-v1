{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n/*\nCopyright (c) Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n\n/* eslint-disable import/prefer-default-export */\n\n\nimport * as React from 'react';\nvar JOINABLE_TYPES = new Set(['string', 'number']); // Checks the children of a React component to ensure every value is a number\n// or a string. If they are, they are joined and returned. Useful for collecting\n// text from the child of a node to use as an attribute.\n\nexport function getTextFromChildren(children) {\n  var childList = React.Children.toArray(children).filter(function (child) {\n    return child !== null && child !== undefined;\n  });\n\n  if (!childList.length) {\n    return null;\n  }\n\n  var isJoinable = childList.every(function (child) {\n    return JOINABLE_TYPES.has(_typeof(child));\n  });\n\n  if (!isJoinable) {\n    return null;\n  } // Join on an empty string to preserve React's whitespace handling:\n  // <Tag>foo{'bar'}baz</Tag> => 'foobar'\n  // <Tag>foo {'bar'} baz</Tag> => 'foo bar baz'\n\n\n  return childList.join('');\n}","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/node_modules/baseui/esm/tag/utils.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","React","JOINABLE_TYPES","Set","getTextFromChildren","children","childList","Children","toArray","filter","child","undefined","length","isJoinable","every","has","join"],"mappings":"AAAA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,MAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgC,OAAOA,MAAM,CAACC,QAAd,KAA2B,QAA/D,EAAyE;AAAEH,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAO,OAAOA,GAAd;AAAoB,KAAtD;AAAyD,GAApI,MAA0I;AAAED,IAAAA,OAAO,GAAG,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE,aAAOA,GAAG,IAAI,OAAOC,MAAP,KAAkB,UAAzB,IAAuCD,GAAG,CAACG,WAAJ,KAAoBF,MAA3D,IAAqED,GAAG,KAAKC,MAAM,CAACG,SAApF,GAAgG,QAAhG,GAA2G,OAAOJ,GAAzH;AAA+H,KAAjK;AAAoK;;AAAC,SAAOD,OAAO,CAACC,GAAD,CAAd;AAAsB;AAE1X;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AACA,OAAO,KAAKK,KAAZ,MAAuB,OAAvB;AACA,IAAIC,cAAc,GAAG,IAAIC,GAAJ,CAAQ,CAAC,QAAD,EAAW,QAAX,CAAR,CAArB,C,CAAoD;AACpD;AACA;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,QAA7B,EAAuC;AAC5C,MAAIC,SAAS,GAAGL,KAAK,CAACM,QAAN,CAAeC,OAAf,CAAuBH,QAAvB,EAAiCI,MAAjC,CAAwC,UAAUC,KAAV,EAAiB;AACvE,WAAOA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAnC;AACD,GAFe,CAAhB;;AAIA,MAAI,CAACL,SAAS,CAACM,MAAf,EAAuB;AACrB,WAAO,IAAP;AACD;;AAED,MAAIC,UAAU,GAAGP,SAAS,CAACQ,KAAV,CAAgB,UAAUJ,KAAV,EAAiB;AAChD,WAAOR,cAAc,CAACa,GAAf,CAAmBpB,OAAO,CAACe,KAAD,CAA1B,CAAP;AACD,GAFgB,CAAjB;;AAIA,MAAI,CAACG,UAAL,EAAiB;AACf,WAAO,IAAP;AACD,GAf2C,CAe1C;AACF;AACA;;;AAGA,SAAOP,SAAS,CAACU,IAAV,CAAe,EAAf,CAAP;AACD","sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\nCopyright (c) Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\n\n/* eslint-disable import/prefer-default-export */\nimport * as React from 'react';\nvar JOINABLE_TYPES = new Set(['string', 'number']); // Checks the children of a React component to ensure every value is a number\n// or a string. If they are, they are joined and returned. Useful for collecting\n// text from the child of a node to use as an attribute.\n\nexport function getTextFromChildren(children) {\n  var childList = React.Children.toArray(children).filter(function (child) {\n    return child !== null && child !== undefined;\n  });\n\n  if (!childList.length) {\n    return null;\n  }\n\n  var isJoinable = childList.every(function (child) {\n    return JOINABLE_TYPES.has(_typeof(child));\n  });\n\n  if (!isJoinable) {\n    return null;\n  } // Join on an empty string to preserve React's whitespace handling:\n  // <Tag>foo{'bar'}baz</Tag> => 'foobar'\n  // <Tag>foo {'bar'} baz</Tag> => 'foo bar baz'\n\n\n  return childList.join('');\n}"]},"metadata":{},"sourceType":"module"}