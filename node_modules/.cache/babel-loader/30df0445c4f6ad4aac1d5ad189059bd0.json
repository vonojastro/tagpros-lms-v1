{"ast":null,"code":"import Immutable from \"immutable\";\nimport { GET_ANNOUNCEMENTS, GET_ACTIVE_ANNOUNCEMENTS } from \"../actions/announcement\";\nconst initialState = {\n  data: {\n    announcements: []\n  }\n};\n\nconst announcement = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Immutable.fromJS(initialState);\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState = state;\n\n  switch (action.type) {\n    case GET_ANNOUNCEMENTS:\n      newState = newState.setIn([\"data\", \"announcements\"], action.data);\n      break;\n\n    case GET_ACTIVE_ANNOUNCEMENTS:\n      newState = newState.setIn([\"data\", \"announcements\"], action.data);\n      break;\n\n    default:\n      return state;\n  }\n\n  return newState;\n};\n\nexport default announcement;","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/redux/reducers/announcement.js"],"names":["Immutable","GET_ANNOUNCEMENTS","GET_ACTIVE_ANNOUNCEMENTS","initialState","data","announcements","announcement","state","fromJS","action","newState","type","setIn"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AAEA,SACIC,iBADJ,EAEIC,wBAFJ,QAGO,yBAHP;AAKA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,aAAa,EAAE;AADX;AADW,CAArB;;AAMA,MAAMC,YAAY,GAAG,YAAoD;AAAA,MAAnDC,KAAmD,uEAA3CP,SAAS,CAACQ,MAAV,CAAiBL,YAAjB,CAA2C;AAAA,MAAXM,MAAW;AACvE,MAAIC,QAAQ,GAAGH,KAAf;;AACA,UAAQE,MAAM,CAACE,IAAf;AACE,SAAKV,iBAAL;AACES,MAAAA,QAAQ,GAAGA,QAAQ,CAACE,KAAT,CAAe,CAAC,MAAD,EAAS,eAAT,CAAf,EAA0CH,MAAM,CAACL,IAAjD,CAAX;AACA;;AAEF,SAAKF,wBAAL;AACEQ,MAAAA,QAAQ,GAAGA,QAAQ,CAACE,KAAT,CAAe,CAAC,MAAD,EAAS,eAAT,CAAf,EAA0CH,MAAM,CAACL,IAAjD,CAAX;AACA;;AACF;AACE,aAAOG,KAAP;AATJ;;AAYA,SAAOG,QAAP;AACD,CAfD;;AAiBA,eAAeJ,YAAf","sourcesContent":["import Immutable from \"immutable\";\n\nimport {\n    GET_ANNOUNCEMENTS,\n    GET_ACTIVE_ANNOUNCEMENTS\n} from \"../actions/announcement\";\n\nconst initialState = { \n    data: {\n      announcements: []\n    }\n};\n\nconst announcement = (state = Immutable.fromJS(initialState), action) => {\n  let newState = state;\n  switch (action.type) {\n    case GET_ANNOUNCEMENTS:\n      newState = newState.setIn([\"data\", \"announcements\"], action.data);\n      break;\n\n    case GET_ACTIVE_ANNOUNCEMENTS:\n      newState = newState.setIn([\"data\", \"announcements\"], action.data);\n      break;\n    default:\n      return state;\n  }\n\n  return newState;\n};\n  \nexport default announcement;"]},"metadata":{},"sourceType":"module"}