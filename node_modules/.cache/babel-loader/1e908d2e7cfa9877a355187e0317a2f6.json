{"ast":null,"code":"import { useMemo, createElement } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar getDirectionStyle = function getDirectionStyle(dir, size) {\n  switch (dir) {\n    case 'left':\n      return {\n        top: 0,\n        left: 0,\n        transform: 'translate3d(-100%, 0, 0)',\n        width: size,\n        height: '100vh'\n      };\n\n    case 'right':\n      return {\n        top: 0,\n        right: 0,\n        transform: 'translate3d(100%, 0, 0)',\n        width: size,\n        height: '100vh'\n      };\n\n    case 'bottom':\n      return {\n        left: 0,\n        right: 0,\n        bottom: 0,\n        transform: 'translate3d(0, 100%, 0)',\n        width: '100%',\n        height: size\n      };\n\n    case 'top':\n      return {\n        left: 0,\n        right: 0,\n        top: 0,\n        transform: 'translate3d(0, -100%, 0)',\n        width: '100%',\n        height: size\n      };\n\n    default:\n      return {};\n  }\n};\n\nvar EZDrawer = function EZDrawer(_ref) {\n  var open = _ref.open,\n      _ref$onClose = _ref.onClose,\n      onClose = _ref$onClose === void 0 ? function () {} : _ref$onClose,\n      children = _ref.children,\n      style = _ref.style,\n      _ref$enableOverlay = _ref.enableOverlay,\n      enableOverlay = _ref$enableOverlay === void 0 ? true : _ref$enableOverlay,\n      _ref$overlayColor = _ref.overlayColor,\n      overlayColor = _ref$overlayColor === void 0 ? '#000' : _ref$overlayColor,\n      _ref$overlayOpacity = _ref.overlayOpacity,\n      overlayOpacity = _ref$overlayOpacity === void 0 ? 0.4 : _ref$overlayOpacity,\n      _ref$zIndex = _ref.zIndex,\n      zIndex = _ref$zIndex === void 0 ? 100 : _ref$zIndex,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 500 : _ref$duration,\n      direction = _ref.direction,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 250 : _ref$size,\n      className = _ref.className,\n      customIdSuffix = _ref.customIdSuffix;\n  var idSuffix = useMemo(function () {\n    return customIdSuffix || (Math.random() + 1).toString(36).substring(7);\n  }, [customIdSuffix]);\n  var overlayStyles = {\n    backgroundColor: \"\" + overlayColor,\n    opacity: \"\" + overlayOpacity,\n    zIndex: zIndex\n  };\n\n  var drawerStyles = _extends({\n    zIndex: zIndex + 1,\n    transitionDuration: duration + \"ms\"\n  }, getDirectionStyle(direction, size), style);\n\n  return createElement(\"div\", {\n    id: 'EZDrawer' + idSuffix,\n    className: 'EZDrawer'\n  }, createElement(\"input\", {\n    type: 'checkbox',\n    id: 'EZDrawer__checkbox' + idSuffix,\n    className: 'EZDrawer__checkbox',\n    onChange: onClose,\n    checked: open\n  }), createElement(\"nav\", {\n    role: 'navigation',\n    id: 'EZDrawer__container' + idSuffix,\n    style: drawerStyles,\n    className: 'EZDrawer__container ' + className\n  }, children), enableOverlay && createElement(\"label\", {\n    htmlFor: 'EZDrawer__checkbox' + idSuffix,\n    id: 'EZDrawer__overlay' + idSuffix,\n    className: 'EZDrawer__overlay',\n    style: overlayStyles\n  }));\n};\n\nexport default EZDrawer;","map":{"version":3,"sources":["../src/index.tsx"],"names":["getDirectionStyle","top","left","transform","width","height","right","bottom","size","EZDrawer","open","onClose","children","style","enableOverlay","overlayColor","overlayOpacity","zIndex","duration","direction","className","customIdSuffix","idSuffix","Math","overlayStyles","backgroundColor","opacity","drawerStyles","transitionDuration","id","type","onChange","checked","role","htmlFor"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\nimport './styles.scss'\r\n\r\ntype Props = {\r\n    open: boolean\r\n    onClose?: () => void\r\n    direction: 'left' | 'right' | 'top' | 'bottom'\r\n    children?: React.ReactNode\r\n    duration?: number\r\n    overlayOpacity?: number\r\n    overlayColor?: String\r\n    enableOverlay?: boolean\r\n    style?: React.CSSProperties\r\n    zIndex?: number\r\n    size?: number | string\r\n    className?: string | undefined\r\n    customIdSuffix?: string | undefined\r\n}\r\n\r\nconst getDirectionStyle = (\r\n    dir: string,\r\n    size?: number | string,\r\n): {} | React.CSSProperties => {\r\n    switch (dir) {\r\n        case 'left':\r\n            return {\r\n                top: 0,\r\n                left: 0,\r\n                transform: 'translate3d(-100%, 0, 0)',\r\n                width: size,\r\n                height: '100vh',\r\n            }\r\n        case 'right':\r\n            return {\r\n                top: 0,\r\n                right: 0,\r\n                transform: 'translate3d(100%, 0, 0)',\r\n                width: size,\r\n                height: '100vh',\r\n            }\r\n        case 'bottom':\r\n            return {\r\n                left: 0,\r\n                right: 0,\r\n                bottom: 0,\r\n                transform: 'translate3d(0, 100%, 0)',\r\n                width: '100%',\r\n                height: size,\r\n            }\r\n        case 'top':\r\n            return {\r\n                left: 0,\r\n                right: 0,\r\n                top: 0,\r\n                transform: 'translate3d(0, -100%, 0)',\r\n                width: '100%',\r\n                height: size,\r\n            }\r\n\r\n        default:\r\n            return {}\r\n    }\r\n}\r\n\r\nconst EZDrawer: React.FC<Props> = function ({\r\n    open,\r\n    onClose = () => {},\r\n    children,\r\n    style,\r\n    enableOverlay = true,\r\n    overlayColor = '#000',\r\n    overlayOpacity = 0.4,\r\n    zIndex = 100,\r\n    duration = 500,\r\n    direction,\r\n    size = 250,\r\n    className,\r\n    customIdSuffix,\r\n}): JSX.Element {\r\n    const idSuffix = React.useMemo(() => {\r\n        return customIdSuffix || (Math.random() + 1).toString(36).substring(7)\r\n    }, [customIdSuffix])\r\n\r\n    const overlayStyles: React.CSSProperties = {\r\n        backgroundColor: `${overlayColor}`,\r\n        opacity: `${overlayOpacity}`,\r\n        zIndex: zIndex,\r\n    }\r\n\r\n    const drawerStyles: React.CSSProperties = {\r\n        zIndex: zIndex + 1,\r\n        transitionDuration: `${duration}ms`,\r\n        ...getDirectionStyle(direction, size),\r\n        ...style,\r\n    }\r\n\r\n    return (\r\n        <div id={'EZDrawer' + idSuffix} className='EZDrawer'>\r\n            <input\r\n                type='checkbox'\r\n                id={'EZDrawer__checkbox' + idSuffix}\r\n                className='EZDrawer__checkbox'\r\n                onChange={onClose}\r\n                checked={open}\r\n            />\r\n            <nav\r\n                role='navigation'\r\n                id={'EZDrawer__container' + idSuffix}\r\n                style={drawerStyles}\r\n                className={'EZDrawer__container ' + className}\r\n            >\r\n                {children}\r\n            </nav>\r\n            {enableOverlay && (\r\n                <label\r\n                    htmlFor={'EZDrawer__checkbox' + idSuffix}\r\n                    id={'EZDrawer__overlay' + idSuffix}\r\n                    className='EZDrawer__overlay'\r\n                    style={overlayStyles}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EZDrawer\r\n"]},"metadata":{},"sourceType":"module"}