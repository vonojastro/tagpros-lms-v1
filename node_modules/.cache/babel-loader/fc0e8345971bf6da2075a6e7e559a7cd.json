{"ast":null,"code":"import { Country } from 'country-state-city';\nimport { USER_TYPE } from 'utils/constants';\nimport * as yup from 'yup';\nimport { errorMessage } from './errorMessages';\nconst {\n  empty_field,\n  too_long,\n  too_short,\n  not_email,\n  password_too_short,\n  passwordMismatched,\n  special_char\n} = errorMessage;\nexport const schema = yup.object({\n  firstName: yup.string().trim().matches(/^[aA-zZ\\s]+$/, {\n    message: special_char,\n    excludeEmptyString: false\n  }).min(2, too_short).max(50, too_long).required(empty_field),\n  lastName: yup.string().trim().matches(/^[aA-zZ\\s]+$/, {\n    message: special_char,\n    excludeEmptyString: false\n  }).min(2, too_short).max(50, too_long).required(empty_field),\n  email: yup.string().trim().required(empty_field).email(not_email).min(2, too_short).max(100, too_long),\n  provider: yup.string().required().nullable(),\n  authToken: yup.string().optional(),\n  password: yup.string().trim().when('provider', {\n    is: v => v === 'none',\n    then: s => s.required(empty_field).min(8, password_too_short).max(50, too_long),\n    otherwise: s => s.optional()\n  }),\n  password2: yup.string().trim().nullable().when('password', {\n    is: v => v === null || v === void 0 ? void 0 : v.length,\n    then: s => s.oneOf([yup.ref('password')], passwordMismatched),\n    otherwise: s => s.optional()\n  }),\n  type: yup.string().required().oneOf(['FAMILY', 'TEACHER', 'LEARNER', USER_TYPE.SCHOOL_LEADER.toUpperCase()]),\n  agree: yup.bool().required().oneOf([true], 'Agreement is required to proceed'),\n  // ...(type === USER_TYPE.SCHOOL_LEADER.toUpperCase()\n  schoolName: yup.string().when('type', {\n    is: USER_TYPE.SCHOOL_LEADER.toUpperCase(),\n    then: s => s.required(empty_field).trim().matches(/^[aA-zZ\\s]+$/, {\n      message: special_char,\n      excludeEmptyString: true\n    }),\n    otherwise: s => s.optional()\n  }),\n  schoolType: yup.number().when('type', {\n    is: USER_TYPE.SCHOOL_LEADER.toUpperCase(),\n    then: s => s.typeError(empty_field).required(empty_field),\n    otherwise: s => s.optional()\n  }),\n  country: yup.string().when('type', {\n    is: USER_TYPE.SCHOOL_LEADER.toUpperCase(),\n    then: s => s.trim().oneOf(Country.getAllCountries().map(_ref => {\n      let {\n        isoCode\n      } = _ref;\n      return isoCode;\n    }), empty_field).typeError(empty_field).required(empty_field),\n    otherwise: s => s.optional()\n  }),\n  recHelp: yup.string().optional(),\n  hiring: yup.number().when('type', {\n    is: USER_TYPE.SCHOOL_LEADER.toUpperCase(),\n    then: s => s.typeError(empty_field).required(empty_field),\n    otherwise: s => s.optional()\n  })\n});","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/validators/registration2.js"],"names":["Country","USER_TYPE","yup","errorMessage","empty_field","too_long","too_short","not_email","password_too_short","passwordMismatched","special_char","schema","object","firstName","string","trim","matches","message","excludeEmptyString","min","max","required","lastName","email","provider","nullable","authToken","optional","password","when","is","v","then","s","otherwise","password2","length","oneOf","ref","type","SCHOOL_LEADER","toUpperCase","agree","bool","schoolName","schoolType","number","typeError","country","getAllCountries","map","isoCode","recHelp","hiring"],"mappings":"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","sourcesContent":["import { Country } from 'country-state-city';\nimport { USER_TYPE } from 'utils/constants';\nimport * as yup from 'yup';\nimport { errorMessage } from './errorMessages';\nconst {\n  empty_field,\n  too_long,\n  too_short,\n  not_email,\n  password_too_short,\n  passwordMismatched,\n  special_char\n} = errorMessage;\n\nexport const schema = yup.object({\n  firstName: yup\n    .string()\n    .trim()\n    .matches(/^[aA-zZ\\s]+$/, {\n      message: special_char,\n      excludeEmptyString: false\n    })\n    .min(2, too_short)\n    .max(50, too_long)\n    .required(empty_field),\n  lastName: yup\n    .string()\n    .trim()\n    .matches(/^[aA-zZ\\s]+$/, {\n      message: special_char,\n      excludeEmptyString: false\n    })\n    .min(2, too_short)\n    .max(50, too_long)\n    .required(empty_field),\n  email: yup\n    .string()\n    .trim()\n    .required(empty_field)\n    .email(not_email)\n    .min(2, too_short)\n    .max(100, too_long),\n  provider: yup\n    .string()\n    .required()\n    .nullable(),\n  authToken: yup.string().optional(),\n  password: yup\n    .string()\n    .trim()\n    .when('provider', {\n      is: v => v === 'none',\n      then: s =>\n        s\n          .required(empty_field)\n          .min(8, password_too_short)\n          .max(50, too_long),\n      otherwise: s => s.optional()\n    }),\n  password2: yup\n    .string()\n    .trim()\n    .nullable()\n    .when('password', {\n      is: v => v?.length,\n      then: s => s.oneOf([yup.ref('password')], passwordMismatched),\n      otherwise: s => s.optional()\n    }),\n  type: yup\n    .string()\n    .required()\n    .oneOf(['FAMILY', 'TEACHER', 'LEARNER', USER_TYPE.SCHOOL_LEADER.toUpperCase()]),\n  agree: yup\n    .bool()\n    .required()\n    .oneOf([true], 'Agreement is required to proceed'),\n  // ...(type === USER_TYPE.SCHOOL_LEADER.toUpperCase()\n  schoolName: yup.string().when('type', {\n    is: USER_TYPE.SCHOOL_LEADER.toUpperCase(),\n    then: s =>\n      s\n        .required(empty_field)\n        .trim()\n        .matches(/^[aA-zZ\\s]+$/, {\n          message: special_char,\n          excludeEmptyString: true\n        }),\n    otherwise: s => s.optional()\n  }),\n\n  schoolType: yup.number().when('type', {\n    is: USER_TYPE.SCHOOL_LEADER.toUpperCase(),\n    then: s => s.typeError(empty_field).required(empty_field),\n    otherwise: s => s.optional()\n  }),\n\n  country: yup.string().when('type', {\n    is: USER_TYPE.SCHOOL_LEADER.toUpperCase(),\n    then: s =>\n      s\n        .trim()\n        .oneOf(Country.getAllCountries().map(({ isoCode }) => isoCode), empty_field)\n        .typeError(empty_field)\n        .required(empty_field),\n    otherwise: s => s.optional()\n  }),\n  recHelp: yup.string().optional(),\n  hiring: yup.number().when('type', {\n    is: USER_TYPE.SCHOOL_LEADER.toUpperCase(),\n    then: s => s.typeError(empty_field).required(empty_field),\n    otherwise: s => s.optional()\n  })\n});\n"]},"metadata":{},"sourceType":"module"}