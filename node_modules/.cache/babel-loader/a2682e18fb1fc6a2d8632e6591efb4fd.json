{"ast":null,"code":"var _jsxFileName = \"/Users/vonojastro/Desktop/lms-frontend-v2/src/components/AdminSetPasswordPage/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Input from '../common/Register/Input';\nimport Modal from '../common/Register/Modal';\nimport { createBrowserHistory } from 'history';\nimport { saveAdminPassword } from \"api/admin\";\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet history = createBrowserHistory();\nexport default function AdminSetPasswordPage() {\n  _s();\n\n  const errorMessageList = ['Account not permitted to perform action.', 'Password is Empty', 'Confirm Password is Empty', 'Passwords does not match', 'The link is expired. Please contact your adminstrator for a new link'];\n  const [credentials, setCredentials] = useState({\n    newPassword: '',\n    confirmPassword: ''\n  });\n  const [token, setToken] = useState('');\n  const [errorList, setErrorList] = useState([{\n    newPassword: false\n  }, {\n    confirmPassword: false\n  }]);\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const [showModal, setShowModal] = useState({\n    display: false,\n    message: '',\n    title: '',\n    type: false\n  });\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    onInputChange(e.target.name, e.target.value);\n  };\n\n  const onInputChange = async (name, value) => {\n    await setCredentials(prevState => ({ ...prevState,\n      [name]: value\n    }));\n  };\n\n  const handleValidationList = event => {\n    let {\n      name,\n      isValid\n    } = event;\n    setErrorList(prevState => {\n      return prevState.map(fieldObj => fieldObj.hasOwnProperty(name) ? { ...fieldObj,\n        [name]: isValid\n      } : fieldObj);\n    });\n  };\n\n  const isFormValid = () => {\n    let isValid = true; // if blank\n\n    if (credentials.newPassword === '' || credentials.confirmPassword === '') isValid = false; // eslint-disable-next-line array-callback-return\n\n    errorList.map(item => {\n      if (Object.values(item).includes(false)) isValid = false;\n    });\n    return isValid;\n  };\n\n  const setPasswordPOST = async event => {\n    setSubmitLoading(true);\n    const args = {\n      newPassword: credentials.newPassword,\n      confirmPassword: credentials.confirmPassword,\n      token\n    };\n    console.log(args);\n    await saveAdminPassword(dispatch, args, (status, data) => {\n      if (!status) {\n        // toast error\n        // toast.error(\"Oh no! Unable to Create an Account. Please Try Again.\");\n        let message = \"Saving of Admin Account Password Failed. Please contact Your Administrator for instructions\";\n\n        if (errorMessageList.indexOf(data.response.data.message) > -1) {\n          message = data.response.data.message;\n        }\n\n        if (!!data.response.data.type && (data.response.data.type === \"token_invalid\" || data.response.data.type === \"blank_token\")) {\n          message = \"The link is expired. Please contact your adminstrator for a new link\";\n        }\n\n        displayModal(\"Oh No!\", message, false);\n      } else {\n        // toast success\n        // toast.success(\"Account Details Successfully Saved!\");\n        console.log(data);\n        displayModal(\"Great!\", \"You can now login\", true);\n      }\n    });\n    setSubmitLoading(false);\n  };\n\n  const validateTokenPOST = async () => {};\n\n  const setTokenFA = async () => {\n    if (token === '') {\n      const pathname = history.location.pathname.split('/');\n      const tokenDummy = pathname.pop();\n\n      if (!!tokenDummy && tokenDummy !== '') {\n        await setToken(tokenDummy);\n      } else {\n        window.location.pathname = \"/landing\";\n        localStorage.clear();\n      }\n    }\n  };\n\n  setTokenFA();\n\n  const closeModal = async () => {\n    await setShowModal(prevState => ({ ...prevState,\n      display: false\n    }));\n\n    if (showModal.message === errorMessageList[0] || showModal.message === 'You can now login' || showModal.message === errorMessageList[errorMessageList.length - 1]) {\n      window.location.pathname = \"/admin-login\";\n      localStorage.clear();\n    }\n  };\n\n  const displayModal = async (titleParam, messageParam, success) => {\n    await setShowModal({\n      display: true,\n      title: titleParam,\n      message: messageParam,\n      type: success\n    });\n  };\n\n  React.useEffect(() => {\n    validateTokenPOST();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"wrapper\",\n    className: \"login-register login-sidebar\",\n    style: {\n      backgroundImage: \"url(./assets/images/loginbg01.png)\",\n      backgroundSize: \"cover\",\n      backgroundPosition: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-box-left login-box card p-2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row w-100 h-100\",\n          style: {\n            margin: '0 auto'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-lg-12 col-xl-12\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"form-horizontal floating-labels\",\n              children: [/*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"#/\",\n                className: \"text-center db\",\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: \"./assets/images/logo-icon.png\",\n                  alt: \"Home\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: \"./assets/images/logo-text.png\",\n                  alt: \"Home\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-center db\",\n                children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    class: \"badge badge-info\",\n                    children: \"ADMIN\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 177,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: 'password',\n                placeholder: 'New Password',\n                name: 'newPassword',\n                autoComplete: false,\n                required: true,\n                topStyle: 'm-t-40',\n                handleChange: handleChange,\n                password: credentials.newPassword,\n                handleValidationList: handleValidationList\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: 'password',\n                placeholder: 'Confirm Password',\n                name: 'confirmPassword',\n                autoComplete: false,\n                required: true,\n                handleChange: handleChange,\n                password: credentials.confirmPassword,\n                handleValidationList: handleValidationList\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group text-center m-t-20\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-xs-12\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-info btn-lg btn-block text-uppercase waves-effect waves-light\",\n                    type: \"button\",\n                    onClick: e => setPasswordPOST(e),\n                    disabled: submitLoading || !isFormValid(),\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      style: {\n                        display: submitLoading ? 'inline-block' : 'none'\n                      },\n                      class: \"spinner-border spinner-border-sm btn-load\",\n                      role: \"status\",\n                      \"aria-hidden\": \"true\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 211,\n                      columnNumber: 23\n                    }, this), \"SET PASSWORD \", /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"fa fa-arrow-right m-l-5\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 213,\n                      columnNumber: 36\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 205,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 204,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }, this), showModal.display && /*#__PURE__*/_jsxDEV(Modal, {\n      content: {\n        title: showModal.title,\n        message: showModal.message\n      },\n      isSuccess: showModal.type,\n      onClose: () => closeModal()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AdminSetPasswordPage, \"cM793Eleh+oJDGuBadF4730l//g=\", false, function () {\n  return [useDispatch];\n});\n\n_c = AdminSetPasswordPage;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminSetPasswordPage\");","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/components/AdminSetPasswordPage/index.jsx"],"names":["React","useState","useDispatch","Input","Modal","createBrowserHistory","saveAdminPassword","history","AdminSetPasswordPage","errorMessageList","credentials","setCredentials","newPassword","confirmPassword","token","setToken","errorList","setErrorList","submitLoading","setSubmitLoading","showModal","setShowModal","display","message","title","type","dispatch","handleChange","e","onInputChange","target","name","value","prevState","handleValidationList","event","isValid","map","fieldObj","hasOwnProperty","isFormValid","item","Object","values","includes","setPasswordPOST","args","console","log","status","data","indexOf","response","displayModal","validateTokenPOST","setTokenFA","pathname","location","split","tokenDummy","pop","window","localStorage","clear","closeModal","length","titleParam","messageParam","success","useEffect","backgroundImage","backgroundSize","backgroundPosition","margin"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport Input from '../common/Register/Input';\nimport Modal from '../common/Register/Modal';\nimport { createBrowserHistory } from 'history';\n\n\nimport { saveAdminPassword } from \"api/admin\";\n\nimport './index.css';\n\nlet history = createBrowserHistory();\n\n\n\nexport default function AdminSetPasswordPage() {\n  const errorMessageList = [\n    'Account not permitted to perform action.',\n    'Password is Empty',\n    'Confirm Password is Empty',\n    'Passwords does not match',\n    'The link is expired. Please contact your adminstrator for a new link'\n  ];\n\n  const [credentials, setCredentials] = useState({newPassword: '', confirmPassword: ''});\n  const [token, setToken] = useState('');\n  const [errorList, setErrorList] = useState([{newPassword: false}, {confirmPassword: false}]);\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const [showModal, setShowModal] = useState({display: false, message:'', title:'', type: false});\n\n  const dispatch = useDispatch();\n\n  const handleChange = (e) =>{\n    onInputChange(e.target.name, e.target.value);\n  };\n\n  const onInputChange = async (name, value) =>{\n    await setCredentials((prevState) =>({\n        ...prevState,\n        [name]: value\n    }));\n  };\n\n  const handleValidationList = (event) =>{\n      let { name, isValid } = event;\n      setErrorList((prevState)=>{\n        return prevState.map((fieldObj) =>\n          fieldObj.hasOwnProperty(name) ? { ...fieldObj, [name]: isValid } : fieldObj\n        );\n      });\n  };\n\n  const isFormValid = () =>{\n    let isValid = true;\n    // if blank\n    if(credentials.newPassword === '' || credentials.confirmPassword === '')\n      isValid = false;\n\n    // eslint-disable-next-line array-callback-return\n    errorList.map((item)=>{\n      if (Object.values(item).includes(false))\n        isValid = false;\n    });\n    return isValid;\n  };\n\n  const setPasswordPOST = async (event) =>{\n    setSubmitLoading(true);\n    const args = {\n        newPassword: credentials.newPassword,\n        confirmPassword: credentials.confirmPassword,\n        token\n    };\n    console.log(args);\n    await saveAdminPassword(dispatch, args, (status, data)=>{\n        if(!status){\n            // toast error\n            // toast.error(\"Oh no! Unable to Create an Account. Please Try Again.\");\n            let message = \"Saving of Admin Account Password Failed. Please contact Your Administrator for instructions\";\n            if (errorMessageList.indexOf(data.response.data.message) > -1){\n              message = data.response.data.message;\n            }\n            if (!!data.response.data.type &&\n              (data.response.data.type === \"token_invalid\" ||\n              data.response.data.type === \"blank_token\"))\n            {\n              message = \"The link is expired. Please contact your adminstrator for a new link\";\n            }\n            displayModal(\"Oh No!\", message, false);\n        }\n        else\n        {\n            // toast success\n            // toast.success(\"Account Details Successfully Saved!\");\n            console.log(data);\n            displayModal(\"Great!\", \"You can now login\", true);\n        }\n    });\n    setSubmitLoading(false);\n\n  };\n\n  const validateTokenPOST = async () =>{\n    \n  };\n\n  const setTokenFA = async () =>{\n    if (token === '')\n    {\n      const pathname = history.location.pathname.split('/');\n      const tokenDummy = pathname.pop();\n      if (!!tokenDummy && tokenDummy !== '')\n      {\n        await setToken(tokenDummy);\n      }\n      else\n      {\n        window.location.pathname=\"/landing\";\n        localStorage.clear();\n      }\n    }\n  };\n\n  setTokenFA();\n\n  const closeModal = async () =>{\n    await setShowModal((prevState)=>({\n      ...prevState,\n      display: false\n    }));\n\n    if (showModal.message === errorMessageList[0] || showModal.message === 'You can now login' || showModal.message === errorMessageList[errorMessageList.length-1])\n    {\n      window.location.pathname=\"/admin-login\";\n      localStorage.clear();\n    }\n  };\n\n\n  const displayModal = async (titleParam, messageParam, success) =>{\n    await setShowModal({\n      display: true,\n      title: titleParam,\n      message: messageParam,\n      type: success\n    });\n  };\n\n  React.useEffect(() => {\n    validateTokenPOST();\n  }, []);\n\n  return(\n    <section\n        id=\"wrapper\"\n        className=\"login-register login-sidebar\"\n        style={{\n            backgroundImage: \"url(./assets/images/loginbg01.png)\",\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n        }}\n        >\n          <div className='login-box-left login-box card p-2'>\n            <div className='card-body'>\n              <div className='row w-100 h-100' style={{ margin: '0 auto' }}>\n                <div className='col-lg-12 col-xl-12'>\n                  <form\n                    className='form-horizontal floating-labels'\n                  >\n                    <a href='#/' className='text-center db'>\n                      <img src='./assets/images/logo-icon.png' alt='Home' />\n                      <br />\n                      <img src='./assets/images/logo-text.png' alt='Home' />\n                    </a>\n\n                    <div className=\"text-center db\">\n                      <h2><span class=\"badge badge-info\">ADMIN</span></h2>\n                    </div>\n\n                    <Input\n                      type={'password'}\n                      placeholder={'New Password'}\n                      name={'newPassword'}\n                      autoComplete={false}\n                      required={true}\n                      topStyle={'m-t-40'}\n                      handleChange={handleChange}\n                      password={credentials.newPassword}\n                      handleValidationList={handleValidationList}\n                    />\n\n                    <Input\n                      type={'password'}\n                      placeholder={'Confirm Password'}\n                      name={'confirmPassword'}\n                      autoComplete={false}\n                      required={true}\n                      handleChange={handleChange}\n                      password={credentials.confirmPassword}\n                      handleValidationList={handleValidationList}\n                    />\n\n                <div className='form-group text-center m-t-20'>\n                  <div className='col-xs-12'>\n                    <button\n                      className='btn btn-info btn-lg btn-block text-uppercase waves-effect waves-light'\n                      type='button'\n                      onClick={(e) => setPasswordPOST(e)}\n                      disabled={submitLoading || !isFormValid()}\n                    >\n                      <span style={{ display: submitLoading ? 'inline-block' : 'none' }} class=\"spinner-border spinner-border-sm btn-load\" role=\"status\" aria-hidden=\"true\"></span>\n\n                      SET PASSWORD <i className='fa fa-arrow-right m-l-5'></i>\n                    </button>\n                  </div>\n                </div>\n                  </form>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {showModal.display && \n          <Modal\n            content={{ title: showModal.title, message: showModal.message }}\n            isSuccess={showModal.type}\n            onClose={() => closeModal()}\n          />\n        }\n        </section>\n    );\n};"]},"metadata":{},"sourceType":"module"}