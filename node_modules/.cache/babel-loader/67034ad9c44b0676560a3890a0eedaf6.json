{"ast":null,"code":"var _jsxFileName = \"/Users/vonojastro/Desktop/lms-frontend-v2/src/components/MailView/EmailContentView/index.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { getAllMessagesByThreadId } from '../../../api/emailMessaging';\nimport EmailComposer, { Container as EmailComposerFormContainer, EmailComposerInputFields } from '../EmailComposer';\nimport { fields } from '../EmailComposer/fields';\nimport IconButton from '../IconButton/index';\nimport Email from './Email';\nimport EmailContentViewContainer from './EmailContentViewContentLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Subject = styled.h1``;\n_c = Subject;\nexport const Message = styled.div`\n  display: ${props => !props.show && 'none'};\n`;\nconst Container = styled.div`\n  position: relative;\n  height: 100%;\n  width: 100%;\n  color: black;\n  display: grid;\n  gap: 1.5rem;\n  grid-auto-rows: min-content;\n`;\n_c2 = Container;\nexport const MailActionContainer = styled.div`\n  & ${EmailComposerFormContainer} {\n    grid-template-rows: 1fr auto;\n  }\n\n  & ${EmailComposerInputFields} {\n    display: none;\n  }\n`;\n_c3 = MailActionContainer;\nconst EmailComposerContainer = styled.div`\n  min-height: 500px;\n  height: 100%;\n  padding: 1rem;\n  background: aliceblue;\n`;\n_c4 = EmailComposerContainer;\nexport default function EmailContentView() {\n  _s();\n\n  const [showEmailComposer, setShowEmailComposer] = useState(false);\n  const emailThreads = useSelector(state => state.mailView.emailThread.data);\n  const loading = useSelector(state => state.mailView.emailThread.get.loading);\n  const success = useSelector(state => state.mailView.emailThread.get.success);\n\n  const handleClickReplyButton = () => setShowEmailComposer(!showEmailComposer);\n\n  const dispatch = useDispatch();\n  const params = useParams();\n  useEffect(() => {\n    getAllMessagesByThreadId(dispatch, {\n      threadId: params.threadId\n    });\n  }, [params.threadId]);\n  const [emailThread] = emailThreads;\n  const {\n    threadId,\n    mailSubject\n  } = emailThread || {};\n\n  const handleSuccess = messageSent => {\n    setShowEmailComposer(false);\n    getAllMessagesByThreadId(dispatch, {\n      threadId: params.threadId\n    });\n  };\n\n  const containerRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    ref: containerRef,\n    children: loading && !emailThreads.length ? /*#__PURE__*/_jsxDEV(EmailContentViewContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this) : success && !emailThreads.length ? /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/mail\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Subject, {\n        children: mailSubject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this), emailThreads === null || emailThreads === void 0 ? void 0 : emailThreads.map((data, index) => /*#__PURE__*/_jsxDEV(Email, { ...data,\n        open: index === emailThreads.length - 1,\n        order: index\n      }, data.messageId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(MailActionContainer, {\n        showEmailComposer: showEmailComposer,\n        children: showEmailComposer ? /*#__PURE__*/_jsxDEV(EmailComposerContainer, {\n          children: /*#__PURE__*/_jsxDEV(EmailComposer, {\n            initialValues: {\n              [fields.mailSubject.name]: mailSubject,\n              [fields.mailReceiver.name]: [emailThread],\n              [fields.carbonCopy.name]: [],\n              [fields.blindCarbonCopy.name]: [],\n              [fields.mailAttachments.name]: [],\n              [fields.threadId.name]: threadId\n            },\n            handleSuccess: handleSuccess\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-light font-14\",\n            onClick: handleClickReplyButton,\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              fa: \"fas fa-share\",\n              background: \"transparent\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }, this), \"Reply\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EmailContentView, \"vn8h7YKv+meciCri0velTgI8gzc=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch, useParams];\n});\n\n_c5 = EmailContentView;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Subject\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"MailActionContainer\");\n$RefreshReg$(_c4, \"EmailComposerContainer\");\n$RefreshReg$(_c5, \"EmailContentView\");","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/components/MailView/EmailContentView/index.jsx"],"names":["React","useEffect","useRef","useState","useDispatch","useSelector","Navigate","useParams","styled","getAllMessagesByThreadId","EmailComposer","Container","EmailComposerFormContainer","EmailComposerInputFields","fields","IconButton","Email","EmailContentViewContainer","Subject","h1","Message","div","props","show","MailActionContainer","EmailComposerContainer","EmailContentView","showEmailComposer","setShowEmailComposer","emailThreads","state","mailView","emailThread","data","loading","get","success","handleClickReplyButton","dispatch","params","threadId","mailSubject","handleSuccess","messageSent","containerRef","length","map","index","messageId","name","mailReceiver","carbonCopy","blindCarbonCopy","mailAttachments"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { getAllMessagesByThreadId } from '../../../api/emailMessaging';\nimport EmailComposer, {\n  Container as EmailComposerFormContainer,\n  EmailComposerInputFields\n} from '../EmailComposer';\nimport { fields } from '../EmailComposer/fields';\nimport IconButton from '../IconButton/index';\nimport Email from './Email';\nimport EmailContentViewContainer from './EmailContentViewContentLoader';\n\nexport const Subject = styled.h1``;\nexport const Message = styled.div`\n  display: ${props => !props.show && 'none'};\n`;\n\nconst Container = styled.div`\n  position: relative;\n  height: 100%;\n  width: 100%;\n  color: black;\n  display: grid;\n  gap: 1.5rem;\n  grid-auto-rows: min-content;\n`;\n\nexport const MailActionContainer = styled.div`\n  & ${EmailComposerFormContainer} {\n    grid-template-rows: 1fr auto;\n  }\n\n  & ${EmailComposerInputFields} {\n    display: none;\n  }\n`;\n\nconst EmailComposerContainer = styled.div`\n  min-height: 500px;\n  height: 100%;\n  padding: 1rem;\n  background: aliceblue;\n`;\n\nexport default function EmailContentView() {\n  const [showEmailComposer, setShowEmailComposer] = useState(false);\n  const emailThreads = useSelector(state => state.mailView.emailThread.data);\n  const loading = useSelector(state => state.mailView.emailThread.get.loading);\n  const success = useSelector(state => state.mailView.emailThread.get.success);\n  const handleClickReplyButton = () => setShowEmailComposer(!showEmailComposer);\n\n  const dispatch = useDispatch();\n  const params = useParams();\n\n  useEffect(() => {\n    getAllMessagesByThreadId(dispatch, { threadId: params.threadId });\n  }, [params.threadId]);\n\n  const [emailThread] = emailThreads;\n  const { threadId, mailSubject } = emailThread || {};\n\n  const handleSuccess = messageSent => {\n    setShowEmailComposer(false);\n    getAllMessagesByThreadId(dispatch, { threadId: params.threadId });\n  };\n  const containerRef = useRef(null);\n  return (\n    <Container ref={containerRef}>\n      {loading && !emailThreads.length ? (\n        <EmailContentViewContainer />\n      ) : success && !emailThreads.length ? (\n        <Navigate to='/mail' />\n      ) : (\n        <React.Fragment>\n          <Subject>{mailSubject}</Subject>\n          {emailThreads?.map((data, index) => (\n            <Email\n              key={data.messageId}\n              {...data}\n              open={index === emailThreads.length - 1}\n              order={index}\n            />\n          ))}\n          <MailActionContainer showEmailComposer={showEmailComposer}>\n            {showEmailComposer ? (\n              <EmailComposerContainer>\n                <EmailComposer\n                  initialValues={{\n                    [fields.mailSubject.name]: mailSubject,\n                    [fields.mailReceiver.name]: [emailThread],\n                    [fields.carbonCopy.name]: [],\n                    [fields.blindCarbonCopy.name]: [],\n                    [fields.mailAttachments.name]: [],\n                    [fields.threadId.name]: threadId\n                  }}\n                  handleSuccess={handleSuccess}\n                />\n              </EmailComposerContainer>\n            ) : (\n              <div>\n                <button\n                  className='btn btn-light font-14'\n                  onClick={handleClickReplyButton}\n                >\n                  <IconButton fa='fas fa-share' background='transparent' />\n                  Reply\n                </button>\n              </div>\n            )}\n          </MailActionContainer>\n        </React.Fragment>\n      )}\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}