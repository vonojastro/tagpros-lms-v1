{"ast":null,"code":"var _jsxFileName = \"/Users/vonojastro/Desktop/lms-frontend-v2/src/components/MailView/AutocompleteInput/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\nimport { useFieldArray } from 'react-final-form-arrays';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n  svg {\n    display: none;\n  }\n`;\n_c = Wrapper;\nexport default function AutocompleteInput(_ref) {\n  _s();\n\n  let {\n    name,\n    ...reactSearchAutocompleteProps\n  } = _ref;\n  const fieldArray = useFieldArray(name);\n  const [searchString, setSearchString] = useState('');\n  const wrapperRef = useRef(null);\n\n  const handleSelect = item => {\n    if (!fieldArray.fields.value.find(_ref2 => {\n      let {\n        senderId\n      } = _ref2;\n      return item.senderId === senderId;\n    })) fieldArray.fields.push(item);\n    setSearchString('');\n  };\n\n  const handleSearch = string => {\n    setSearchString(string);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    ref: wrapperRef,\n    children: /*#__PURE__*/_jsxDEV(ReactSearchAutocomplete, {\n      autoFocus: true,\n      ...reactSearchAutocompleteProps,\n      onSelect: handleSelect,\n      inputSearchString: searchString,\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AutocompleteInput, \"ZSRjDzpp9KQjFB5Owo940v/RU40=\", false, function () {\n  return [useFieldArray];\n});\n\n_c2 = AutocompleteInput;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"AutocompleteInput\");","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/components/MailView/AutocompleteInput/index.jsx"],"names":["React","useRef","useState","styled","ReactSearchAutocomplete","useFieldArray","Wrapper","div","AutocompleteInput","name","reactSearchAutocompleteProps","fieldArray","searchString","setSearchString","wrapperRef","handleSelect","item","fields","value","find","senderId","push","handleSearch","string"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SAASC,aAAT,QAA8B,yBAA9B;;AACA,MAAMC,OAAO,GAAGH,MAAM,CAACI,GAAI;AAC3B;AACA;AACA;AACA,CAJA;KAAMD,O;AAMN,eAAe,SAASE,iBAAT,OAAsE;AAAA;;AAAA,MAA3C;AAAEC,IAAAA,IAAF;AAAQ,OAAGC;AAAX,GAA2C;AACnF,QAAMC,UAAU,GAAGN,aAAa,CAACI,IAAD,CAAhC;AACA,QAAM,CAACG,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAMY,UAAU,GAAGb,MAAM,CAAC,IAAD,CAAzB;;AACA,QAAMc,YAAY,GAAGC,IAAI,IAAI;AAC3B,QACE,CAACL,UAAU,CAACM,MAAX,CAAkBC,KAAlB,CAAwBC,IAAxB,CAA6B;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,aAAkBJ,IAAI,CAACI,QAAL,KAAkBA,QAApC;AAAA,KAA7B,CADH,EAGET,UAAU,CAACM,MAAX,CAAkBI,IAAlB,CAAuBL,IAAvB;AACFH,IAAAA,eAAe,CAAC,EAAD,CAAf;AACD,GAND;;AAQA,QAAMS,YAAY,GAAGC,MAAM,IAAI;AAC7BV,IAAAA,eAAe,CAACU,MAAD,CAAf;AACD,GAFD;;AAGA,sBACE,QAAC,OAAD;AAAS,IAAA,GAAG,EAAET,UAAd;AAAA,2BACE,QAAC,uBAAD;AACE,MAAA,SAAS,MADX;AAAA,SAEMJ,4BAFN;AAGE,MAAA,QAAQ,EAAEK,YAHZ;AAIE,MAAA,iBAAiB,EAAEH,YAJrB;AAKE,MAAA,QAAQ,EAAEU;AALZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GA1BuBd,iB;UACHH,a;;;MADGG,iB","sourcesContent":["import React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\nimport { useFieldArray } from 'react-final-form-arrays';\nconst Wrapper = styled.div`\n  svg {\n    display: none;\n  }\n`;\n\nexport default function AutocompleteInput({ name, ...reactSearchAutocompleteProps }) {\n  const fieldArray = useFieldArray(name);\n  const [searchString, setSearchString] = useState('');\n  const wrapperRef = useRef(null);\n  const handleSelect = item => {\n    if (\n      !fieldArray.fields.value.find(({ senderId }) => item.senderId === senderId)\n    )\n      fieldArray.fields.push(item);\n    setSearchString('');\n  };\n\n  const handleSearch = string => {\n    setSearchString(string);\n  };\n  return (\n    <Wrapper ref={wrapperRef}>\n      <ReactSearchAutocomplete\n        autoFocus\n        {...reactSearchAutocompleteProps}\n        onSelect={handleSelect}\n        inputSearchString={searchString}\n        onSearch={handleSearch}\n      />\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}