{"ast":null,"code":"import { getEmailThread, getEmailThreadError, getEmailThreads, getEmailThreadsError, getEmailThreadsSuccess, getEmailThreadSuccess } from 'redux/actions/mailView';\nimport _ from 'lodash';\nimport { api } from '../api';\nconst EMAIL = '/email';\n/**\n * @typedef {Object} EmailThread\n * @property {string} threadId\n * @property {string} subject\n * @property {string} createdDate\n * @property {string} updatedDate\n * @property {string} sender\n */\n\nexport const getAllEmailThreadsByUser = async dispatch => {\n  try {\n    if (dispatch) dispatch(getEmailThreads());\n    const response = await api.post(EMAIL + '/getAllEmailThreadsByUser');\n    if (dispatch) dispatch(getEmailThreadsSuccess(response.data));\n    return response.data;\n  } catch (error) {\n    console.log('ðŸš€ ~ file: emailMessaging.js ~ line 29 ~ error', error);\n    if (dispatch) dispatch(getEmailThreadsError(error.response || error.request || error));\n    throw error;\n  }\n};\nexport const getAllMessagesByThreadId = async (dispatch, _ref) => {\n  let {\n    threadId\n  } = _ref;\n\n  try {\n    dispatch(getEmailThread());\n    const response = await api.post(EMAIL + '/getAllMessagesByThreadId', {\n      threadId\n    });\n    dispatch(getEmailThreadSuccess(_.filter(response.data, _ref2 => {\n      let {\n        isDeleted,\n        isPermanentlyDeleted\n      } = _ref2;\n      return !isDeleted && !isPermanentlyDeleted;\n    })));\n  } catch (error) {\n    console.log('ðŸš€ ~ file: emailMessaging.js ~ line 40 ~ error', error);\n    dispatch(getEmailThreadError(error.response || error.request || error));\n    throw error;\n  }\n};\nexport const sendEmail = async (dispatch, requestPayload) => {\n  try {\n    const response = await api.post(EMAIL + '/sendEmail', requestPayload);\n    console.log('ðŸš€ ~ file: emailMessaging.js ~ line 48 ~ response', response);\n    return response.data;\n  } catch (error) {\n    console.log('ðŸš€ ~ file: emailMessaging.js ~ line 52 ~ error', error);\n    throw error;\n  }\n};\nexport const deleteEmailMessage = async (dispatch, requestPayload) => {\n  try {\n    const response = await api.post(EMAIL + '/deleteEmailMessage', requestPayload);\n    return response.data;\n  } catch (error) {\n    console.log('ðŸš€ ~ file: emailMessaging.js ~ line 61 ~ deleteEmailMessage ~ error', error);\n    throw error;\n  }\n};\nexport const markEmailThreadsAsRead = async (dispatch, requestPayload) => {\n  try {\n    const response = await api.post(EMAIL + '/markEmailThreadsAsRead', requestPayload);\n    return response.data;\n  } catch (error) {\n    console.log('ðŸš€ ~ file: emailMessaging.js ~ line 74 ~ markEmailThreadsAsRead ~ error', error);\n    throw error;\n  }\n};\nexport const getAllEmailDraftsOfUser = async dispatch => {\n  try {\n    dispatch(getEmailThreads());\n    const response = await api.post(EMAIL + '/getAllEmailDraftsOfUser');\n    dispatch(getEmailThreadsSuccess(response.data));\n  } catch (error) {\n    dispatch(getEmailThreadsError(error.response || error.request || error));\n    console.log('ðŸš€ ~ file: emailMessaging.js ~ line 89 ~ getAllEmailDraftsOfUser ~ error', error);\n    throw error;\n  }\n};\nexport const saveEmailDraft = async (dispatch, requestPayload) => {\n  try {\n    const response = await api.post(EMAIL + '/saveEmailDraft', requestPayload);\n    return response.data;\n  } catch (error) {\n    console.log(\"ðŸš€ ~ file: emailMessaging.js ~ line 111 ~ saveEmailDraft ~ error\", error);\n    throw error;\n  }\n};","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/api/emailMessaging.js"],"names":["getEmailThread","getEmailThreadError","getEmailThreads","getEmailThreadsError","getEmailThreadsSuccess","getEmailThreadSuccess","_","api","EMAIL","getAllEmailThreadsByUser","dispatch","response","post","data","error","console","log","request","getAllMessagesByThreadId","threadId","filter","isDeleted","isPermanentlyDeleted","sendEmail","requestPayload","deleteEmailMessage","markEmailThreadsAsRead","getAllEmailDraftsOfUser","saveEmailDraft"],"mappings":"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","sourcesContent":["import {\n  getEmailThread,\n  getEmailThreadError,\n  getEmailThreads,\n  getEmailThreadsError,\n  getEmailThreadsSuccess,\n  getEmailThreadSuccess,\n} from 'redux/actions/mailView';\nimport _ from 'lodash';\n\nimport { api } from '../api';\n\nconst EMAIL = '/email';\n\n/**\n * @typedef {Object} EmailThread\n * @property {string} threadId\n * @property {string} subject\n * @property {string} createdDate\n * @property {string} updatedDate\n * @property {string} sender\n */\n\nexport const getAllEmailThreadsByUser = async dispatch => {\n  try {\n    if(dispatch)\n      dispatch(getEmailThreads());\n    const response = await api.post(EMAIL + '/getAllEmailThreadsByUser');\n    if(dispatch)\n      dispatch(getEmailThreadsSuccess(response.data));\n    return response.data\n  } catch (error) {\n    console.log('ðŸš€ ~ file: emailMessaging.js ~ line 29 ~ error', error);\n    if(dispatch)\n      dispatch(getEmailThreadsError(error.response || error.request || error));\n    throw error;\n  }\n};\n\nexport const getAllMessagesByThreadId = async (dispatch, { threadId }) => {\n  try {\n    dispatch(getEmailThread());\n    const response = await api.post(EMAIL + '/getAllMessagesByThreadId', { threadId });\n    dispatch(\n      getEmailThreadSuccess(\n        _.filter(\n          response.data,\n          ({ isDeleted, isPermanentlyDeleted }) => !isDeleted && !isPermanentlyDeleted\n        )\n      )\n    );\n  } catch (error) {\n    console.log('ðŸš€ ~ file: emailMessaging.js ~ line 40 ~ error', error);\n    dispatch(getEmailThreadError(error.response || error.request || error));\n    throw error;\n  }\n};\n\nexport const sendEmail = async (dispatch, requestPayload) => {\n  try {\n    const response = await api.post(EMAIL + '/sendEmail', requestPayload);\n    console.log('ðŸš€ ~ file: emailMessaging.js ~ line 48 ~ response', response);\n    return response.data;\n  } catch (error) {\n    console.log('ðŸš€ ~ file: emailMessaging.js ~ line 52 ~ error', error);\n    throw error;\n  }\n};\n\nexport const deleteEmailMessage = async (dispatch, requestPayload) => {\n  try {\n    const response = await api.post(EMAIL + '/deleteEmailMessage', requestPayload);\n    return response.data;\n  } catch (error) {\n    console.log(\n      'ðŸš€ ~ file: emailMessaging.js ~ line 61 ~ deleteEmailMessage ~ error',\n      error\n    );\n    throw error;\n  }\n};\n\nexport const markEmailThreadsAsRead = async (dispatch, requestPayload) => {\n  try {\n    const response = await api.post(EMAIL + '/markEmailThreadsAsRead', requestPayload);\n    return response.data;\n  } catch (error) {\n    console.log(\n      'ðŸš€ ~ file: emailMessaging.js ~ line 74 ~ markEmailThreadsAsRead ~ error',\n      error\n    );\n    throw error;\n  }\n};\n\nexport const getAllEmailDraftsOfUser = async dispatch => {\n  try {\n    dispatch(getEmailThreads());\n    const response = await api.post(EMAIL + '/getAllEmailDraftsOfUser');\n    dispatch(getEmailThreadsSuccess(response.data));\n  } catch (error) {\n    dispatch(getEmailThreadsError(error.response || error.request || error));\n    console.log(\n      'ðŸš€ ~ file: emailMessaging.js ~ line 89 ~ getAllEmailDraftsOfUser ~ error',\n      error\n    );\n    throw error;\n  }\n};\n\nexport const saveEmailDraft = async ( dispatch, requestPayload ) => {\n  try {\n    const response = await api.post(EMAIL + '/saveEmailDraft', requestPayload);\n    return response.data\n  } catch (error) {\n    console.log(\"ðŸš€ ~ file: emailMessaging.js ~ line 111 ~ saveEmailDraft ~ error\", error)\n    throw error;\n  }\n};"]},"metadata":{},"sourceType":"module"}