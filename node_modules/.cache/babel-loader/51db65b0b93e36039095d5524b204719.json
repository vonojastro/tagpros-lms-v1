{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { useRef, useEffect } from 'react';\nimport invariant from 'tiny-invariant';\n\nvar useBeforeunload = function useBeforeunload(handler) {\n  !(handler == null || typeof handler === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'Expected `handler` to be a function') : invariant(false) : void 0;\n  var eventListenerRef = useRef();\n  useEffect(function () {\n    eventListenerRef.current = function (event) {\n      var returnValue = handler === null || handler === void 0 ? void 0 : handler(event); // Handle legacy `event.returnValue` property\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\n\n      if (typeof returnValue === 'string') {\n        return event.returnValue = returnValue;\n      } // Chrome doesn't support `event.preventDefault()` on `BeforeUnloadEvent`,\n      // instead it requires `event.returnValue` to be set\n      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload#browser_compatibility\n\n\n      if (event.defaultPrevented) {\n        return event.returnValue = '';\n      }\n    };\n  }, [handler]);\n  useEffect(function () {\n    var eventListener = function eventListener(event) {\n      return eventListenerRef.current(event);\n    };\n\n    window.addEventListener('beforeunload', eventListener);\n    return function () {\n      window.removeEventListener('beforeunload', eventListener);\n    };\n  }, []);\n};\n\nvar Beforeunload = function Beforeunload(_ref) {\n  var _ref$children = _ref.children,\n      children = _ref$children === void 0 ? null : _ref$children,\n      onBeforeunload = _ref.onBeforeunload;\n  useBeforeunload(onBeforeunload);\n  return children;\n};\n\nBeforeunload.propTypes\n/* remove-proptypes */\n= process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.any,\n  onBeforeunload: PropTypes.func.isRequired\n} : {};\nexport { Beforeunload, useBeforeunload };","map":{"version":3,"sources":["../src/useBeforeunload.js","../src/Beforeunload.js"],"names":["useBeforeunload","handler","eventListenerRef","useRef","useEffect","returnValue","event","eventListener","window","Beforeunload","children","onBeforeunload","propTypes","PropTypes","isRequired"],"mappings":";;;;IAGMA,eAAe,GAAG,SAAlBA,eAAkB,CAAA,OAAA,EAAa;AACnC,IACEC,OAAO,IAAPA,IAAAA,IAAmB,OAAA,OAAA,KADrB,UAAA,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,SAAS,CAAA,KAAA,EAAT,qCAAS,CAAT,GAAA,SAAS,CAAT,KAAS,CAAT,GAAA,KAAA,CAAA;AAKA,MAAMC,gBAAgB,GAAGC,MAAzB,EAAA;AAEAC,EAAAA,SAAS,CAAC,YAAM;AACdF,IAAAA,gBAAgB,CAAhBA,OAAAA,GAA2B,UAAA,KAAA,EAAW;AACpC,UAAMG,WAAW,GAAGJ,OAAH,KAAA,IAAGA,IAAAA,OAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,OAAO,CADS,KACT,CAA3B,CADoC,CAAA;AAGpC;;AACA,UAAI,OAAA,WAAA,KAAJ,QAAA,EAAqC;AACnC,eAAQK,KAAK,CAALA,WAAAA,GAAR,WAAA;AALkC,OAAA,CAAA;AAQpC;AACA;;;AACA,UAAIA,KAAK,CAAT,gBAAA,EAA4B;AAC1B,eAAQA,KAAK,CAALA,WAAAA,GAAR,EAAA;AACD;AAZHJ,KAAAA;AADO,GAAA,EAeN,CAfHE,OAeG,CAfM,CAATA;AAiBAA,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMG,aAAa,GAAG,SAAhBA,aAAgB,CAAA,KAAA,EAAA;AAAA,aAAWL,gBAAgB,CAAhBA,OAAAA,CAAX,KAAWA,CAAX;AAAtB,KAAA;;AACAM,IAAAA,MAAM,CAANA,gBAAAA,CAAAA,cAAAA,EAAAA,aAAAA;AACA,WAAO,YAAM;AACXA,MAAAA,MAAM,CAANA,mBAAAA,CAAAA,cAAAA,EAAAA,aAAAA;AADF,KAAA;AAHO,GAAA,EAATJ,EAAS,CAATA;AAOD,C;;IChCKK,YAAY,GAAG,SAAfA,YAAe,CAAA,IAAA,EAAyC;AAAA,MAAA,aAAA,GAAA,IAAA,CAAtCC,QAAsC;AAAA,MAAtCA,QAAsC,GAAA,aAAA,KAAA,KAAA,CAAA,GAA3B,IAA2B,GAAA,aAAA;AAAA,MAArBC,cAAqB,GAAA,IAAA,CAArBA,cAAqB;AAC5DX,EAAAA,eAAe,CAAfA,cAAe,CAAfA;AACA,SAAA,QAAA;AACD,C;;AAEDS,YAAY,CAACG;AAAU;AAAvBH,EAAAA,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,KAAAA,YAAAA,GAAgD;AAC9CC,EAAAA,QAAQ,EAAEG,SAAS,CAD2B,GAAA;AAE9CF,EAAAA,cAAc,EAAEE,SAAS,CAATA,IAAAA,CAAeC;AAFe,CAAhDL,GAAAA,EAAAA","sourcesContent":["import { useEffect, useRef } from 'react';\nimport invariant from 'tiny-invariant';\n\nconst useBeforeunload = (handler) => {\n  invariant(\n    handler == null || typeof handler === 'function',\n    'Expected `handler` to be a function'\n  );\n\n  const eventListenerRef = useRef();\n\n  useEffect(() => {\n    eventListenerRef.current = (event) => {\n      const returnValue = handler?.(event);\n      // Handle legacy `event.returnValue` property\n      // https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event\n      if (typeof returnValue === 'string') {\n        return (event.returnValue = returnValue);\n      }\n      // Chrome doesn't support `event.preventDefault()` on `BeforeUnloadEvent`,\n      // instead it requires `event.returnValue` to be set\n      // https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload#browser_compatibility\n      if (event.defaultPrevented) {\n        return (event.returnValue = '');\n      }\n    };\n  }, [handler]);\n\n  useEffect(() => {\n    const eventListener = (event) => eventListenerRef.current(event);\n    window.addEventListener('beforeunload', eventListener);\n    return () => {\n      window.removeEventListener('beforeunload', eventListener);\n    };\n  }, []);\n};\n\nexport default useBeforeunload;\n","import PropTypes from 'prop-types';\nimport useBeforeunload from './useBeforeunload';\n\nconst Beforeunload = ({ children = null, onBeforeunload }) => {\n  useBeforeunload(onBeforeunload);\n  return children;\n};\n\nBeforeunload.propTypes /* remove-proptypes */ = {\n  children: PropTypes.any,\n  onBeforeunload: PropTypes.func.isRequired,\n};\n\nexport default Beforeunload;\n"]},"metadata":{},"sourceType":"module"}