{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { Component, createElement } from 'react';\nimport { compare, normalizeHtml, replaceCaret } from './utils';\n/**\n * Based on https://github.com/lovasoa/react-contenteditable\n * A simple component for an html element with editable contents.\n */\n\nvar ContentEditable =\n/** @class */\nfunction (_super) {\n  __extends(ContentEditable, _super);\n\n  function ContentEditable(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.previousValue = props.value;\n    _this.onChange = _this.onChange.bind(_this);\n    _this.setElementRef = _this.setElementRef.bind(_this);\n    return _this;\n  }\n\n  ContentEditable.prototype.shouldComponentUpdate = function (nextProps) {\n    if (!this.el) {\n      return true;\n    }\n\n    if (normalizeHtml(nextProps.value) !== normalizeHtml(this.el.innerHTML)) {\n      return true;\n    }\n\n    return !compare(this.props, nextProps, ['disabled', 'tagName', 'className']);\n  };\n\n  ContentEditable.prototype.componentDidUpdate = function () {\n    if (!this.el) {\n      return;\n    }\n\n    if (this.props.value !== this.el.innerHTML) {\n      this.previousValue = this.props.value;\n      this.el.innerHTML = this.props.value;\n    }\n\n    replaceCaret(this.el);\n  };\n\n  ContentEditable.prototype.onChange = function (event) {\n    if (!this.el) {\n      return;\n    }\n\n    var value = this.el.innerHTML;\n    var previous = this.previousValue;\n    this.previousValue = value;\n\n    if (this.props.onChange && value !== previous) {\n      this.props.onChange(__assign(__assign({}, event), {\n        target: {\n          value: value\n        }\n      }));\n    }\n  };\n\n  ContentEditable.prototype.setElementRef = function (el) {\n    var contentEditableRef = this.props.contentEditableRef;\n    this.el = el;\n    contentEditableRef && contentEditableRef(el);\n  };\n\n  ContentEditable.prototype.render = function () {\n    var _a = this.props,\n        contentEditableRef = _a.contentEditableRef,\n        tagName = _a.tagName,\n        value = _a.value,\n        props = __rest(_a, [\"contentEditableRef\", \"tagName\", \"value\"]);\n\n    return createElement(tagName || 'div', __assign(__assign({}, props), {\n      contentEditable: !this.props.disabled,\n      dangerouslySetInnerHTML: {\n        __html: value\n      },\n      onBlur: this.props.onBlur || this.onChange,\n      onInput: this.onChange,\n      onKeyDown: this.props.onKeyDown || this.onChange,\n      onKeyUp: this.props.onKeyUp || this.onChange,\n      ref: this.setElementRef\n    }));\n  };\n\n  return ContentEditable;\n}(Component);\n\nexport default ContentEditable;","map":{"version":3,"sources":["../../src/ContentEditable.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign, __extends, __rest } from \"tslib\";\nimport { Component, createElement } from 'react';\nimport { compare, normalizeHtml, replaceCaret } from './utils';\n/**\n * Based on https://github.com/lovasoa/react-contenteditable\n * A simple component for an html element with editable contents.\n */\nvar ContentEditable = /** @class */ (function (_super) {\n    __extends(ContentEditable, _super);\n    function ContentEditable(props) {\n        var _this = _super.call(this, props) || this;\n        _this.previousValue = props.value;\n        _this.onChange = _this.onChange.bind(_this);\n        _this.setElementRef = _this.setElementRef.bind(_this);\n        return _this;\n    }\n    ContentEditable.prototype.shouldComponentUpdate = function (nextProps) {\n        if (!this.el) {\n            return true;\n        }\n        if (normalizeHtml(nextProps.value) !== normalizeHtml(this.el.innerHTML)) {\n            return true;\n        }\n        return !compare(this.props, nextProps, ['disabled', 'tagName', 'className']);\n    };\n    ContentEditable.prototype.componentDidUpdate = function () {\n        if (!this.el) {\n            return;\n        }\n        if (this.props.value !== this.el.innerHTML) {\n            this.previousValue = this.props.value;\n            this.el.innerHTML = this.props.value;\n        }\n        replaceCaret(this.el);\n    };\n    ContentEditable.prototype.onChange = function (event) {\n        if (!this.el) {\n            return;\n        }\n        var value = this.el.innerHTML;\n        var previous = this.previousValue;\n        this.previousValue = value;\n        if (this.props.onChange && value !== previous) {\n            this.props.onChange(__assign(__assign({}, event), { target: { value: value } }));\n        }\n    };\n    ContentEditable.prototype.setElementRef = function (el) {\n        var contentEditableRef = this.props.contentEditableRef;\n        this.el = el;\n        contentEditableRef && contentEditableRef(el);\n    };\n    ContentEditable.prototype.render = function () {\n        var _a = this.props, contentEditableRef = _a.contentEditableRef, tagName = _a.tagName, value = _a.value, props = __rest(_a, [\"contentEditableRef\", \"tagName\", \"value\"]);\n        return createElement(tagName || 'div', __assign(__assign({}, props), { contentEditable: !this.props.disabled, dangerouslySetInnerHTML: { __html: value }, onBlur: this.props.onBlur || this.onChange, onInput: this.onChange, onKeyDown: this.props.onKeyDown || this.onChange, onKeyUp: this.props.onKeyUp || this.onChange, ref: this.setElementRef }));\n    };\n    return ContentEditable;\n}(Component));\nexport default ContentEditable;\n//# sourceMappingURL=ContentEditable.js.map"]},"metadata":{},"sourceType":"module"}