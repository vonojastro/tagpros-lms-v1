{"ast":null,"code":"var _jsxFileName = \"/Users/vonojastro/Desktop/lms-frontend-v2/src/components/MailView/EmailList/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useContext, useEffect } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport _ from 'lodash';\nimport EmailListItem from './EmailListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled, { ThemeContext } from 'styled-components';\nimport { getAllEmailDraftsOfUser, getAllEmailThreadsByUser, markEmailThreadsAsRead } from 'api/emailMessaging';\nimport { useNavigate, useParams } from 'react-router';\nimport EmailListContentLoader from './EmailListContentLoader';\nimport { setActiveDraft, toggleEmailComposer } from '../../../redux/actions/mailView';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst Container = styled.ul`\n  padding: 0;\n  display: grid;\n  gap: 2rem;\n  & h4 {\n    text-transform: capitalize;\n    font-weight: 900;\n    padding: 0;\n    margin: 0;\n  }\n`;\n_c = Container;\nconst NoEmailsFound = styled.div`\n  width: 100%;\n  height: 100%;\n  h5 {\n    color: gray;\n    text-align: center;\n  }\n`;\n_c2 = NoEmailsFound;\nexport default function EmailList() {\n  _s();\n\n  const emails = useSelector(state => state.mailView.emailThreads.data);\n  const loading = useSelector(state => state.mailView.emailThreads.get.loading);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const params = useParams();\n  const themeContext = useContext(ThemeContext);\n  const isDesktopOrLaptop = useMediaQuery({\n    query: `(min-width: ${themeContext.custom.laptopMinWidth})`\n  });\n  const userAccountId = useSelector(state => {\n    var _state$auth, _state$auth$user;\n\n    return (_state$auth = state.auth) === null || _state$auth === void 0 ? void 0 : (_state$auth$user = _state$auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user.accountId;\n  });\n\n  const handleClickEmailListItem = data => {\n    switch (params.type) {\n      case 'drafts':\n        dispatch(setActiveDraft(data));\n        dispatch(toggleEmailComposer(true));\n        if (!isDesktopOrLaptop) navigate('/mail/writer');\n        break;\n\n      default:\n        markEmailThreadsAsRead(dispatch, {\n          threadIds: [data.threadId]\n        });\n        navigate(`view/${data.threadId}`);\n        break;\n    }\n  };\n\n  useEffect(() => {\n    switch (params.type) {\n      case 'drafts':\n        getAllEmailDraftsOfUser(dispatch).then(result => {}).catch(err => {\n          toast('Failed to get draft emails.', {\n            type: 'error'\n          });\n        });\n        break;\n\n      default:\n        getAllEmailThreadsByUser(dispatch).then(result => {}).catch(err => {\n          toast('Failed to get emails.', {\n            type: 'error'\n          });\n        });\n        break;\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [params.type]);\n\n  const emailQuery = _.startCase(_.toLower(params.type || 'Inbox'));\n\n  const isLastMessageByUser = senderId => {\n    // eslint-disable-next-line eqeqeq\n    return userAccountId == senderId;\n  };\n\n  const hasUserRead = (senderId, isRead) => {\n    return isLastMessageByUser(senderId) ? true : isRead;\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: emailQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(EmailListContentLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this) : emails.length ? /*#__PURE__*/_jsxDEV(Fragment, {\n      children: emails.map(data => /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: _ => handleClickEmailListItem(data),\n        children: /*#__PURE__*/_createElement(EmailListItem, { ...data,\n          ...(data.deletedDate && {\n            mailContent: {\n              blocks: [{\n                key: '5v1sh',\n                text: 'You deleted this message',\n                type: 'unstyled',\n                depth: 0,\n                inlineStyleRanges: [],\n                entityRanges: [],\n                data: {}\n              }],\n              entityMap: {}\n            }\n          }),\n          hasUserRead: hasUserRead(data.senderId, data.isRead),\n          key: data.threadId + ' ' + hasUserRead(data.senderId, data.isRead),\n          id: data.threadId + ' ' + hasUserRead(data.senderId, data.isRead),\n          variant: params.type,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }\n        })\n      }, data.threadId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(NoEmailsFound, {\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"No emails found \\uD83D\\uDE41\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EmailList, \"k6qNctbhwz7cAOF7L/vRnn4nxcQ=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useNavigate, useParams, useMediaQuery, useSelector];\n});\n\n_c3 = EmailList;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"NoEmailsFound\");\n$RefreshReg$(_c3, \"EmailList\");","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/components/MailView/EmailList/index.jsx"],"names":["React","Fragment","useContext","useEffect","useMediaQuery","_","EmailListItem","useDispatch","useSelector","styled","ThemeContext","getAllEmailDraftsOfUser","getAllEmailThreadsByUser","markEmailThreadsAsRead","useNavigate","useParams","EmailListContentLoader","setActiveDraft","toggleEmailComposer","toast","Container","ul","NoEmailsFound","div","EmailList","emails","state","mailView","emailThreads","data","loading","get","dispatch","navigate","params","themeContext","isDesktopOrLaptop","query","custom","laptopMinWidth","userAccountId","auth","user","accountId","handleClickEmailListItem","type","threadIds","threadId","then","result","catch","err","emailQuery","startCase","toLower","isLastMessageByUser","senderId","hasUserRead","isRead","length","map","deletedDate","mailContent","blocks","key","text","depth","inlineStyleRanges","entityRanges","entityMap"],"mappings":"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","sourcesContent":["import React, { Fragment, useContext, useEffect } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport _ from 'lodash';\nimport EmailListItem from './EmailListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled, { ThemeContext } from 'styled-components';\nimport {\n  getAllEmailDraftsOfUser,\n  getAllEmailThreadsByUser,\n  markEmailThreadsAsRead\n} from 'api/emailMessaging';\nimport { useNavigate, useParams } from 'react-router';\nimport EmailListContentLoader from './EmailListContentLoader';\nimport { setActiveDraft, toggleEmailComposer } from '../../../redux/actions/mailView';\nimport { toast } from 'react-toastify';\n\nconst Container = styled.ul`\n  padding: 0;\n  display: grid;\n  gap: 2rem;\n  & h4 {\n    text-transform: capitalize;\n    font-weight: 900;\n    padding: 0;\n    margin: 0;\n  }\n`;\n\nconst NoEmailsFound = styled.div`\n  width: 100%;\n  height: 100%;\n  h5 {\n    color: gray;\n    text-align: center;\n  }\n`;\n\nexport default function EmailList() {\n  const emails = useSelector(state => state.mailView.emailThreads.data);\n  const loading = useSelector(state => state.mailView.emailThreads.get.loading);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const params = useParams();\n  const themeContext = useContext(ThemeContext);\n  const isDesktopOrLaptop = useMediaQuery({\n    query: `(min-width: ${themeContext.custom.laptopMinWidth})`\n  });\n  const userAccountId = useSelector(state => state.auth?.user?.accountId);\n\n  const handleClickEmailListItem = data => {\n    switch (params.type) {\n      case 'drafts':\n        dispatch(setActiveDraft(data));\n        dispatch(toggleEmailComposer(true));\n        if (!isDesktopOrLaptop) navigate('/mail/writer');\n        break;\n\n      default:\n        markEmailThreadsAsRead(dispatch, { threadIds: [data.threadId] });\n        navigate(`view/${data.threadId}`);\n\n        break;\n    }\n  };\n\n  useEffect(() => {\n    switch (params.type) {\n      case 'drafts':\n        getAllEmailDraftsOfUser(dispatch)\n          .then(result => {})\n          .catch(err => {\n            toast('Failed to get draft emails.', { type: 'error' });\n          });\n        break;\n\n      default:\n        getAllEmailThreadsByUser(dispatch)\n          .then(result => {})\n          .catch(err => {\n            toast('Failed to get emails.', { type: 'error' });\n          });\n        break;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [params.type]);\n\n  const emailQuery = _.startCase(_.toLower(params.type || 'Inbox'));\n  const isLastMessageByUser = senderId => {\n    // eslint-disable-next-line eqeqeq\n    return userAccountId == senderId;\n  };\n\n  const hasUserRead = (senderId, isRead) => {\n    return isLastMessageByUser(senderId) ? true : isRead;\n  };\n\n  return (\n    <Container>\n      <h4>{emailQuery}</h4>\n      {loading ? (\n        <EmailListContentLoader />\n      ) : emails.length ? (\n        <Fragment>\n          {emails.map((data) => (\n            <div onClick={_ => handleClickEmailListItem(data)} key={data.threadId}>\n              <EmailListItem\n                {...data}\n                {...data.deletedDate && {\n                  mailContent: {\n                    blocks: [\n                      {\n                        key: '5v1sh',\n                        text: 'You deleted this message',\n                        type: 'unstyled',\n                        depth: 0,\n                        inlineStyleRanges: [],\n                        entityRanges: [],\n                        data: {}\n                      }\n                    ],\n                    entityMap: {}\n                  }\n                }}\n                hasUserRead={hasUserRead(data.senderId, data.isRead)}\n                key={data.threadId + ' ' + hasUserRead(data.senderId, data.isRead)}\n                id={data.threadId + ' ' + hasUserRead(data.senderId, data.isRead)}\n                variant={params.type}\n              />\n            </div>\n          ))}\n        </Fragment>\n      ) : (\n        <NoEmailsFound>\n          <h5>No emails found 🙁</h5>\n        </NoEmailsFound>\n      )}\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}