{"ast":null,"code":"import { api } from \"../api\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\";\nimport { getAnnouncementsSuccess, addAnnouncementSuccess, updateAnnouncementSuccess, getActiveAnnouncementsSuccess } from \"../redux/actions/announcement\";\nconst ANNOUNCEMENT_ENDPOINT = '/announcement';\nexport const getAnnouncements = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(ANNOUNCEMENT_ENDPOINT);\n    dispatch(getAnnouncementsSuccess(response.data));\n    callback(true, response.data);\n  } catch (error) {\n    console.log(\"(getAnnouncements) Status:\", error);\n    callback(false);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const addAnnouncement = async (dispatch, args, callback) => {\n  try {\n    const response = await api.post(ANNOUNCEMENT_ENDPOINT + \"/add\", args);\n    dispatch(addAnnouncementSuccess(response.data));\n    callback(true, response.data);\n  } catch (error) {\n    console.log(\"(addAnnouncement) Status:\", error);\n    callback(false);\n  }\n};\nexport const updateAnnouncement = async (dispatch, args, callback) => {\n  try {\n    const response = await api.post(ANNOUNCEMENT_ENDPOINT + \"/update\", args);\n    dispatch(updateAnnouncementSuccess(response.data));\n    callback(true, response.data);\n  } catch (error) {\n    console.log(\"(updateAnnouncement) Status:\", error);\n    callback(false);\n  }\n};\nexport const getActiveAnnouncements = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(ANNOUNCEMENT_ENDPOINT + \"/active\");\n    dispatch(getActiveAnnouncementsSuccess(response.data));\n  } catch (error) {\n    console.log(\"(getActiveAnnouncements) Status:\", error);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/api/announcement.js"],"names":["api","onLoadingScreen","offLoadingScreen","getAnnouncementsSuccess","addAnnouncementSuccess","updateAnnouncementSuccess","getActiveAnnouncementsSuccess","ANNOUNCEMENT_ENDPOINT","getAnnouncements","dispatch","callback","response","get","data","error","console","log","addAnnouncement","args","post","updateAnnouncement","getActiveAnnouncements"],"mappings":"AAAA,SAASA,GAAT,QAAoB,QAApB;AACA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,8BAAlD;AACA,SAASC,uBAAT,EAAkCC,sBAAlC,EAA0DC,yBAA1D,EAAqFC,6BAArF,QAA0H,+BAA1H;AAEA,MAAMC,qBAAqB,GAAG,eAA9B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC7D,MAAI;AACGD,IAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACN,UAAMU,QAAQ,GAAG,MAAMX,GAAG,CAACY,GAAJ,CAAQL,qBAAR,CAAvB;AAEAE,IAAAA,QAAQ,CAACN,uBAAuB,CAACQ,QAAQ,CAACE,IAAV,CAAxB,CAAR;AACAH,IAAAA,QAAQ,CAAC,IAAD,EAAOC,QAAQ,CAACE,IAAhB,CAAR;AACA,GAND,CAME,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,KAA1C;AACAJ,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACMD,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACN,GAVD,SAUU;AACTO,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACA;AACD,CAdM;AAgBP,OAAO,MAAMe,eAAe,GAAG,OAAOR,QAAP,EAAiBS,IAAjB,EAAuBR,QAAvB,KAAoC;AAClE,MAAI;AACH,UAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACmB,IAAJ,CAASZ,qBAAqB,GAAG,MAAjC,EAAyCW,IAAzC,CAAvB;AAEAT,IAAAA,QAAQ,CAACL,sBAAsB,CAACO,QAAQ,CAACE,IAAV,CAAvB,CAAR;AACAH,IAAAA,QAAQ,CAAC,IAAD,EAAOC,QAAQ,CAACE,IAAhB,CAAR;AACA,GALD,CAKE,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,KAAzC;AACAJ,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACA;AACD,CAVM;AAYP,OAAO,MAAMU,kBAAkB,GAAG,OAAOX,QAAP,EAAiBS,IAAjB,EAAuBR,QAAvB,KAAoC;AACrE,MAAI;AACH,UAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACmB,IAAJ,CAASZ,qBAAqB,GAAG,SAAjC,EAA4CW,IAA5C,CAAvB;AAEAT,IAAAA,QAAQ,CAACJ,yBAAyB,CAACM,QAAQ,CAACE,IAAV,CAA1B,CAAR;AACAH,IAAAA,QAAQ,CAAC,IAAD,EAAOC,QAAQ,CAACE,IAAhB,CAAR;AACA,GALD,CAKE,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,KAA5C;AACAJ,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACA;AACD,CAVM;AAYP,OAAO,MAAMW,sBAAsB,GAAG,OAAOZ,QAAP,EAAiBC,QAAjB,KAA8B;AACnE,MAAI;AACGD,IAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACN,UAAMU,QAAQ,GAAG,MAAMX,GAAG,CAACY,GAAJ,CAAQL,qBAAqB,GAAG,SAAhC,CAAvB;AAEAE,IAAAA,QAAQ,CAACH,6BAA6B,CAACK,QAAQ,CAACE,IAAV,CAA9B,CAAR;AACA,GALD,CAKE,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDF,KAAhD;AACML,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACN,GARD,SAQU;AACTO,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACA;AACD,CAZM","sourcesContent":["import { api } from \"../api\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\";\nimport { getAnnouncementsSuccess, addAnnouncementSuccess, updateAnnouncementSuccess, getActiveAnnouncementsSuccess } from \"../redux/actions/announcement\";\n\nconst ANNOUNCEMENT_ENDPOINT = '/announcement';\n\nexport const getAnnouncements = async (dispatch, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.get(ANNOUNCEMENT_ENDPOINT);\n\n\t\tdispatch(getAnnouncementsSuccess(response.data));\n\t\tcallback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(getAnnouncements) Status:\", error);\n\t\tcallback(false);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const addAnnouncement = async (dispatch, args, callback) => {\n\ttry {\n\t\tconst response = await api.post(ANNOUNCEMENT_ENDPOINT + \"/add\", args);\n\n\t\tdispatch(addAnnouncementSuccess(response.data));\n\t\tcallback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(addAnnouncement) Status:\", error);\n\t\tcallback(false);\n\t}\n};\n\nexport const updateAnnouncement = async (dispatch, args, callback) => {\n\ttry {\n\t\tconst response = await api.post(ANNOUNCEMENT_ENDPOINT + \"/update\", args);\n\n\t\tdispatch(updateAnnouncementSuccess(response.data));\n\t\tcallback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(updateAnnouncement) Status:\", error);\n\t\tcallback(false);\n\t}\n};\n\nexport const getActiveAnnouncements = async (dispatch, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.get(ANNOUNCEMENT_ENDPOINT + \"/active\");\n\n\t\tdispatch(getActiveAnnouncementsSuccess(response.data));\n\t} catch (error) {\n\t\tconsole.log(\"(getActiveAnnouncements) Status:\", error);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}