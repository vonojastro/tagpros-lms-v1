{"ast":null,"code":"var _jsxFileName = \"/Users/vonojastro/Desktop/lms-frontend-v2/src/components/Admin/contents/Export/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from \"react\";\nimport moment from \"moment\";\nimport { APPLICATION_STATUS, CLASS_STATUS, PAYMENT_STATUS, EXPORT_COLUMNS } from \"utils/constants\";\nimport { CSVLink } from 'react-csv';\nimport ReactExport from 'react-data-export';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nexport default function Export(_ref) {\n  _s();\n\n  let {\n    source,\n    dataSource\n  } = _ref;\n  const currDate = moment().format(\"MM-DD-YYYY\");\n  const COLUMN_NAME = source.toUpperCase(); // const [tableData, setTableData] = useState(dataSource);\n\n  const [exportData, setExportData] = useState({\n    excel: [],\n    csv: {}\n  });\n\n  const getFileName = () => {\n    switch (source) {\n      case 'payment':\n        return `Payment-History_${currDate}`;\n\n      case 'teacher':\n        return `Teacher-Masterlist_${currDate}`;\n\n      case 'class':\n        return `Class-Masterlist_${currDate}`;\n\n      case 'pricing':\n        return `Pricing_${currDate}`;\n\n      default:\n        return `export-${currDate}`;\n    }\n  };\n\n  const getValue = value => {\n    switch (source) {\n      case 'payment':\n        return Object.keys(PAYMENT_STATUS).find(key => PAYMENT_STATUS[key] === value);\n\n      case 'teacher':\n        return Object.keys(APPLICATION_STATUS).find(key => APPLICATION_STATUS[key] === value);\n\n      case 'class':\n        return Object.keys(CLASS_STATUS).find(key => CLASS_STATUS[key] === value);\n\n      default:\n        return value;\n    }\n  };\n\n  const getColumns = () => {\n    return EXPORT_COLUMNS[COLUMN_NAME] ? EXPORT_COLUMNS[COLUMN_NAME] : []; // switch(source){\n    //     case 'payment': return PAYMENT_EXPORT_COLUMNS;\n    //     case 'teacher': return TEACHER_EXPORT_COLUMNS;\n    //     case 'class': return CLASS_EXPORT_COLUMNS;\n    //     case 'pricing': return PRICING_COLUMNS;\n    //     default: return [];\n    // }\n  };\n\n  const getCSVRows = () => {\n    let columns = EXPORT_COLUMNS[COLUMN_NAME] ? EXPORT_COLUMNS[COLUMN_NAME] : []; // switch(source){\n    //     case 'payment': \n    //         columns = PAYMENT_EXPORT_COLUMNS; break;\n    //     case 'teacher': \n    //         columns = TEACHER_EXPORT_COLUMNS; break;\n    //     case 'class': \n    //         columns = CLASS_EXPORT_COLUMNS; break;\n    //     case 'pricing': \n    //         columns = PRICING_COLUMNS; break;\n    //     default: return [];\n    // }\n\n    return dataSource.map((item, index) => {\n      const obj = { ...item\n      };\n      columns.forEach(_ref2 => {\n        let {\n          key,\n          custom,\n          type,\n          format\n        } = _ref2;\n\n        if (type === 'status') {\n          obj[key] = getValue(obj[key]);\n          return;\n        } // if(type === 'date'){\n        //     obj[key] = moment(obj[key]).format(format);\n        //     return;\n        // }\n\n\n        if (type === 'datePricing') {\n          return obj[key] = obj[key] ? moment(new Date(obj[key])).format('MM/DD/YYYY hh:mm a') : \"\";\n        }\n\n        if (custom) {\n          obj[key] = custom(obj, index);\n          return;\n        }\n\n        obj[key] = obj[key] ? obj[key] : \"\";\n      });\n      return obj;\n    });\n  };\n\n  const getExcelRows = () => {\n    let columns = EXPORT_COLUMNS[COLUMN_NAME] ? EXPORT_COLUMNS[COLUMN_NAME] : []; // switch(source){\n    //     case 'payment': \n    //         columns = PAYMENT_EXPORT_COLUMNS; break;\n    //     case 'teacher': \n    //         columns = TEACHER_EXPORT_COLUMNS; break;\n    //     case 'class': \n    //         columns = CLASS_EXPORT_COLUMNS; break;\n    //     case 'pricing': \n    //         columns = PRICING_COLUMNS; break;\n    //     default: return [];\n    // }\n\n    return dataSource.map((item, index) => {\n      const obj = { ...item\n      };\n      return columns.map(_ref3 => {\n        let {\n          key,\n          custom,\n          type,\n          format,\n          title\n        } = _ref3;\n\n        if (type === 'status') {\n          return obj[key] = getValue(obj[key]);\n        } // if(type === 'date'){\n        //     return obj[key] = moment(obj[key]).format(format);\n        // }\n\n\n        if (type === 'datePricing') {\n          return obj[key] = obj[key] ? moment(new Date(obj[key])).format('MM/DD/YYYY hh:mm a') : \"\";\n        }\n\n        if (custom) {\n          return obj[key] = custom(obj, index);\n        }\n\n        return obj[key] = obj[key] ? obj[key] : \"\";\n      });\n    });\n  };\n\n  const handleExportExcel = async () => {\n    // setTableData(dataSource);\n    const exportConfig = [{\n      columns: getColumns(),\n      data: [[{\n        value: \"Value\"\n      }]]\n    }];\n    exportConfig[0].data = getExcelRows();\n    await setExportData({\n      excel: exportConfig,\n      csv: {}\n    });\n    document.getElementById(\"excelButton\").click();\n  };\n\n  const handleExportCSV = async () => {\n    // setTableData(dataSource);\n    const headers = getColumns().map(_ref4 => {\n      let {\n        title,\n        key\n      } = _ref4;\n      return {\n        label: title,\n        key\n      };\n    });\n    const data = getCSVRows();\n    await setExportData({\n      excel: [],\n      csv: {\n        headers,\n        data\n      }\n    });\n    document.getElementById(\"csvButton\").click();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success w-100\",\n        onClick: handleExportCSV,\n        children: \"Export to CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CSVLink, {\n        id: \"csvButton\",\n        data: exportData.csv.data || [],\n        headers: exportData.csv.headers || [],\n        className: \"btn btn-success\",\n        filename: `${getFileName()}.csv`,\n        style: {\n          display: 'none',\n          color: \"white\"\n        },\n        children: \"Export to CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-2\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success w-100\",\n        onClick: handleExportExcel,\n        children: \"Export to Excel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ExcelFile, {\n        filename: getFileName(),\n        element: /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"excelButton\",\n          className: \"btn btn-success w-100\",\n          style: {\n            display: 'none'\n          },\n          children: \"Export to Excel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 62\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(ExcelSheet, {\n          dataSet: exportData.excel // name=\"Payment History\"\n          ,\n          name: getFileName()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Export, \"SSbGMl7HDQll1gGpHhcwQqV+zFE=\");\n\n_c = Export;\n\nvar _c;\n\n$RefreshReg$(_c, \"Export\");","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/components/Admin/contents/Export/index.jsx"],"names":["React","Fragment","useState","moment","APPLICATION_STATUS","CLASS_STATUS","PAYMENT_STATUS","EXPORT_COLUMNS","CSVLink","ReactExport","ExcelFile","ExcelSheet","Export","source","dataSource","currDate","format","COLUMN_NAME","toUpperCase","exportData","setExportData","excel","csv","getFileName","getValue","value","Object","keys","find","key","getColumns","getCSVRows","columns","map","item","index","obj","forEach","custom","type","Date","getExcelRows","title","handleExportExcel","exportConfig","data","document","getElementById","click","handleExportCSV","headers","label","display","color"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport moment from \"moment\";\nimport { APPLICATION_STATUS, CLASS_STATUS, PAYMENT_STATUS, EXPORT_COLUMNS } from \"utils/constants\";\nimport { CSVLink } from 'react-csv';\nimport ReactExport from 'react-data-export';\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\n\nexport default function Export({ source, dataSource }) {\n    const currDate = moment().format(\"MM-DD-YYYY\");\n    const COLUMN_NAME = source.toUpperCase();\n    // const [tableData, setTableData] = useState(dataSource);\n    const [exportData, setExportData] = useState({excel: [], csv: {}});\n\n    const getFileName = () => {\n        switch(source){\n            case 'payment': return `Payment-History_${currDate}`;\n            case 'teacher': return `Teacher-Masterlist_${currDate}`;\n            case 'class': return `Class-Masterlist_${currDate}`;\n            case 'pricing': return `Pricing_${currDate}`;\n            default: return `export-${currDate}`;\n        }\n    }\n\n    const getValue = (value) => {\n        switch(source){\n            case 'payment': return Object.keys(PAYMENT_STATUS).find(key => PAYMENT_STATUS[key] === value);\n            case 'teacher': return Object.keys(APPLICATION_STATUS).find(key => APPLICATION_STATUS[key] === value);\n            case 'class': return Object.keys(CLASS_STATUS).find(key => CLASS_STATUS[key] === value);\n            default: return value;\n        } \n    }\n\n    const getColumns = () => {\n        return EXPORT_COLUMNS[COLUMN_NAME] ? EXPORT_COLUMNS[COLUMN_NAME] : [];\n        // switch(source){\n        //     case 'payment': return PAYMENT_EXPORT_COLUMNS;\n        //     case 'teacher': return TEACHER_EXPORT_COLUMNS;\n        //     case 'class': return CLASS_EXPORT_COLUMNS;\n        //     case 'pricing': return PRICING_COLUMNS;\n        //     default: return [];\n        // }\n    }\n\n    const getCSVRows = () => {\n        let columns = EXPORT_COLUMNS[COLUMN_NAME] ? EXPORT_COLUMNS[COLUMN_NAME] : [];\n        // switch(source){\n        //     case 'payment': \n        //         columns = PAYMENT_EXPORT_COLUMNS; break;\n        //     case 'teacher': \n        //         columns = TEACHER_EXPORT_COLUMNS; break;\n        //     case 'class': \n        //         columns = CLASS_EXPORT_COLUMNS; break;\n        //     case 'pricing': \n        //         columns = PRICING_COLUMNS; break;\n        //     default: return [];\n        // }\n\n        return dataSource.map((item, index) => {\n            const obj = {...item};\n            columns.forEach(({key, custom, type, format}) => {\n                if(type === 'status'){\n                    obj[key] = getValue(obj[key]);\n                    return;\n                }\n\n                // if(type === 'date'){\n                //     obj[key] = moment(obj[key]).format(format);\n                //     return;\n                // }\n                if(type === 'datePricing'){\n                    return obj[key] = obj[key] ? moment(new Date(obj[key])).format('MM/DD/YYYY hh:mm a') : \"\";\n                }\n\n                if(custom){\n                    obj[key] = custom(obj, index);\n                    return;\n                }\n                    \n                obj[key] = obj[key] ? obj[key] : \"\";\n            });\n\n            return obj;\n        });\n    }\n\n    const getExcelRows = () => {\n        let columns = EXPORT_COLUMNS[COLUMN_NAME] ? EXPORT_COLUMNS[COLUMN_NAME] : [];\n        // switch(source){\n        //     case 'payment': \n        //         columns = PAYMENT_EXPORT_COLUMNS; break;\n        //     case 'teacher': \n        //         columns = TEACHER_EXPORT_COLUMNS; break;\n        //     case 'class': \n        //         columns = CLASS_EXPORT_COLUMNS; break;\n        //     case 'pricing': \n        //         columns = PRICING_COLUMNS; break;\n        //     default: return [];\n        // }\n\n        return dataSource.map((item, index) => {\n            const obj = {...item};\n            return columns.map(({key, custom, type, format, title}) => {\n                if(type === 'status'){\n                    return obj[key] = getValue(obj[key]);\n                }\n\n                // if(type === 'date'){\n                //     return obj[key] = moment(obj[key]).format(format);\n                // }\n                if(type === 'datePricing'){\n                    return obj[key] = obj[key] ? moment(new Date(obj[key])).format('MM/DD/YYYY hh:mm a') : \"\";\n                }\n\n                if(custom){\n                    return obj[key] = custom(obj, index);\n                }\n                    \n                return obj[key] = obj[key] ? obj[key] : \"\";\n            });\n        });\n    }\n\n    const handleExportExcel = async () => {\n        // setTableData(dataSource);\n        const exportConfig = [ \n            { \n                columns: getColumns(),  \n                data: [ [{value: \"Value\"}] ] \n            }\n        ];\n        \n        exportConfig[0].data = getExcelRows();\n\n        await setExportData({\n            excel: exportConfig,\n            csv: {}\n        });\n\n        document.getElementById(\"excelButton\").click();\n    }\n\n    const handleExportCSV = async () => {\n        // setTableData(dataSource);\n        const headers = getColumns().map(({title, key}) => ({label:title, key}));\n        const data = getCSVRows();\n\n        await setExportData({\n            excel: [],\n            csv: { headers, data }\n        });\n\n        document.getElementById(\"csvButton\").click();\n    }\n\n    return (<Fragment>\n            <div>\n                <button className=\"btn btn-success w-100\" onClick={handleExportCSV}>Export to CSV</button>\n                <CSVLink id=\"csvButton\" data={exportData.csv.data || []} headers={exportData.csv.headers || []} className=\"btn btn-success\"\n                 filename={`${getFileName()}.csv`} style={{ display:'none', color: \"white\" }}>\n                    Export to CSV\n                </CSVLink>\n            </div>\n            <div className=\"mt-2\">\n                <button className=\"btn btn-success w-100\" onClick={handleExportExcel}>Export to Excel</button>\n                <ExcelFile filename={getFileName()} element={<button id=\"excelButton\" className=\"btn btn-success w-100\" style={{display: 'none'}}>Export to Excel</button>}>\n                    <ExcelSheet dataSet={exportData.excel} \n                    // name=\"Payment History\"\n                    name={getFileName()}\n                    />\n                </ExcelFile>\n            </div>\n    </Fragment>)\n}"]},"metadata":{},"sourceType":"module"}