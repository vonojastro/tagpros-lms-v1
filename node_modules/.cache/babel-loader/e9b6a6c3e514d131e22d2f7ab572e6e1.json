{"ast":null,"code":"import moment from \"moment\";\nexport const getDaysAvailability = (dayOfWeek, startTime, endTime) => {\n  const days = [\"Su\", \"M\", \"T\", \"W\", \"Th\", \"F\", \"Sa\"];\n  const timeAvailability = startTime === endTime ? \"24hrs\" : `${moment(startTime, \"HH:mm\").format(\"HH:mm A\")} - ${moment(endTime, \"HH:mm\").format(\"hh:mm A\")}`;\n\n  switch (dayOfWeek) {\n    case \"0XXXXX0\":\n      return `Weekdays - ${timeAvailability}`;\n\n    case \"X00000X\":\n      return `Weekends - ${timeAvailability}`;\n\n    case \"XXXXXXX\":\n      if (timeAvailability === \"24hrs\") {\n        return \"24/7\";\n      } else {\n        return `Everyday - ${timeAvailability}`;\n      }\n\n    default:\n      return `${[...dayOfWeek].map((ch, index) => ch === \"X\" ? days[index] : \"\").join(\"\")} - ${timeAvailability}`;\n  }\n};\nexport const isNotAvailable = (method, subTotal) => {\n  console.log(\"ðŸš€ ~ file: index.js ~ line 32 ~ isNotAvailable ~ subTotal\", subTotal);\n  const {\n    dayOfWeek,\n    startTime,\n    endTime,\n    minAmount,\n    maxAmount,\n    status\n  } = method;\n  const currDay = moment().day();\n  const currTime = moment(new Date(), \"HH:mm\");\n  const momentStartTime = moment(startTime, \"HH:mm\");\n  const momentEndTime = moment(endTime, \"HH:mm\");\n  const isAvailableThisDay = dayOfWeek.charAt(currDay) === \"X\";\n  const isAvailableThisTime = startTime === endTime || currTime.isBetween(momentStartTime, momentEndTime);\n  const isAmountAvailable = subTotal >= minAmount && subTotal <= maxAmount;\n  return !(isAvailableThisDay && isAvailableThisTime && isAmountAvailable && status === \"A\");\n};","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/utils/payment/index.js"],"names":["moment","getDaysAvailability","dayOfWeek","startTime","endTime","days","timeAvailability","format","map","ch","index","join","isNotAvailable","method","subTotal","console","log","minAmount","maxAmount","status","currDay","day","currTime","Date","momentStartTime","momentEndTime","isAvailableThisDay","charAt","isAvailableThisTime","isBetween","isAmountAvailable"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,OAAvB,KAAmC;AACpE,QAAMC,IAAI,GAAG,CAAC,IAAD,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,IAAtB,EAA4B,GAA5B,EAAiC,IAAjC,CAAb;AACA,QAAMC,gBAAgB,GACpBH,SAAS,KAAKC,OAAd,GACI,OADJ,GAEK,GAAEJ,MAAM,CAACG,SAAD,EAAY,OAAZ,CAAN,CAA2BI,MAA3B,CAAkC,SAAlC,CAA6C,MAAKP,MAAM,CACzDI,OADyD,EAEzD,OAFyD,CAAN,CAGnDG,MAHmD,CAG5C,SAH4C,CAGjC,EAN1B;;AAQA,UAAQL,SAAR;AACE,SAAK,SAAL;AACE,aAAQ,cAAaI,gBAAiB,EAAtC;;AACF,SAAK,SAAL;AACE,aAAQ,cAAaA,gBAAiB,EAAtC;;AACF,SAAK,SAAL;AACE,UAAIA,gBAAgB,KAAK,OAAzB,EAAkC;AAChC,eAAO,MAAP;AACD,OAFD,MAEO;AACL,eAAQ,cAAaA,gBAAiB,EAAtC;AACD;;AACH;AACE,aAAQ,GAAE,CAAC,GAAGJ,SAAJ,EACPM,GADO,CACH,CAACC,EAAD,EAAKC,KAAL,KAAgBD,EAAE,KAAK,GAAP,GAAaJ,IAAI,CAACK,KAAD,CAAjB,GAA2B,EADxC,EAEPC,IAFO,CAEF,EAFE,CAEE,MAAKL,gBAAiB,EAFlC;AAZJ;AAgBD,CA1BM;AA4BP,OAAO,MAAMM,cAAc,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AAClDC,EAAAA,OAAO,CAACC,GAAR,CAAY,2DAAZ,EAAyEF,QAAzE;AACA,QAAM;AAAEZ,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA,OAAxB;AAAiCa,IAAAA,SAAjC;AAA4CC,IAAAA,SAA5C;AAAuDC,IAAAA;AAAvD,MAAkEN,MAAxE;AACA,QAAMO,OAAO,GAAGpB,MAAM,GAAGqB,GAAT,EAAhB;AACA,QAAMC,QAAQ,GAAGtB,MAAM,CAAC,IAAIuB,IAAJ,EAAD,EAAa,OAAb,CAAvB;AACA,QAAMC,eAAe,GAAGxB,MAAM,CAACG,SAAD,EAAY,OAAZ,CAA9B;AACA,QAAMsB,aAAa,GAAGzB,MAAM,CAACI,OAAD,EAAU,OAAV,CAA5B;AACA,QAAMsB,kBAAkB,GAAGxB,SAAS,CAACyB,MAAV,CAAiBP,OAAjB,MAA8B,GAAzD;AACA,QAAMQ,mBAAmB,GACvBzB,SAAS,KAAKC,OAAd,IAAyBkB,QAAQ,CAACO,SAAT,CAAmBL,eAAnB,EAAoCC,aAApC,CAD3B;AAEA,QAAMK,iBAAiB,GAAGhB,QAAQ,IAAIG,SAAZ,IAAyBH,QAAQ,IAAII,SAA/D;AACA,SAAO,EACLQ,kBAAkB,IAClBE,mBADA,IAEAE,iBAFA,IAGAX,MAAM,KAAK,GAJN,CAAP;AAMD,CAjBM","sourcesContent":["import moment from \"moment\";\n\nexport const getDaysAvailability = (dayOfWeek, startTime, endTime) => {\n  const days = [\"Su\", \"M\", \"T\", \"W\", \"Th\", \"F\", \"Sa\"];\n  const timeAvailability =\n    startTime === endTime\n      ? \"24hrs\"\n      : `${moment(startTime, \"HH:mm\").format(\"HH:mm A\")} - ${moment(\n          endTime,\n          \"HH:mm\"\n        ).format(\"hh:mm A\")}`;\n\n  switch (dayOfWeek) {\n    case \"0XXXXX0\":\n      return `Weekdays - ${timeAvailability}`;\n    case \"X00000X\":\n      return `Weekends - ${timeAvailability}`;\n    case \"XXXXXXX\":\n      if (timeAvailability === \"24hrs\") {\n        return \"24/7\";\n      } else {\n        return `Everyday - ${timeAvailability}`;\n      }\n    default:\n      return `${[...dayOfWeek]\n        .map((ch, index) => (ch === \"X\" ? days[index] : \"\"))\n        .join(\"\")} - ${timeAvailability}`;\n  }\n};\n\nexport const isNotAvailable = (method, subTotal) => {\n  console.log(\"ðŸš€ ~ file: index.js ~ line 32 ~ isNotAvailable ~ subTotal\", subTotal);\n  const { dayOfWeek, startTime, endTime, minAmount, maxAmount, status } = method;\n  const currDay = moment().day();\n  const currTime = moment(new Date(), \"HH:mm\");\n  const momentStartTime = moment(startTime, \"HH:mm\");\n  const momentEndTime = moment(endTime, \"HH:mm\");\n  const isAvailableThisDay = dayOfWeek.charAt(currDay) === \"X\";\n  const isAvailableThisTime =\n    startTime === endTime || currTime.isBetween(momentStartTime, momentEndTime);\n  const isAmountAvailable = subTotal >= minAmount && subTotal <= maxAmount;\n  return !(\n    isAvailableThisDay &&\n    isAvailableThisTime &&\n    isAmountAvailable &&\n    status === \"A\"\n  );\n};\n"]},"metadata":{},"sourceType":"module"}