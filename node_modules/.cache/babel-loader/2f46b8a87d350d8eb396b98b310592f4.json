{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { setIn } from \"final-form\";\nimport { useMemo } from \"react\";\n/**\n * Sets the `innerError.message` in an `errors` object at the key\n * defined by `innerError.path`.\n * @param {Object} errors The object to set the error in.\n * @param {{ path: string, message: string }} innerError A `yup` field error.\n * @returns {Object} The result of setting the new error message onto `errors`.\n */\n\nconst setInError = (errors, innerError) => {\n  return setIn(errors, innerError.path, innerError.message);\n};\n/**\n * Empty object map with no prototype. Used as default\n * value for reducing the `err.inner` array of errors\n * from a `yup~ValidationError`.\n * @type {Object}\n */\n\n\nconst emptyObj = Object.create(null);\n/**\n * Takes a `yup` validation schema and returns a function that expects\n * a map of values to validate. If the validation passes, the function resolves to `undefined`\n * (signalling that the values are valid). If the validation doesn't pass, it resolves\n * to a map of invalid field names to errors.\n * @param {import('yup').ObjectSchema} schema `yup` schema definition.\n * @returns {(values: Object) => Promise<?Object>} An async function that expects some `values`\n *  and resolves to either `undefined` or a map of field names to error messages.\n */\n\nexport const makeValidate = schema => {\n  return async function validate(values) {\n    try {\n      await schema.validate(values, {\n        abortEarly: false\n      });\n    } catch (err) {\n      var _err$inner;\n\n      return err === null || err === void 0 ? void 0 : (_err$inner = err.inner) === null || _err$inner === void 0 ? void 0 : _err$inner.reduce(setInError, emptyObj);\n    }\n  };\n};\n\nfunction useValidationSchema(schema) {\n  _s();\n\n  const validate = useMemo(() => makeValidate(schema), [schema]);\n  return validate;\n}\n\n_s(useValidationSchema, \"9fQxMr7DX28U6Qp9RL+dox4GC/c=\");\n\nexport default useValidationSchema;","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/hooks/use-validation-schema.js"],"names":["setIn","useMemo","setInError","errors","innerError","path","message","emptyObj","Object","create","makeValidate","schema","validate","values","abortEarly","err","inner","reduce","useValidationSchema"],"mappings":";;AAAA,SAASA,KAAT,QAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAU,GAAG,CAACC,MAAD,EAASC,UAAT,KAAwB;AACzC,SAAOJ,KAAK,CAACG,MAAD,EAASC,UAAU,CAACC,IAApB,EAA0BD,UAAU,CAACE,OAArC,CAAZ;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAIC,MAAD,IAAY;AACtC,SAAO,eAAeC,QAAf,CAAwBC,MAAxB,EAAgC;AACrC,QAAI;AACF,YAAMF,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAwB;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAxB,CAAN;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AAAA;;AACZ,aAAOA,GAAP,aAAOA,GAAP,qCAAOA,GAAG,CAAEC,KAAZ,+CAAO,WAAYC,MAAZ,CAAmBf,UAAnB,EAA+BK,QAA/B,CAAP;AACD;AACF,GAND;AAOD,CARM;;AAUP,SAASW,mBAAT,CAA6BP,MAA7B,EAAqC;AAAA;;AACnC,QAAMC,QAAQ,GAAGX,OAAO,CAAC,MAAMS,YAAY,CAACC,MAAD,CAAnB,EAA6B,CAACA,MAAD,CAA7B,CAAxB;AACA,SAAOC,QAAP;AACD;;GAHQM,mB;;AAKT,eAAeA,mBAAf","sourcesContent":["import { setIn } from \"final-form\";\nimport { useMemo } from \"react\";\n\n/**\n * Sets the `innerError.message` in an `errors` object at the key\n * defined by `innerError.path`.\n * @param {Object} errors The object to set the error in.\n * @param {{ path: string, message: string }} innerError A `yup` field error.\n * @returns {Object} The result of setting the new error message onto `errors`.\n */\nconst setInError = (errors, innerError) => {\n  return setIn(errors, innerError.path, innerError.message);\n};\n\n/**\n * Empty object map with no prototype. Used as default\n * value for reducing the `err.inner` array of errors\n * from a `yup~ValidationError`.\n * @type {Object}\n */\nconst emptyObj = Object.create(null);\n\n/**\n * Takes a `yup` validation schema and returns a function that expects\n * a map of values to validate. If the validation passes, the function resolves to `undefined`\n * (signalling that the values are valid). If the validation doesn't pass, it resolves\n * to a map of invalid field names to errors.\n * @param {import('yup').ObjectSchema} schema `yup` schema definition.\n * @returns {(values: Object) => Promise<?Object>} An async function that expects some `values`\n *  and resolves to either `undefined` or a map of field names to error messages.\n */\nexport const makeValidate = (schema) => {\n  return async function validate(values) {\n    try {\n      await schema.validate(values, { abortEarly: false });\n    } catch (err) {\n      return err?.inner?.reduce(setInError, emptyObj);\n    }\n  };\n};\n\nfunction useValidationSchema(schema) {\n  const validate = useMemo(() => makeValidate(schema), [schema]);\n  return validate;\n}\n\nexport default useValidationSchema;\n"]},"metadata":{},"sourceType":"module"}