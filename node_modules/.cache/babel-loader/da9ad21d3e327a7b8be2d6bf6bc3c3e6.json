{"ast":null,"code":"var _jsxFileName = \"/Users/vonojastro/Desktop/lms-frontend-v2/src/components/ProtectedRoute/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { Navigate, Outlet, useLocation, useNavigate } from 'react-router';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedRoute(_ref) {\n  _s();\n\n  let {\n    redirectPath = '/landing',\n    isAllowed,\n    children\n  } = _ref;\n  const [isLoading, setIsLoading] = useState(typeof isAllowed === 'function' ? true : false);\n  const location = useLocation();\n  const toastId = React.useRef(null);\n\n  const notify = () => toastId.current = toast('Loading...', {\n    toastId: location.pathname,\n    isLoading: true\n  });\n\n  const navigate = useNavigate();\n\n  const verifyIsAllowed = async () => {\n    try {\n      notify();\n      await isAllowed();\n    } catch (error) {\n      navigate(redirectPath);\n    } finally {\n      setIsLoading(false);\n      toast.dismiss();\n    }\n  };\n\n  useEffect(() => {\n    if (typeof isAllowed === 'function') verifyIsAllowed(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.pathname]);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(Fragment, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 25\n  }, this);\n  return isAllowed ? children || /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 34\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: redirectPath\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 47\n  }, this);\n}\n\n_s(ProtectedRoute, \"xxThonih9tClE4yqbyO7zk+Bnrc=\", false, function () {\n  return [useLocation, useNavigate];\n});\n\n_c = ProtectedRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/components/ProtectedRoute/index.jsx"],"names":["React","Fragment","useEffect","useState","Navigate","Outlet","useLocation","useNavigate","toast","ProtectedRoute","redirectPath","isAllowed","children","isLoading","setIsLoading","location","toastId","useRef","notify","current","pathname","navigate","verifyIsAllowed","error","dismiss"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,WAA3B,EAAwCC,WAAxC,QAA2D,cAA3D;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AAEA,eAAe,SAASC,cAAT,OAIZ;AAAA;;AAAA,MAJoC;AACrCC,IAAAA,YAAY,GAAG,UADsB;AAErCC,IAAAA,SAFqC;AAGrCC,IAAAA;AAHqC,GAIpC;AACD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CACxC,OAAOQ,SAAP,KAAqB,UAArB,GAAkC,IAAlC,GAAyC,KADD,CAA1C;AAGA,QAAMI,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,OAAO,GAAGhB,KAAK,CAACiB,MAAN,CAAa,IAAb,CAAhB;;AACA,QAAMC,MAAM,GAAG,MACZF,OAAO,CAACG,OAAR,GAAkBX,KAAK,CAAC,YAAD,EAAe;AACrCQ,IAAAA,OAAO,EAAED,QAAQ,CAACK,QADmB;AAErCP,IAAAA,SAAS,EAAE;AAF0B,GAAf,CAD1B;;AAMA,QAAMQ,QAAQ,GAAGd,WAAW,EAA5B;;AACA,QAAMe,eAAe,GAAG,YAAY;AAClC,QAAI;AACFJ,MAAAA,MAAM;AACN,YAAMP,SAAS,EAAf;AACD,KAHD,CAGE,OAAOY,KAAP,EAAc;AACdF,MAAAA,QAAQ,CAACX,YAAD,CAAR;AACD,KALD,SAKU;AACRI,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAN,MAAAA,KAAK,CAACgB,OAAN;AACD;AACF,GAVD;;AAWAtB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,OAAOS,SAAP,KAAqB,UAAzB,EAAqCW,eAAe,GADtC,CAEhB;AACC,GAHQ,EAGN,CAACP,QAAQ,CAACK,QAAV,CAHM,CAAT;AAKA,MAAIP,SAAJ,EAAe,oBAAO,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACf,SAAOF,SAAS,GAAGC,QAAQ,iBAAI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,UAAf,gBAA4B,QAAC,QAAD;AAAU,IAAA,EAAE,EAAEF;AAAd;AAAA;AAAA;AAAA;AAAA,UAA5C;AACD;;GAnCuBD,c;UAQLH,W,EAQAC,W;;;KAhBKE,c","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport { Navigate, Outlet, useLocation, useNavigate } from 'react-router';\nimport { toast } from 'react-toastify';\n\nexport default function ProtectedRoute({\n  redirectPath = '/landing',\n  isAllowed,\n  children\n}) {\n  const [isLoading, setIsLoading] = useState(\n    typeof isAllowed === 'function' ? true : false\n  );\n  const location = useLocation();\n  const toastId = React.useRef(null);\n  const notify = () =>\n    (toastId.current = toast('Loading...', {\n      toastId: location.pathname,\n      isLoading: true\n    }));\n\n  const navigate = useNavigate();\n  const verifyIsAllowed = async () => {\n    try {\n      notify();\n      await isAllowed();\n    } catch (error) {\n      navigate(redirectPath);\n    } finally {\n      setIsLoading(false);\n      toast.dismiss();\n    }\n  };\n  useEffect(() => {\n    if (typeof isAllowed === 'function') verifyIsAllowed();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.pathname]);\n\n  if (isLoading) return <Fragment />;\n  return isAllowed ? children || <Outlet /> : <Navigate to={redirectPath} />;\n}\n"]},"metadata":{},"sourceType":"module"}