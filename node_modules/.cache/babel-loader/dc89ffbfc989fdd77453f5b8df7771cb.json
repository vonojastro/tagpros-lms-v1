{"ast":null,"code":"import moment from 'moment';\nimport dayjs from 'dayjs';\nimport LocalizedFormat from 'dayjs/plugin/localizedFormat';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\ndayjs.extend(utc);\ndayjs.extend(timezone);\ndayjs.extend(LocalizedFormat);\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\nexport const getDuration = (startTime, endTime, numberOnly) => {\n  if (!startTime || !endTime) return '';\n  var duration = moment.duration(moment(endTime, 'hh:mm A').diff(moment(startTime, 'hh:mm A')));\n  var hours = parseInt(duration.asHours());\n  var minutes = parseInt(duration.asMinutes()) % 60;\n  if (numberOnly) return parseInt(duration.asMilliseconds());\n  var message = '';\n\n  if (hours > 0) {\n    message += `${hours} hour${hours > 1 ? 's' : ''}`;\n  }\n\n  if (minutes > 0) {\n    if (hours > 0) {\n      message += ` and `;\n    }\n\n    message += `${minutes} minute${minutes > 1 ? 's' : ''}`;\n  }\n\n  return message;\n};\n/**\n * @param  {string} procId\n * @param  {Object.<string, {acronym: string; name: string; logo: string; type: number; status: string; remarks: string; procId: string; minAmount: number; maxAmount: number; currencies: string; dayOfWeek: string; startTime: string; endTime: string;}[]>} paymentMethods\n * @returns {{acronym: string; name: string; logo: string; type: number; status: string; remarks: string; procId: string; minAmount: number; maxAmount: number; currencies: string; dayOfWeek: string; startTime: string; endTime: string;}}\n */\n\nexport const getPaymentMethodByProcId = (procId, paymentMethods) => {\n  console.log('ðŸš€ ~ file: utils.js ~ line 31 ~ getPaymentMethodByProcId ~ paymentMethods', paymentMethods);\n  const keys = Object.keys(paymentMethods);\n  let paymentMethod = null;\n  keys.every(paymentMethodCategory => {\n    const found = paymentMethods[paymentMethodCategory].find(pmc => pmc.procId === procId);\n\n    if (found) {\n      paymentMethod = found;\n      return false;\n    }\n\n    return true;\n  });\n  return paymentMethod ? paymentMethod : new Error('No payment method found for procId=' + procId);\n};\nexport const toMoneyFormat = (n, currency) => {\n  const curr = currency ? currency : 'USD';\n\n  try {\n    const value = parseFloat(n).toFixed(2);\n    if (isNaN(value)) return '-';\n    return `${curr} ${Number(value).toLocaleString('en', {\n      minimumFractionDigits: 2\n    })}`;\n  } catch (e) {\n    return `${curr}  ${Number(parseFloat(0).toFixed(2)).toLocaleString('en', {\n      minimumFractionDigits: 2\n    })}`;\n  }\n};","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/utils/utils.js"],"names":["moment","dayjs","LocalizedFormat","utc","timezone","isSameOrAfter","isSameOrBefore","extend","getDuration","startTime","endTime","numberOnly","duration","diff","hours","parseInt","asHours","minutes","asMinutes","asMilliseconds","message","getPaymentMethodByProcId","procId","paymentMethods","console","log","keys","Object","paymentMethod","every","paymentMethodCategory","found","find","pmc","Error","toMoneyFormat","n","currency","curr","value","parseFloat","toFixed","isNaN","Number","toLocaleString","minimumFractionDigits","e"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AAEAL,KAAK,CAACM,MAAN,CAAaJ,GAAb;AACAF,KAAK,CAACM,MAAN,CAAaH,QAAb;AACAH,KAAK,CAACM,MAAN,CAAaL,eAAb;AACAD,KAAK,CAACM,MAAN,CAAaF,aAAb;AACAJ,KAAK,CAACM,MAAN,CAAaD,cAAb;AACA,OAAO,MAAME,WAAW,GAAG,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,UAArB,KAAoC;AAC7D,MAAI,CAACF,SAAD,IAAc,CAACC,OAAnB,EAA4B,OAAO,EAAP;AAC5B,MAAIE,QAAQ,GAAGZ,MAAM,CAACY,QAAP,CACbZ,MAAM,CAACU,OAAD,EAAU,SAAV,CAAN,CAA2BG,IAA3B,CAAgCb,MAAM,CAACS,SAAD,EAAY,SAAZ,CAAtC,CADa,CAAf;AAGA,MAAIK,KAAK,GAAGC,QAAQ,CAACH,QAAQ,CAACI,OAAT,EAAD,CAApB;AACA,MAAIC,OAAO,GAAGF,QAAQ,CAACH,QAAQ,CAACM,SAAT,EAAD,CAAR,GAAiC,EAA/C;AAEA,MAAIP,UAAJ,EAAgB,OAAOI,QAAQ,CAACH,QAAQ,CAACO,cAAT,EAAD,CAAf;AAEhB,MAAIC,OAAO,GAAG,EAAd;;AAEA,MAAIN,KAAK,GAAG,CAAZ,EAAe;AACbM,IAAAA,OAAO,IAAK,GAAEN,KAAM,QAAOA,KAAK,GAAG,CAAR,GAAY,GAAZ,GAAkB,EAAG,EAAhD;AACD;;AAED,MAAIG,OAAO,GAAG,CAAd,EAAiB;AACf,QAAIH,KAAK,GAAG,CAAZ,EAAe;AACbM,MAAAA,OAAO,IAAK,OAAZ;AACD;;AACDA,IAAAA,OAAO,IAAK,GAAEH,OAAQ,UAASA,OAAO,GAAG,CAAV,GAAc,GAAd,GAAoB,EAAG,EAAtD;AACD;;AAED,SAAOG,OAAP;AACD,CAxBM;AAyBP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,wBAAwB,GAAG,CAACC,MAAD,EAASC,cAAT,KAA4B;AAClEC,EAAAA,OAAO,CAACC,GAAR,CACE,2EADF,EAEEF,cAFF;AAIA,QAAMG,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,cAAZ,CAAb;AACA,MAAIK,aAAa,GAAG,IAApB;AACAF,EAAAA,IAAI,CAACG,KAAL,CAAWC,qBAAqB,IAAI;AAClC,UAAMC,KAAK,GAAGR,cAAc,CAACO,qBAAD,CAAd,CAAsCE,IAAtC,CACZC,GAAG,IAAIA,GAAG,CAACX,MAAJ,KAAeA,MADV,CAAd;;AAGA,QAAIS,KAAJ,EAAW;AACTH,MAAAA,aAAa,GAAGG,KAAhB;AACA,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD,GATD;AAUA,SAAOH,aAAa,GAChBA,aADgB,GAEhB,IAAIM,KAAJ,CAAU,wCAAwCZ,MAAlD,CAFJ;AAGD,CApBM;AAsBP,OAAO,MAAMa,aAAa,GAAG,CAACC,CAAD,EAAIC,QAAJ,KAAiB;AAC5C,QAAMC,IAAI,GAAGD,QAAQ,GAAGA,QAAH,GAAc,KAAnC;;AACA,MAAI;AACF,UAAME,KAAK,GAAGC,UAAU,CAACJ,CAAD,CAAV,CAAcK,OAAd,CAAsB,CAAtB,CAAd;AAEA,QAAIC,KAAK,CAACH,KAAD,CAAT,EAAkB,OAAO,GAAP;AAElB,WAAQ,GAAED,IAAK,IAAGK,MAAM,CAACJ,KAAD,CAAN,CAAcK,cAAd,CAA6B,IAA7B,EAAmC;AAAEC,MAAAA,qBAAqB,EAAE;AAAzB,KAAnC,CAAiE,EAAnF;AACD,GAND,CAME,OAAOC,CAAP,EAAU;AACV,WAAQ,GAAER,IAAK,KAAIK,MAAM,CAACH,UAAU,CAAC,CAAD,CAAV,CAAcC,OAAd,CAAsB,CAAtB,CAAD,CAAN,CAAiCG,cAAjC,CAAgD,IAAhD,EAAsD;AACvEC,MAAAA,qBAAqB,EAAE;AADgD,KAAtD,CAEhB,EAFH;AAGD;AACF,CAbM","sourcesContent":["import moment from 'moment';\n\nimport dayjs from 'dayjs';\nimport LocalizedFormat from 'dayjs/plugin/localizedFormat';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\n\ndayjs.extend(utc);\ndayjs.extend(timezone);\ndayjs.extend(LocalizedFormat);\ndayjs.extend(isSameOrAfter);\ndayjs.extend(isSameOrBefore);\nexport const getDuration = (startTime, endTime, numberOnly) => {\n  if (!startTime || !endTime) return '';\n  var duration = moment.duration(\n    moment(endTime, 'hh:mm A').diff(moment(startTime, 'hh:mm A'))\n  );\n  var hours = parseInt(duration.asHours());\n  var minutes = parseInt(duration.asMinutes()) % 60;\n\n  if (numberOnly) return parseInt(duration.asMilliseconds());\n\n  var message = '';\n\n  if (hours > 0) {\n    message += `${hours} hour${hours > 1 ? 's' : ''}`;\n  }\n\n  if (minutes > 0) {\n    if (hours > 0) {\n      message += ` and `;\n    }\n    message += `${minutes} minute${minutes > 1 ? 's' : ''}`;\n  }\n\n  return message;\n};\n/**\n * @param  {string} procId\n * @param  {Object.<string, {acronym: string; name: string; logo: string; type: number; status: string; remarks: string; procId: string; minAmount: number; maxAmount: number; currencies: string; dayOfWeek: string; startTime: string; endTime: string;}[]>} paymentMethods\n * @returns {{acronym: string; name: string; logo: string; type: number; status: string; remarks: string; procId: string; minAmount: number; maxAmount: number; currencies: string; dayOfWeek: string; startTime: string; endTime: string;}}\n */\nexport const getPaymentMethodByProcId = (procId, paymentMethods) => {\n  console.log(\n    'ðŸš€ ~ file: utils.js ~ line 31 ~ getPaymentMethodByProcId ~ paymentMethods',\n    paymentMethods\n  );\n  const keys = Object.keys(paymentMethods);\n  let paymentMethod = null;\n  keys.every(paymentMethodCategory => {\n    const found = paymentMethods[paymentMethodCategory].find(\n      pmc => pmc.procId === procId\n    );\n    if (found) {\n      paymentMethod = found;\n      return false;\n    }\n    return true;\n  });\n  return paymentMethod\n    ? paymentMethod\n    : new Error('No payment method found for procId=' + procId);\n};\n\nexport const toMoneyFormat = (n, currency) => {\n  const curr = currency ? currency : 'USD';\n  try {\n    const value = parseFloat(n).toFixed(2);\n\n    if (isNaN(value)) return '-';\n\n    return `${curr} ${Number(value).toLocaleString('en', { minimumFractionDigits: 2 })}`;\n  } catch (e) {\n    return `${curr}  ${Number(parseFloat(0).toFixed(2)).toLocaleString('en', {\n      minimumFractionDigits: 2\n    })}`;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}