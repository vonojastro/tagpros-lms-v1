{"ast":null,"code":"import { api } from \"../api\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\";\nimport { getProcessorsSuccess, getPaymentsSuccess, getPayoutsSuccess } from \"../redux/actions/payment\";\nconst PAYMENT_ENDPOINT = '/payment';\nconst PAYOUT_ENDPOINT = '/payout';\nexport const getProcessors = async dispatch => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(PAYMENT_ENDPOINT + \"/processors\");\n    dispatch(getProcessorsSuccess(response.data));\n  } catch (error) {\n    console.log(\"(getProcessors) Status:\", error);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const getPayments = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(PAYMENT_ENDPOINT + \"/\");\n    dispatch(getPaymentsSuccess(response.data));\n    callback(true, response.data);\n  } catch (error) {\n    console.log(\"(getPayments) Status:\", error);\n    callback(false);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const getPayouts = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(PAYOUT_ENDPOINT + \"/list\");\n    dispatch(getPayoutsSuccess(response.data));\n    callback(true, response.data);\n  } catch (error) {\n    console.log(\"(getPayouts) Status:\", error);\n    callback(false);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/api/payment.js"],"names":["api","onLoadingScreen","offLoadingScreen","getProcessorsSuccess","getPaymentsSuccess","getPayoutsSuccess","PAYMENT_ENDPOINT","PAYOUT_ENDPOINT","getProcessors","dispatch","response","get","data","error","console","log","getPayments","callback","getPayouts"],"mappings":"AAAA,SAASA,GAAT,QAAoB,QAApB;AACA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,8BAAlD;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,EAAmDC,iBAAnD,QAA4E,0BAA5E;AAEA,MAAMC,gBAAgB,GAAG,UAAzB;AACA,MAAMC,eAAe,GAAG,SAAxB;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAOC,QAAP,IAAoB;AAChD,MAAI;AACGA,IAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACN,UAAMS,QAAQ,GAAG,MAAMV,GAAG,CAACW,GAAJ,CAAQL,gBAAgB,GAAG,aAA3B,CAAvB;AAEAG,IAAAA,QAAQ,CAACN,oBAAoB,CAACO,QAAQ,CAACE,IAAV,CAArB,CAAR;AACA,GALD,CAKE,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,KAAvC;AACMJ,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACN,GARD,SAQU;AACTO,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACA;AACD,CAZM;AAcP,OAAO,MAAMc,WAAW,GAAG,OAAOP,QAAP,EAAiBQ,QAAjB,KAA8B;AACxD,MAAI;AACGR,IAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACN,UAAMS,QAAQ,GAAG,MAAMV,GAAG,CAACW,GAAJ,CAAQL,gBAAgB,GAAG,GAA3B,CAAvB;AAEAG,IAAAA,QAAQ,CAACL,kBAAkB,CAACM,QAAQ,CAACE,IAAV,CAAnB,CAAR;AACAK,IAAAA,QAAQ,CAAC,IAAD,EAAOP,QAAQ,CAACE,IAAhB,CAAR;AACA,GAND,CAME,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,KAArC;AACAI,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACMR,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACN,GAVD,SAUU;AACTO,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACA;AACD,CAdM;AAgBP,OAAO,MAAMgB,UAAU,GAAG,OAAOT,QAAP,EAAiBQ,QAAjB,KAA8B;AACvD,MAAI;AACGR,IAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACN,UAAMS,QAAQ,GAAG,MAAMV,GAAG,CAACW,GAAJ,CAAQJ,eAAe,GAAG,OAA1B,CAAvB;AAEAE,IAAAA,QAAQ,CAACJ,iBAAiB,CAACK,QAAQ,CAACE,IAAV,CAAlB,CAAR;AACAK,IAAAA,QAAQ,CAAC,IAAD,EAAOP,QAAQ,CAACE,IAAhB,CAAR;AACA,GAND,CAME,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,KAApC;AACAI,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACMR,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACN,GAVD,SAUU;AACTO,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;AACA;AACD,CAdM","sourcesContent":["import { api } from \"../api\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\";\nimport { getProcessorsSuccess, getPaymentsSuccess, getPayoutsSuccess } from \"../redux/actions/payment\";\n\nconst PAYMENT_ENDPOINT = '/payment';\nconst PAYOUT_ENDPOINT = '/payout';\n\nexport const getProcessors = async (dispatch) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.get(PAYMENT_ENDPOINT + \"/processors\");\n\n\t\tdispatch(getProcessorsSuccess(response.data));\n\t} catch (error) {\n\t\tconsole.log(\"(getProcessors) Status:\", error);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const getPayments = async (dispatch, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.get(PAYMENT_ENDPOINT + \"/\");\n\n\t\tdispatch(getPaymentsSuccess(response.data));\n\t\tcallback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(getPayments) Status:\", error);\n\t\tcallback(false);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const getPayouts = async (dispatch, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.get(PAYOUT_ENDPOINT + \"/list\");\n\n\t\tdispatch(getPayoutsSuccess(response.data));\n\t\tcallback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(getPayouts) Status:\", error);\n\t\tcallback(false);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};"]},"metadata":{},"sourceType":"module"}