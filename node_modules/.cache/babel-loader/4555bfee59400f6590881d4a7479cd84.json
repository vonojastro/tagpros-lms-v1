{"ast":null,"code":"import { api } from \".\";\nimport { s3Config } from \"../config\";\nimport S3 from \"aws-s3-pro\";\nimport FIELDS from \"../components/LearnerInfoModal/fields\";\nimport { fetchLearnersSuccess } from \"../redux/actions/learners\";\nconst s3Client = new S3(s3Config);\nconst LEARNER_ENDPOINT = '/learner';\nexport const addLearner = async _ref => {\n  let {\n    values\n  } = _ref;\n\n  try {\n    let files = [];\n    FIELDS.forEach(_ref2 => {\n      let {\n        type,\n        name\n      } = _ref2;\n      if (type === \"image\") files.push(s3Client.uploadFile(values[name]).then(result => ({\n        [name]: result.key\n      })).catch(err => err));\n    });\n\n    if (files.length) {\n      files = await Promise.all(files);\n      files = files.reduce((acc, curr) => ({ ...acc,\n        [Object.keys(curr)[0]]: curr[Object.keys(curr)[0]]\n      }), {});\n    }\n\n    const learnerData = { ...values,\n      ...files\n    };\n    await api.post(\"learner/add\", learnerData);\n  } catch (error) {\n    console.log(\"ðŸš€ ~ file: learnerInfo.js ~ line 33 ~ addLearner ~ error\", error);\n    throw error;\n  }\n};\nexport const updateLearner = async _ref3 => {\n  let {\n    values\n  } = _ref3;\n\n  try {\n    let files = [];\n    FIELDS.forEach(_ref4 => {\n      let {\n        type,\n        name\n      } = _ref4;\n      if (type === \"image\") files.push(s3Client.uploadFile(values[name]).then(result => ({\n        [name]: result.key\n      })).catch(err => err));\n    });\n\n    if (files.length) {\n      files = await Promise.all(files);\n      files = files.reduce((acc, curr) => ({ ...acc,\n        [Object.keys(curr)[0]]: curr[Object.keys(curr)[0]]\n      }), {});\n    }\n\n    const learnerData = { ...values,\n      ...files\n    };\n    await api.post(\"learner/update\", learnerData);\n  } catch (error) {\n    console.log(\"ðŸš€ ~ file: learnerInfo.js ~ line 33 ~ addLearner ~ error\", error);\n    throw error;\n  }\n};\nexport const getLearners = async (dispatch, params) => {\n  try {\n    const learners = (await api.get(\"learner/all\", {\n      params\n    })).data;\n    dispatch(fetchLearnersSuccess(learners));\n    return learners.map(_ref5 => {\n      let {\n        dateOfBirth,\n        ...others\n      } = _ref5;\n      return { ...others,\n        dateOfBirth: `${dateOfBirth.split(\"/\")[0]}-${dateOfBirth.split(\"/\")[1]}-${dateOfBirth.split(\"/\")[2]}`\n      };\n    }); // return learners;\n  } catch (error) {\n    console.log(\"ðŸš€ ~ file: learners.js ~ line 42 ~ getLearners ~ error\", error);\n    throw error;\n  }\n};\nexport const deleteLearner = async id => {\n  try {\n    await api.post(\"learner/delete\", {\n      id\n    });\n  } catch (error) {\n    console.log(\"ðŸš€ ~ file: learnerInfo.js ~ line 33 ~ deleteLearner ~ error\", error);\n    throw error;\n  }\n};\nexport const getAllLearners = async (dispatch, callback) => {\n  try {\n    const response = await api.get(LEARNER_ENDPOINT + \"/all\");\n    dispatch(fetchLearnersSuccess(response.data));\n    callback && callback(true);\n  } catch (error) {\n    console.log(\"Status:\", error);\n    callback && callback(false);\n  } finally {}\n};","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/api/learners.js"],"names":["api","s3Config","S3","FIELDS","fetchLearnersSuccess","s3Client","LEARNER_ENDPOINT","addLearner","values","files","forEach","type","name","push","uploadFile","then","result","key","catch","err","length","Promise","all","reduce","acc","curr","Object","keys","learnerData","post","error","console","log","updateLearner","getLearners","dispatch","params","learners","get","data","map","dateOfBirth","others","split","deleteLearner","id","getAllLearners","callback","response"],"mappings":"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","sourcesContent":["import { api } from \".\";\nimport { s3Config } from \"../config\";\nimport S3 from \"aws-s3-pro\";\nimport FIELDS from \"../components/LearnerInfoModal/fields\";\nimport { fetchLearnersSuccess } from \"../redux/actions/learners\";\n\nconst s3Client = new S3(s3Config);\n\nconst LEARNER_ENDPOINT = '/learner';\n\nexport const addLearner = async ({ values }) => {\n  try {\n    let files = [];\n    FIELDS.forEach(({ type, name }) => {\n      if (type === \"image\")\n        files.push(\n          s3Client\n            .uploadFile(values[name])\n            .then((result) => ({ [name]: result.key }))\n            .catch((err) => err)\n        );\n    });\n\n    if (files.length) {\n      files = await Promise.all(files);\n      files = files.reduce(\n        (acc, curr) => ({ ...acc, [Object.keys(curr)[0]]: curr[Object.keys(curr)[0]] }),\n        {}\n      );\n    }\n    const learnerData = {\n      ...values,\n      ...files,\n    };\n    await api.post(\"learner/add\", learnerData);\n  } catch (error) {\n    console.log(\"ðŸš€ ~ file: learnerInfo.js ~ line 33 ~ addLearner ~ error\", error);\n    throw error;\n  }\n};\n\nexport const updateLearner = async ({ values }) => {\n  try {\n    let files = [];\n    FIELDS.forEach(({ type, name }) => {\n      if (type === \"image\")\n        files.push(\n          s3Client\n            .uploadFile(values[name])\n            .then((result) => ({ [name]: result.key }))\n            .catch((err) => err)\n        );\n    });\n\n    if (files.length) {\n      files = await Promise.all(files);\n      files = files.reduce(\n        (acc, curr) => ({ ...acc, [Object.keys(curr)[0]]: curr[Object.keys(curr)[0]] }),\n        {}\n      );\n    }\n    const learnerData = {\n      ...values,\n      ...files,\n    };\n    await api.post(\"learner/update\", learnerData);\n  } catch (error) {\n    console.log(\"ðŸš€ ~ file: learnerInfo.js ~ line 33 ~ addLearner ~ error\", error);\n    throw error;\n  }\n};\n\nexport const getLearners = async (dispatch, params) => {\n  try {\n    const learners = (await api.get(\"learner/all\", { params })).data;\n    dispatch(fetchLearnersSuccess(learners));\n    return learners.map(({ dateOfBirth, ...others }) => ({\n      ...others,\n      dateOfBirth: `${dateOfBirth.split(\"/\")[0]}-${dateOfBirth.split(\"/\")[1]}-${\n        dateOfBirth.split(\"/\")[2]\n      }`,\n    }));\n    // return learners;\n  } catch (error) {\n    console.log(\"ðŸš€ ~ file: learners.js ~ line 42 ~ getLearners ~ error\", error);\n    throw error;\n  }\n};\n\nexport const deleteLearner = async (id) => {\n  try {\n    await api.post(\"learner/delete\", {id});\n  } catch (error) {\n    console.log(\"ðŸš€ ~ file: learnerInfo.js ~ line 33 ~ deleteLearner ~ error\", error);\n    throw error;\n  }\n};\n\nexport const getAllLearners = async (dispatch, callback) => {\n\ttry {\n\t\tconst response = await api.get(LEARNER_ENDPOINT + \"/all\");\n\t\tdispatch(fetchLearnersSuccess(response.data));\n\t\tcallback && callback(true);\n\t} catch (error) {\n\t\tconsole.log(\"Status:\", error);\n\t\tcallback && callback(false);\n\t} finally {\n\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}