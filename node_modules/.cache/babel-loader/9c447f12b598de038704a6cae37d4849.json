{"ast":null,"code":"import { api } from \".\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\"; // import { getNotificationsSuccess, addNotificationSuccess, updateNotificationSuccess, getActiveNotificationsSuccess } from \"../redux/actions/notification\";\n\nimport { getNotificationsSuccess, readNotificationsSuccess, getSelectedNotificationSuccess } from \"../redux/actions/notification\";\nconst NOTIFICATION_ENDPOINT = '/notification';\nexport const getNotifications = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(NOTIFICATION_ENDPOINT);\n    dispatch(getNotificationsSuccess(response.data));\n    callback(true, response.data);\n  } catch (error) {\n    console.log(\"(getNotifications) Status:\", error);\n    callback(false);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const getSelectedNotification = async (dispatch, args, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.post(NOTIFICATION_ENDPOINT + \"/getSelectedNotification\", args);\n    dispatch(getSelectedNotificationSuccess(response.data));\n    callback(true, response.data);\n  } catch (error) {\n    console.log(\"(getNotifications) Status:\", error);\n    callback(false);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const readNotifications = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(NOTIFICATION_ENDPOINT + \"/read\");\n    dispatch(readNotificationsSuccess(response.data));\n    callback(true, response.data);\n  } catch (error) {\n    console.log(\"(readNotifications) Status:\", error);\n    callback(false);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n}; // export const addNotification = async (dispatch, args, callback) => {\n// \ttry {\n// \t\tconst response = await api.post(NOTIFICATION_ENDPOINT + \"/add\", args);\n// \t\tdispatch(addNotificationSuccess(response.data));\n// \t\tcallback(true, response.data);\n// \t} catch (error) {\n// \t\tconsole.log(\"(addNotification) Status:\", error);\n// \t\tcallback(false);\n// \t}\n// };\n// export const updateNotification = async (dispatch, args, callback) => {\n// \ttry {\n// \t\tconst response = await api.post(NOTIFICATION_ENDPOINT + \"/update\", args);\n// \t\tdispatch(updateNotificationSuccess(response.data));\n// \t\tcallback(true, response.data);\n// \t} catch (error) {\n// \t\tconsole.log(\"(updateNotification) Status:\", error);\n// \t\tcallback(false);\n// \t}\n// };\n// export const getActiveNotifications = async (dispatch, callback) => {\n// \ttry {\n//         dispatch(onLoadingScreen());\n// \t\tconst response = await api.get(NOTIFICATION_ENDPOINT + \"/active\");\n// \t\tdispatch(getActiveNotificationsSuccess(response.data));\n// \t} catch (error) {\n// \t\tconsole.log(\"(getActiveNotifications) Status:\", error);\n//         dispatch(offLoadingScreen());\n// \t} finally {\n// \t\tdispatch(offLoadingScreen());\n// \t}\n// };","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/api/notification.js"],"names":["api","onLoadingScreen","offLoadingScreen","getNotificationsSuccess","readNotificationsSuccess","getSelectedNotificationSuccess","NOTIFICATION_ENDPOINT","getNotifications","dispatch","callback","response","get","data","error","console","log","getSelectedNotification","args","post","readNotifications"],"mappings":"AAAA,SAASA,GAAT,QAAoB,GAApB;AACA,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,8BAAlD,C,CACA;;AACA,SAASC,uBAAT,EAAkCC,wBAAlC,EAA4DC,8BAA5D,QAAiG,+BAAjG;AAEA,MAAMC,qBAAqB,GAAG,eAA9B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC7D,MAAI;AACGD,IAAAA,QAAQ,CAACP,eAAe,EAAhB,CAAR;AACN,UAAMS,QAAQ,GAAG,MAAMV,GAAG,CAACW,GAAJ,CAAQL,qBAAR,CAAvB;AAEAE,IAAAA,QAAQ,CAACL,uBAAuB,CAACO,QAAQ,CAACE,IAAV,CAAxB,CAAR;AACAH,IAAAA,QAAQ,CAAC,IAAD,EAAOC,QAAQ,CAACE,IAAhB,CAAR;AACA,GAND,CAME,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,KAA1C;AACAJ,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACMD,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AACN,GAVD,SAUU;AACTM,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AACA;AACD,CAdM;AAgBP,OAAO,MAAMc,uBAAuB,GAAG,OAAOR,QAAP,EAAiBS,IAAjB,EAAuBR,QAAvB,KAAoC;AAC1E,MAAI;AACGD,IAAAA,QAAQ,CAACP,eAAe,EAAhB,CAAR;AACN,UAAMS,QAAQ,GAAG,MAAMV,GAAG,CAACkB,IAAJ,CAASZ,qBAAqB,GAAG,0BAAjC,EAA6DW,IAA7D,CAAvB;AAEAT,IAAAA,QAAQ,CAACH,8BAA8B,CAACK,QAAQ,CAACE,IAAV,CAA/B,CAAR;AACAH,IAAAA,QAAQ,CAAC,IAAD,EAAOC,QAAQ,CAACE,IAAhB,CAAR;AACA,GAND,CAME,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,KAA1C;AACAJ,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACMD,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AACN,GAVD,SAUU;AACTM,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AACA;AACD,CAdM;AAgBP,OAAO,MAAMiB,iBAAiB,GAAG,OAAOX,QAAP,EAAiBC,QAAjB,KAA8B;AAC9D,MAAI;AACGD,IAAAA,QAAQ,CAACP,eAAe,EAAhB,CAAR;AACN,UAAMS,QAAQ,GAAG,MAAMV,GAAG,CAACW,GAAJ,CAAQL,qBAAqB,GAAG,OAAhC,CAAvB;AAEAE,IAAAA,QAAQ,CAACJ,wBAAwB,CAACM,QAAQ,CAACE,IAAV,CAAzB,CAAR;AACAH,IAAAA,QAAQ,CAAC,IAAD,EAAOC,QAAQ,CAACE,IAAhB,CAAR;AACA,GAND,CAME,OAAOC,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CF,KAA3C;AACAJ,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACMD,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AACN,GAVD,SAUU;AACTM,IAAAA,QAAQ,CAACN,gBAAgB,EAAjB,CAAR;AACA;AACD,CAdM,C,CAgBP;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { api } from \".\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\";\n// import { getNotificationsSuccess, addNotificationSuccess, updateNotificationSuccess, getActiveNotificationsSuccess } from \"../redux/actions/notification\";\nimport { getNotificationsSuccess, readNotificationsSuccess, getSelectedNotificationSuccess} from \"../redux/actions/notification\";\n\nconst NOTIFICATION_ENDPOINT = '/notification';\n\nexport const getNotifications = async (dispatch, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.get(NOTIFICATION_ENDPOINT);\n\n\t\tdispatch(getNotificationsSuccess(response.data));\n\t\tcallback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(getNotifications) Status:\", error);\n\t\tcallback(false);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const getSelectedNotification = async (dispatch, args, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.post(NOTIFICATION_ENDPOINT + \"/getSelectedNotification\", args);\n\n\t\tdispatch(getSelectedNotificationSuccess(response.data));\n\t\tcallback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(getNotifications) Status:\", error);\n\t\tcallback(false);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const readNotifications = async (dispatch, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.get(NOTIFICATION_ENDPOINT + \"/read\");\n\n\t\tdispatch(readNotificationsSuccess(response.data));\n\t\tcallback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(readNotifications) Status:\", error);\n\t\tcallback(false);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\n// export const addNotification = async (dispatch, args, callback) => {\n// \ttry {\n// \t\tconst response = await api.post(NOTIFICATION_ENDPOINT + \"/add\", args);\n\n// \t\tdispatch(addNotificationSuccess(response.data));\n// \t\tcallback(true, response.data);\n// \t} catch (error) {\n// \t\tconsole.log(\"(addNotification) Status:\", error);\n// \t\tcallback(false);\n// \t}\n// };\n\n// export const updateNotification = async (dispatch, args, callback) => {\n// \ttry {\n// \t\tconst response = await api.post(NOTIFICATION_ENDPOINT + \"/update\", args);\n\n// \t\tdispatch(updateNotificationSuccess(response.data));\n// \t\tcallback(true, response.data);\n// \t} catch (error) {\n// \t\tconsole.log(\"(updateNotification) Status:\", error);\n// \t\tcallback(false);\n// \t}\n// };\n\n// export const getActiveNotifications = async (dispatch, callback) => {\n// \ttry {\n//         dispatch(onLoadingScreen());\n// \t\tconst response = await api.get(NOTIFICATION_ENDPOINT + \"/active\");\n\n// \t\tdispatch(getActiveNotificationsSuccess(response.data));\n// \t} catch (error) {\n// \t\tconsole.log(\"(getActiveNotifications) Status:\", error);\n//         dispatch(offLoadingScreen());\n// \t} finally {\n// \t\tdispatch(offLoadingScreen());\n// \t}\n// };\n"]},"metadata":{},"sourceType":"module"}