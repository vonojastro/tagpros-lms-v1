{"ast":null,"code":"import { api } from \"../api\";\nimport { addWebinarSuccess, getWebinarsSuccess, updateWebinarsSuccess } from \"../redux/actions/webinar\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\";\nconst WEBINAR_ENDPOINT = '/webinar';\nexport const getWebinars = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    await api.get(WEBINAR_ENDPOINT + \"/\").then(result => {\n      dispatch(getWebinarsSuccess(result.data));\n      console.log(\"(getWebinars) Status:\", result);\n      return result;\n    });\n  } catch (error) {\n    console.log(\"(getWebinars) Status:\", error);\n    !!callback && callback(false);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const getActiveWebinars = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    await api.get(WEBINAR_ENDPOINT + \"/active\").then(result => {\n      dispatch(getWebinarsSuccess(result.data));\n      console.log(\"(getWebinars) Status:\", result);\n      return result;\n    });\n  } catch (error) {\n    console.log(\"(getWebinars) Status:\", error);\n    !!callback && callback(false);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const updateWebinar = async (dispatch, args, callback) => {\n  try {\n    //dispatch(onLoadingScreen());\n    const response = await api.post(WEBINAR_ENDPOINT + \"/update\", args);\n    dispatch(updateWebinarsSuccess(response.data));\n    callback(true);\n  } catch (error) {\n    console.log(\"Status:\", error);\n    callback(false); //dispatch(offLoadingScreen());\n  } finally {//dispatch(offLoadingScreen());\n  }\n};\nexport const saveWebinar = async (dispatch, args) => {\n  try {\n    //dispatch(onLoadingScreen());\n    const response = await api.post(WEBINAR_ENDPOINT + \"/add\", args);\n    dispatch(addWebinarSuccess(response.data));\n  } catch (error) {\n    console.log(\"Status:\", error); //dispatch(offLoadingScreen());\n  } finally {//dispatch(offLoadingScreen());\n  }\n};","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/api/webinar.js"],"names":["api","addWebinarSuccess","getWebinarsSuccess","updateWebinarsSuccess","onLoadingScreen","offLoadingScreen","WEBINAR_ENDPOINT","getWebinars","dispatch","callback","get","then","result","data","console","log","error","getActiveWebinars","updateWebinar","args","response","post","saveWebinar"],"mappings":"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","sourcesContent":["import { api } from \"../api\";\nimport { addWebinarSuccess, getWebinarsSuccess, updateWebinarsSuccess } from \"../redux/actions/webinar\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\";\n\nconst WEBINAR_ENDPOINT = '/webinar';\n\nexport const getWebinars = async (dispatch, callback) => {\n\ttry {\n\t\tdispatch(onLoadingScreen());\n\n        await api.get(WEBINAR_ENDPOINT + \"/\").then((result) => {\n\t\t\tdispatch(getWebinarsSuccess(result.data));\n\t\t\tconsole.log(\"(getWebinars) Status:\", result);\n\t\t\treturn result;\n\t\t});\n\n\t\t\n\t} catch (error) {\n\t\tconsole.log(\"(getWebinars) Status:\", error);\n\t\t!!callback && callback(false);\n\t\tdispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const getActiveWebinars = async (dispatch, callback) => {\n\ttry {\n\t\tdispatch(onLoadingScreen());\n\n        await api.get(WEBINAR_ENDPOINT + \"/active\").then((result) => {\n\t\t\tdispatch(getWebinarsSuccess(result.data));\n\t\t\tconsole.log(\"(getWebinars) Status:\", result);\n\t\t\treturn result;\n\t\t});\n\n\t\t\n\t} catch (error) {\n\t\tconsole.log(\"(getWebinars) Status:\", error);\n\t\t!!callback && callback(false);\n\t\tdispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const updateWebinar = async (dispatch, args, callback) => {\n\ttry {\n\t\t//dispatch(onLoadingScreen());\n\n\t\tconst response = await api.post(WEBINAR_ENDPOINT + \"/update\", args);\n\t\tdispatch(updateWebinarsSuccess(response.data));\n\t\tcallback(true);\n\t} catch (error) {\n\t\tconsole.log(\"Status:\", error);\n\t\tcallback(false);\n\t\t//dispatch(offLoadingScreen());\n\t} finally {\n\t\t//dispatch(offLoadingScreen());\n\t}\n};\n\nexport const saveWebinar = async (dispatch, args) => {\n\ttry {\n\t\t//dispatch(onLoadingScreen());\n\n\t\tconst response = await api.post(WEBINAR_ENDPOINT + \"/add\", args);\n\t\tdispatch(addWebinarSuccess(response.data));\n\t} catch (error) {\n\t\tconsole.log(\"Status:\", error);\n\t\t//dispatch(offLoadingScreen());\n\t} finally {\n\t\t//dispatch(offLoadingScreen());\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}