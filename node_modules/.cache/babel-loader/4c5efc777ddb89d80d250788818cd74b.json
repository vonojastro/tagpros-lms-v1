{"ast":null,"code":"var _jsxFileName = \"/Users/vonojastro/Desktop/lms-frontend-v2/src/components/Admin/contents/ManageAdminAccounts/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Table from \"components/Admin/contents/Table\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from 'react-toastify';\nimport { getAllAdminAccounts, saveAdminDetails, deactivateAdminAccount, activateAdminAccount, resetPassLink } from \"api/admin\";\nimport { Modal, Alert, Button } from \"react-bootstrap\";\nimport './index.css';\nimport { ADMIN_TYPES // ACCOUNT_STATUS \n} from \"utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ManageAdminAccounts() {\n  _s();\n\n  const [filterValue, setFilterValue] = useState({\n    role: '',\n    status: ''\n  });\n  const [hideFilter, setHideFilter] = useState(false);\n  const [tableData, setTableData] = useState([]);\n  const [originalData, setOriginalData] = useState([]);\n  const [selectedAdmin, setSelectedAdmin] = useState({\n    adminId: null,\n    firstName: '',\n    lastName: '',\n    email: '',\n    role: ''\n  }); // eslint-disable-next-line no-unused-vars\n\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const [errorTable, setErrorTable] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [showUpdateModal, setShowUpdateModal] = useState(false);\n  const [showActivationModal, setShowActivationModal] = useState(false);\n  const [showResetPasswordModal, setShowResetPasswordModal] = useState(false);\n  let loading = useSelector(state => state.uiElements.getIn(['loadingScreen']));\n  const dispatch = useDispatch();\n  const [toggleSortFilter, setToggleSortFilter] = useState({});\n  const columns = [{\n    Header: \"Admin Accounts\",\n    id: \"tbl\",\n    columns: [{\n      Header: 'FULL NAME',\n      accessor: d => `${d.firstName} ${d.lastName}`,\n      accessorFilter: 'FULL_NAME',\n      filterType: 'sortOnly',\n      columnFilter: true\n    }, {\n      Header: 'EMAIL',\n      accessor: \"email\",\n      accessorFilter: 'email',\n      filterType: 'sortOnly',\n      columnFilter: true\n    }, {\n      Header: 'ROLE',\n      accessor: \"role\",\n      accessorFilter: 'role',\n      filterType: 'multipleSelect',\n      columnFilter: true,\n      filter: multiSelectFilter\n    }, {\n      Header: 'STATUS',\n      accessor: \"status\",\n      accessorFilter: 'status',\n      filterType: 'multipleSelect',\n      columnFilter: true,\n      filter: multiSelectFilter\n    }, {\n      Header: 'ACTION',\n      accessor: d => d.status,\n      Cell: _ref => {\n        let {\n          row,\n          value\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-link\",\n            \"data-toggle\": \"tooltip\",\n            title: \"Update Account\",\n            onClick: () => onClickAction(\"showUpdateAccountModal\", row.index),\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"ti-marker-alt\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-link\",\n            \"data-toggle\": \"tooltip\",\n            title: `${row.values.status === 'ACTIVE' ? 'Deactivate Account' : 'Activate Account'}`,\n            onClick: () => onClickAction(\"showActivationModal\", row.index),\n            children: row.values.status === 'ACTIVE' ? /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-toggle-on\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 67\n            }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-toggle-off\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 106\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-link\",\n            \"data-toggle\": \"tooltip\",\n            title: \"Reset Password\",\n            onClick: () => onClickAction(\"showResetPasswordModal\", row.index),\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-key\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this);\n      }\n    }]\n  }];\n\n  function multiSelectFilter(rows, columnIds, filterValue) {\n    return filterValue.length === 0 ? rows : rows.filter(row => filterValue.includes(String(row.original[columnIds])));\n  }\n\n  const loadData = async () => {\n    await setErrorTable(false);\n    await getAllAdminAccounts(dispatch, async (status, data) => {\n      if (!status) {\n        await setErrorTable(true);\n      } else {\n        await setTableData(data);\n        await setOriginalData(data);\n\n        if (!!filterValue.role && filterValue.role !== '') {\n          applyFilter('role', filterValue.role);\n        } else if (!!filterValue.status && filterValue.status !== '') {\n          applyFilter('status', filterValue.status);\n        }\n      }\n    });\n  };\n\n  const onClickAction = async (act, index) => {\n    await setErrorMessage(\"\");\n\n    switch (act) {\n      case 'save':\n        console.log(selectedAdmin);\n        saveAccountPOST();\n        break;\n\n      case 'showUpdateAccountModal':\n        if (isNaN(index)) {\n          await setSelectedAdmin({\n            adminId: null,\n            firstName: '',\n            lastName: '',\n            email: '',\n            role: ''\n          });\n        } else {\n          await setSelectedAdmin(tableData[index]);\n        }\n\n        await setShowUpdateModal(true);\n        break;\n\n      case 'showActivationModal':\n        await setSelectedAdmin(tableData[index]);\n        await setShowActivationModal(true);\n        break;\n\n      case 'showResetPasswordModal':\n        await setSelectedAdmin(tableData[index]);\n        await setShowResetPasswordModal(true);\n        break;\n\n      case 'activate':\n        activateAccountPOST();\n        break;\n\n      case 'deactivate':\n        deactivateAccountPOST();\n        break;\n\n      case 'resetPass':\n        resetPassLinkPOST();\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const resetPassLinkPOST = async () => {\n    setSubmitLoading(true);\n    const args = {\n      adminId: selectedAdmin.adminId\n    };\n    await resetPassLink(dispatch, args, (status, data) => {\n      if (!status) {\n        // toast error\n        toast.error(\"Oh no! Unable to send reset password link. Please try again.\");\n      } else {\n        // toast success\n        toast.success(\"Email Sent!\");\n        setShowResetPasswordModal(false);\n      }\n    });\n    setSubmitLoading(false);\n  };\n\n  const saveAccountPOST = async () => {\n    await setSubmitLoading(true);\n\n    if (!selectedAdmin.firstName || selectedAdmin.firstName === '') {\n      await setErrorMessage(\"Please encode the FIRST NAME of the user\");\n      return;\n    }\n\n    if (!selectedAdmin.lastName || selectedAdmin.lastName === '') {\n      await setErrorMessage(\"Please encode the LAST NAME of the user\");\n      return;\n    }\n\n    if (!selectedAdmin.email || selectedAdmin.email === '') {\n      await setErrorMessage(\"Please encode the EMAIL of the user\");\n      return;\n    } // eslint-disable-next-line no-useless-escape\n\n\n    if (!selectedAdmin.email.match(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+[^<>()\\.,;:\\s@\\\"]{2,})$/)) {\n      await setErrorMessage(\"Please encode the EMAIL in the proper format\");\n      return;\n    }\n\n    if (!selectedAdmin.role || selectedAdmin.role === '') {\n      await setErrorMessage(\"Please encode the ACCOUNT TYPE of the user\");\n      return;\n    }\n\n    if (!!selectedAdmin.adminId) {\n      // args\n      const args = {\n        adminId: selectedAdmin.adminId,\n        firstName: selectedAdmin.firstName,\n        lastName: selectedAdmin.lastName,\n        role: selectedAdmin.role,\n        email: selectedAdmin.email\n      };\n      await saveAdminDetails(dispatch, args, async (status, data) => {\n        if (!status) {\n          console.log(data.response.data.message);\n          await setErrorMessage(data.response.data.message);\n          toast.error(\"Oh no! Unable to update the account. Please Try Again.\");\n        } else {\n          toast.success(\"Account Details Successfully Saved!\");\n          loadData();\n          setShowUpdateModal(false);\n        }\n      });\n    } else {\n      const args = {\n        firstName: selectedAdmin.firstName,\n        lastName: selectedAdmin.lastName,\n        role: selectedAdmin.role,\n        email: selectedAdmin.email\n      };\n      await saveAdminDetails(dispatch, args, async (status, data) => {\n        if (!status) {\n          // toast error\n          console.log(data, data.response.data.message);\n          await setErrorMessage(data.response.data.message);\n          toast.error(\"Oh no! Unable to Create an Account. Please Try Again.\");\n        } else {\n          // toast success\n          toast.success(\"Account Details Successfully Saved!\");\n          loadData();\n          setShowUpdateModal(false);\n        }\n      });\n    }\n\n    await setSubmitLoading(false);\n  };\n\n  const deactivateAccountPOST = async () => {\n    setSubmitLoading(true);\n    const args = {\n      adminId: selectedAdmin.adminId\n    };\n    await deactivateAdminAccount(dispatch, args, (status, data) => {\n      if (!status) {\n        // toast error\n        toast.error(\"Oh no! Unable to deactivate the account. Please try again.\");\n      } else {\n        // toast success\n        toast.success(\"Account successfully deactivated!\");\n        loadData();\n        setShowActivationModal(false);\n      }\n    });\n    setSubmitLoading(false);\n  };\n\n  const activateAccountPOST = async () => {\n    setSubmitLoading(true);\n    const args = {\n      adminId: selectedAdmin.adminId\n    };\n    await activateAdminAccount(dispatch, args, (status, data) => {\n      if (!status) {\n        // toast error\n        toast.error(\"Oh no! Unable to activate the Account. Please try again.\");\n      } else {\n        // toast success\n        toast.success(\"Account successfully activated!\");\n        loadData();\n        setShowActivationModal(false);\n      }\n    });\n    setSubmitLoading(false);\n  }; // const resetPasswordPOST = async () =>{\n  //     setSubmitLoading(true);\n  //     const args = {\n  //         adminId: selectedAdmin.adminId\n  //     };\n  //     await activateAdminAccount(dispatch, args, (status, data)=>{\n  //         if(!status){\n  //             // toast error\n  //             toast.error(\"Oh no! Unable to activate the Account. Please try again.\");\n  //         }\n  //         else\n  //         {\n  //             // toast success\n  //             toast.success(\"Account successfully activated!\");\n  //             loadData();\n  //             setShowActivationModal(false);\n  //         }\n  //     });\n  //     setSubmitLoading(false);\n  // };\n\n\n  const applyFilter = async (column, value) => {\n    filterValue[column] = value;\n    await setFilterValue(filterValue);\n    let keys = (await Object.keys(filterValue).filter(key => filterValue[key] !== \"\")) || [];\n\n    if (keys.length === 0) {\n      setTableData(originalData);\n      return;\n    }\n\n    const result = await originalData.filter(data => {\n      let match = 0;\n      keys.forEach(key => {\n        switch (key) {\n          case 'role':\n            if (data[key] === filterValue[key] || data[key] === '') match++;\n            break;\n\n          case 'status':\n            if (data[key] === filterValue[key] || data[key] === '') match++;\n            break;\n\n          default:\n            break;\n        }\n      });\n      return match === keys.length;\n    });\n    await setTableData(result);\n  };\n\n  const onInputChange = async (name, value) => {\n    setSelectedAdmin(prevState => ({ ...prevState,\n      [name]: value\n    }));\n  };\n\n  React.useEffect(() => {\n    loadData(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-12\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"row\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"left-aside bg-light-part col\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `row ${!hideFilter ? 'justify-content-end' : 'justify-content-center'}`,\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"btn btn-link\",\n                    \"data-toggle\": \"tooltip\",\n                    title: `${!hideFilter ? 'Minimize Filter Section' : 'Expand Filter Section'}`,\n                    onClick: () => setHideFilter(!hideFilter),\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: `fas ${!hideFilter ? 'fa-minus-square' : 'fa-expand-alt'}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 411,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 410,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 409,\n                  columnNumber: 37\n                }, this), !hideFilter && /*#__PURE__*/_jsxDEV(\"ul\", {\n                  className: \"list-style-none\",\n                  children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"box-label\",\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"admin-table-total\",\n                      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n                        children: \"Total Admins\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 420,\n                        columnNumber: 49\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        children: tableData.length\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 423,\n                        columnNumber: 49\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 419,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 415,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"divider\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 427,\n                    columnNumber: 41\n                  }, this), Object.keys(ADMIN_TYPES).map(item => {\n                    return /*#__PURE__*/_jsxDEV(\"li\", {\n                      className: \"box-label\",\n                      children: /*#__PURE__*/_jsxDEV(\"a\", {\n                        href: \"#!\",\n                        children: [item, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                          children: originalData.filter(dataItem => dataItem.role === ADMIN_TYPES[item]).length\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 432,\n                          columnNumber: 68\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 431,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 430,\n                      columnNumber: 52\n                    }, this);\n                  }), /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: \"divider\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 437,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 414,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `right-aside ${!hideFilter ? 'col-9' : 'col-11'}`,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"button-fab\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    className: \"btn btn-info\",\n                    onClick: e => onClickAction(\"showUpdateAccountModal\"),\n                    children: /*#__PURE__*/_jsxDEV(\"i\", {\n                      className: \"fas fa-plus\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 471,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 470,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 468,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Table, {\n                  loading: loading,\n                  error: errorTable,\n                  columns: columns,\n                  data: tableData,\n                  title: \"Admin Accounts\" // filterColumn={'role'} \n                  // filterValue={filterValue} \n                  ,\n                  toggleSortFilter: toggleSortFilter,\n                  setToggleSortFilter: setToggleSortFilter,\n                  onReload: loadData\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 474,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"m\",\n      show: showUpdateModal,\n      backdrop: \"static\",\n      keyboard: false,\n      onHide: async () => {\n        await setShowUpdateModal(!showUpdateModal);\n        await setSelectedAdmin({\n          adminId: null,\n          firstName: '',\n          lastName: '',\n          email: '',\n          role: ''\n        });\n      },\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Account Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [!!errorMessage && errorMessage !== '' ? /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          style: {\n            whiteSpace: \"pre-wrap\"\n          },\n          onClose: () => setErrorMessage(\"\"),\n          dismissible: true,\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 23\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"form\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"lms-input-label\",\n                htmlFor: \"firstName\",\n                children: \"First Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 518,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"form-control\",\n                id: \"firstName\",\n                name: \"firstName\",\n                defaultValue: selectedAdmin.firstName,\n                onChange: e => onInputChange(e.target.name, e.target.value),\n                placeholder: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"lms-input-label\",\n                htmlFor: \"lastName\",\n                children: \"Last Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 532,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                className: \"form-control\",\n                id: \"lastName\",\n                name: \"lastName\",\n                defaultValue: selectedAdmin.lastName,\n                onChange: e => onInputChange(e.target.name, e.target.value),\n                placeholder: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 535,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"lms-input-label\",\n                htmlFor: \"email\",\n                children: \"Email\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 546,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                className: \"form-control\",\n                id: \"email\",\n                name: \"email\",\n                defaultValue: selectedAdmin.email,\n                disabled: !!selectedAdmin.adminId ? true : false,\n                onChange: e => onInputChange(e.target.name, e.target.value),\n                placeholder: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 549,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Account Type\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 561,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"role\",\n                name: \"role\",\n                defaultValue: selectedAdmin.role,\n                onChange: e => onInputChange(e.target.name, e.target.value),\n                className: \"form-control\",\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Please select the account type of the user\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 563,\n                  columnNumber: 37\n                }, this), Object.keys(ADMIN_TYPES).map(item => {\n                  return /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: ADMIN_TYPES[item],\n                    children: ADMIN_TYPES[item]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 565,\n                    columnNumber: 48\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 562,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: e => onClickAction(\"save\"),\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"m\",\n      show: showActivationModal,\n      backdrop: \"static\",\n      keyboard: false,\n      onHide: () => setShowActivationModal(!showActivationModal),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: !!selectedAdmin && selectedAdmin.status === 'ACTIVE' ? 'Deactivate Account' : 'Activate Account'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [\"Are you sure you want to \", !!selectedAdmin && selectedAdmin.status === 'ACTIVE' ? 'deactivate the account' : 'activate the account', \" of \", selectedAdmin.firstName, \" \", selectedAdmin.lastName, \"?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: e => onClickAction(!!selectedAdmin && selectedAdmin.status === 'ACTIVE' ? 'deactivate' : 'activate'),\n          children: !!selectedAdmin && selectedAdmin.status === 'ACTIVE' ? 'Deactivate' : 'Activate'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"m\",\n      show: showResetPasswordModal,\n      backdrop: \"static\",\n      keyboard: false,\n      onHide: () => setShowResetPasswordModal(!showResetPasswordModal),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [\"Are you sure you want to reset the password of \", selectedAdmin.firstName, \" \", selectedAdmin.lastName, \"?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: e => onClickAction(\"resetPass\"),\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"footer\",\n      children: \"\\xA9 2021 Tagpros Education\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ManageAdminAccounts, \"at+/gs80zsmkGu7nQbOfie9mDQ4=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ManageAdminAccounts;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"ManageAdminAccounts\");","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/components/Admin/contents/ManageAdminAccounts/index.jsx"],"names":["React","useState","Table","useDispatch","useSelector","toast","getAllAdminAccounts","saveAdminDetails","deactivateAdminAccount","activateAdminAccount","resetPassLink","Modal","Alert","Button","ADMIN_TYPES","ManageAdminAccounts","filterValue","setFilterValue","role","status","hideFilter","setHideFilter","tableData","setTableData","originalData","setOriginalData","selectedAdmin","setSelectedAdmin","adminId","firstName","lastName","email","submitLoading","setSubmitLoading","errorTable","setErrorTable","errorMessage","setErrorMessage","showUpdateModal","setShowUpdateModal","showActivationModal","setShowActivationModal","showResetPasswordModal","setShowResetPasswordModal","loading","state","uiElements","getIn","dispatch","toggleSortFilter","setToggleSortFilter","columns","Header","id","accessor","d","accessorFilter","filterType","columnFilter","filter","multiSelectFilter","Cell","row","value","display","onClickAction","index","values","rows","columnIds","length","includes","String","original","loadData","data","applyFilter","act","console","log","saveAccountPOST","isNaN","activateAccountPOST","deactivateAccountPOST","resetPassLinkPOST","args","error","success","match","response","message","column","keys","Object","key","result","forEach","onInputChange","name","prevState","useEffect","map","item","dataItem","e","whiteSpace","target"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Table from \"components/Admin/contents/Table\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { toast } from 'react-toastify';\nimport { getAllAdminAccounts, saveAdminDetails, deactivateAdminAccount, activateAdminAccount, resetPassLink } from \"api/admin\";\nimport { Modal, Alert, Button } from \"react-bootstrap\";\n\n\nimport './index.css';\nimport { ADMIN_TYPES, \n    // ACCOUNT_STATUS \n} from \"utils/constants\";\n\nexport default function ManageAdminAccounts() {\n    const [filterValue, setFilterValue] = useState({role:'', status:''});\n    const [hideFilter, setHideFilter] = useState(false);\n    const [tableData, setTableData] = useState([]);\n    const [originalData, setOriginalData] = useState([]);\n    const [selectedAdmin, setSelectedAdmin] = useState({\n        adminId: null,\n        firstName: '',\n        lastName: '',\n        email: '',\n        role: ''\n    });\n\n    // eslint-disable-next-line no-unused-vars\n    const [submitLoading, setSubmitLoading] = useState(false);\n    const [errorTable, setErrorTable] = useState(false);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n    const [showUpdateModal, setShowUpdateModal] = useState(false);\n    const [showActivationModal, setShowActivationModal] = useState(false);\n    const [showResetPasswordModal, setShowResetPasswordModal] = useState(false);\n\n\n    let loading = useSelector((state) => state.uiElements.getIn(['loadingScreen']));\n    const dispatch = useDispatch();\n    const [toggleSortFilter, setToggleSortFilter] = useState({});\n    const columns = [\n        {\n            Header:\"Admin Accounts\",\n            id:\"tbl\",\n            columns: [\n                {\n                    Header: 'FULL NAME',\n                    accessor: d => `${d.firstName} ${d.lastName}`,\n                    accessorFilter: 'FULL_NAME',\n                    filterType: 'sortOnly',\n                    columnFilter: true,\n                },\n                {\n                    Header: 'EMAIL',\n                    accessor: \"email\",\n                    accessorFilter: 'email',\n                    filterType: 'sortOnly',\n                    columnFilter: true,\n                },\n                {\n                    Header: 'ROLE',\n                    accessor: \"role\",\n                    accessorFilter: 'role',\n                    filterType: 'multipleSelect',\n                    columnFilter: true,\n                    filter: multiSelectFilter,\n                },\n                {\n                    Header: 'STATUS',\n                    accessor: \"status\",\n                    accessorFilter: 'status',\n                    filterType: 'multipleSelect',\n                    columnFilter: true,\n                    filter: multiSelectFilter,\n                },\n                {\n                    Header: 'ACTION',\n                    accessor: d => d.status,\n    \n                    Cell: ({ row, value }) => (\n                        <div style={{display: 'flex'}}>\n                            <button\n                                className=\"btn btn-link\"\n                                data-toggle=\"tooltip\" title=\"Update Account\"\n                                onClick={() => onClickAction(\"showUpdateAccountModal\", row.index)}\n                            >\n                                <i className=\"ti-marker-alt\"></i>\n                            </button>\n                            <button\n                                className=\"btn btn-link\"\n                                data-toggle=\"tooltip\" title={`${row.values.status === 'ACTIVE' ? 'Deactivate Account' : 'Activate Account'}`}\n                                onClick={() => onClickAction(\"showActivationModal\", row.index)}\n                            >\n                                {row.values.status === 'ACTIVE' ? <i className=\"fas fa-toggle-on\"></i> : <i className=\"fas fa-toggle-off\"></i> }\n                            </button>\n                            <button\n                                className=\"btn btn-link\"\n                                data-toggle=\"tooltip\" title=\"Reset Password\"\n                                onClick={() => onClickAction(\"showResetPasswordModal\", row.index)}\n                            >\n                                <i className=\"fa fa-key\"></i>\n                            </button>\n                        </div>\n                    ),\n                }\n                \n            ]\n        }\n    ];\n    function multiSelectFilter(rows, columnIds, filterValue) {\n        return filterValue.length === 0\n            ? rows\n            : rows.filter((row) =>\n                filterValue.includes(String(row.original[columnIds])),\n            );\n    }\n    \n    const loadData = async () => {\n        await setErrorTable(false);\n\n        await getAllAdminAccounts(dispatch, async (status, data) => {\n            if(!status){\n                await setErrorTable(true);\n            }else{\n                await setTableData(data);\n                await setOriginalData(data);\n                if (!!filterValue.role && filterValue.role !== '')\n                {\n                    applyFilter('role', filterValue.role);\n                }\n                else if (!!filterValue.status && filterValue.status !== '')\n                {\n                    applyFilter('status', filterValue.status);\n                }\n            }\n         });\n\n        \n    };\n\n    const onClickAction = async (act, index) =>{\n        await setErrorMessage(\"\");\n        switch(act)\n        {\n            case 'save':\n                console.log(selectedAdmin);\n                saveAccountPOST();\n                break;\n            case 'showUpdateAccountModal':\n                if (isNaN(index))\n                {\n                    await setSelectedAdmin({adminId: null,\n                        firstName: '',\n                        lastName: '',\n                        email: '',\n                        role: ''});\n                }\n                else\n                {\n                    await setSelectedAdmin(tableData[index]);\n                }\n                await setShowUpdateModal(true);\n                break;\n            case 'showActivationModal':\n                await setSelectedAdmin(tableData[index]);\n                await setShowActivationModal(true);\n                break;\n            case 'showResetPasswordModal':\n                await setSelectedAdmin(tableData[index]);\n                await setShowResetPasswordModal(true);\n                break;\n            case 'activate':\n                activateAccountPOST();\n                break;\n            case 'deactivate':\n                deactivateAccountPOST();\n                break;\n            case 'resetPass':\n                resetPassLinkPOST();\n                break;\n            default:\n                break;\n        }\n    };\n\n    const resetPassLinkPOST = async () =>{\n        setSubmitLoading(true);\n        const args = {\n            adminId: selectedAdmin.adminId\n        };\n        await resetPassLink(dispatch, args, (status, data)=>{\n            if(!status){\n                // toast error\n                toast.error(\"Oh no! Unable to send reset password link. Please try again.\");\n            }\n            else\n            {\n                // toast success\n                toast.success(\"Email Sent!\");\n                setShowResetPasswordModal(false);\n            }\n        });\n        setSubmitLoading(false);\n    };\n\n    const saveAccountPOST = async () =>{\n        await setSubmitLoading(true);\n        if (!selectedAdmin.firstName || selectedAdmin.firstName === '')\n        {\n            await setErrorMessage(\"Please encode the FIRST NAME of the user\");\n            return;\n        }\n\n        if (!selectedAdmin.lastName || selectedAdmin.lastName === '')\n        {\n            await setErrorMessage(\"Please encode the LAST NAME of the user\");\n            return;\n        }\n\n        if (!selectedAdmin.email || selectedAdmin.email === '')\n        {\n            await setErrorMessage(\"Please encode the EMAIL of the user\");\n            return;\n        }\n\n        // eslint-disable-next-line no-useless-escape\n        if (!selectedAdmin.email.match(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()\\.,;\\s@\\\"]+\\.{0,1})+[^<>()\\.,;:\\s@\\\"]{2,})$/))\n        {\n            await setErrorMessage(\"Please encode the EMAIL in the proper format\");\n            return;\n        }\n\n        if (!selectedAdmin.role || selectedAdmin.role === '')\n        {\n            await setErrorMessage(\"Please encode the ACCOUNT TYPE of the user\");\n            return;\n        }\n\n\n        if (!!selectedAdmin.adminId)\n        {\n            // args\n            const args = {\n                adminId: selectedAdmin.adminId,\n                firstName: selectedAdmin.firstName,\n                lastName: selectedAdmin.lastName,\n                role: selectedAdmin.role,\n                email: selectedAdmin.email\n            };\n            await saveAdminDetails(dispatch, args, async (status, data)=>{\n                if(!status){\n                    console.log(data.response.data.message);\n                    await setErrorMessage(data.response.data.message);\n                    toast.error(\"Oh no! Unable to update the account. Please Try Again.\");\n                }\n                else\n                {\n                    toast.success(\"Account Details Successfully Saved!\");\n                    loadData();\n                    setShowUpdateModal(false);\n                }\n            });\n        }\n        else\n        {\n            const args = {\n                firstName: selectedAdmin.firstName,\n                lastName: selectedAdmin.lastName,\n                role: selectedAdmin.role,\n                email: selectedAdmin.email\n            };\n            await saveAdminDetails(dispatch, args, async (status, data)=>{\n                if(!status){\n                    // toast error\n                    console.log(data, data.response.data.message);\n                    await setErrorMessage(data.response.data.message);\n                    toast.error(\"Oh no! Unable to Create an Account. Please Try Again.\");\n                }\n                else\n                {\n                    // toast success\n                    toast.success(\"Account Details Successfully Saved!\");\n                    loadData();\n                    setShowUpdateModal(false);\n                }\n            });\n        }        \n        await setSubmitLoading(false);\n    };\n\n    const deactivateAccountPOST = async () =>{\n        setSubmitLoading(true);\n        const args = {\n            adminId: selectedAdmin.adminId\n        };\n        await deactivateAdminAccount(dispatch, args, (status, data)=>{\n            if(!status){\n                // toast error\n                toast.error(\"Oh no! Unable to deactivate the account. Please try again.\");\n            }\n            else\n            {\n                // toast success\n                toast.success(\"Account successfully deactivated!\");\n                loadData();\n                setShowActivationModal(false);\n            }\n        });\n        setSubmitLoading(false);\n\n    };\n\n    const activateAccountPOST = async () =>{\n        setSubmitLoading(true);\n        const args = {\n            adminId: selectedAdmin.adminId\n        };\n        await activateAdminAccount(dispatch, args, (status, data)=>{\n            if(!status){\n                // toast error\n                toast.error(\"Oh no! Unable to activate the Account. Please try again.\");\n            }\n            else\n            {\n                // toast success\n                toast.success(\"Account successfully activated!\");\n                loadData();\n                setShowActivationModal(false);\n            }\n        });\n        setSubmitLoading(false);\n\n    };\n\n    // const resetPasswordPOST = async () =>{\n    //     setSubmitLoading(true);\n    //     const args = {\n    //         adminId: selectedAdmin.adminId\n    //     };\n    //     await activateAdminAccount(dispatch, args, (status, data)=>{\n    //         if(!status){\n    //             // toast error\n    //             toast.error(\"Oh no! Unable to activate the Account. Please try again.\");\n    //         }\n    //         else\n    //         {\n    //             // toast success\n    //             toast.success(\"Account successfully activated!\");\n    //             loadData();\n    //             setShowActivationModal(false);\n    //         }\n    //     });\n    //     setSubmitLoading(false);\n\n    // };\n\n    const applyFilter = async (column, value) => {\n        filterValue[column] = value;\n        await setFilterValue(filterValue);\n        let keys = await Object.keys(filterValue).filter(key => filterValue[key] !== \"\") || [];\n        if(keys.length === 0){\n            setTableData(originalData);\n            return;\n        }\n\n        const result = await originalData.filter((data) => {\n            let match = 0;\n            keys.forEach((key) => {\n\n                switch (key){\n                    case 'role':\n                        if (data[key] === filterValue[key] || data[key] === '') match++;\n                        break;\n                    case 'status':\n                        if (data[key] === filterValue[key] || data[key] === '') match++;\n                        break;\n                    default: \n                        break;\n                }\n            });\n\n            return match === keys.length;\n        });\n\n        await setTableData(result);\n    }\n\n    const onInputChange = async (name, value) =>{\n        setSelectedAdmin((prevState) =>({\n            ...prevState,\n            [name]: value\n        }));\n    };\n\n    React.useEffect(() => {\n        loadData();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n\n    return(\n        <div>\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <div className=\"card\">\n                            {/* <!-- .left-right-aside-column--> */}\n                            <div className=\"row\">\n                                {/* <!-- .left-aside-column--> */}\n                                <div className=\"left-aside bg-light-part col\">\n                                    <div className={`row ${!hideFilter ? 'justify-content-end' : 'justify-content-center'}`}>\n                                        <button className=\"btn btn-link\" data-toggle=\"tooltip\" title={`${!hideFilter ? 'Minimize Filter Section' : 'Expand Filter Section'}`} onClick={() => setHideFilter(!hideFilter)}>\n                                            <i className={`fas ${!hideFilter ? 'fa-minus-square' : 'fa-expand-alt'}`}></i>\n                                        </button>\n                                    </div>\n                                    {!hideFilter && <ul className=\"list-style-none\">\n                                        <li className=\"box-label\">\n                                            {/* <a href=\"#!\">\n                                                Total Admins <span>{originalData.length}</span>\n                                            </a> */}\n                                            <div className=\"admin-table-total\">\n                                                <h5>\n                                                    Total Admins \n                                                </h5>\n                                                <span>{tableData.length}</span>\n                                            </div>\n                                        </li>\n\n                                        <li className=\"divider\"></li>\n\n                                        {Object.keys(ADMIN_TYPES).map((item) =>{\n                                            return <li className=\"box-label\">\n                                                        <a href=\"#!\">\n                                                            {item} <span>{originalData.filter(dataItem=>dataItem.role === ADMIN_TYPES[item]).length}</span>\n                                                        </a>\n                                                    </li>\n                                        })}\n                                                    \n                                        <li className=\"divider\"></li>\n\n                                        {/* <li>\n                                            <div>\n                                                <label>Account Type</label>\n                                                <select value={filterValue.accountType} onChange={(e) => setFilterValue(e.target.value)} className=\"form-control row\"> \n                                                <select value={filterValue.role} onChange={(e) => applyFilter('role',e.target.value)} className=\"form-control\">\n                                                    <option value=\"\">All</option>\n                                                    {Object.keys(ADMIN_TYPES).map((item) =>{\n                                                        return <option value={ADMIN_TYPES[item]}>{ADMIN_TYPES[item]}</option>\n                                                    })}\n                                                </select>\n                                            </div>\n                                        </li>\n                                        <br/>\n                                        <li>\n                                            <div>\n                                                <label>Account Status</label>\n                                                <select value={filterValue.accountType} onChange={(e) => setFilterValue(e.target.value)} className=\"form-control row\"> \n                                                <select value={filterValue.status} onChange={(e) => applyFilter('status', e.target.value)} className=\"form-control\">\n                                                    <option value=\"\">All</option>\n                                                    {Object.keys(ACCOUNT_STATUS).map((item) =>{\n                                                        return <option value={item}>{item}</option>\n                                                    })}\n                                                </select>\n                                            </div>\n                                        </li> */}\n                                        \n                                    </ul>}\n                                </div>\n                                <div className={`right-aside ${!hideFilter ? 'col-9' : 'col-11'}`}>\n                                    <div className=\"button-fab\">\n                                    {/* onClick={() => onClickAction('add')} */}\n                                            <button type=\"button\" className=\"btn btn-info\" onClick={(e)=>onClickAction(\"showUpdateAccountModal\")}>\n                                                <i className=\"fas fa-plus\"></i>\n                                            </button>\n                                        </div>\n                                        <Table loading={loading} \n                                        error={errorTable} \n                                        columns={columns} \n                                        data={tableData} \n                                        title={\"Admin Accounts\"} \n                                        // filterColumn={'role'} \n                                        // filterValue={filterValue} \n                                        toggleSortFilter={toggleSortFilter}\n                                        setToggleSortFilter={setToggleSortFilter}\n                                        onReload={loadData}\n                                        />\n                                </div>\n                                {/* <!-- /.left-right-aside-column--> */}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            {/* Update Admin Account Modal */}\n            <Modal\n                size=\"m\"\n                show={showUpdateModal}\n                backdrop=\"static\"\n                keyboard={false}\n                onHide={async () => { await setShowUpdateModal(!showUpdateModal); await setSelectedAdmin({\n                    adminId: null,\n                    firstName: '',\n                    lastName: '',\n                    email: '',\n                    role: ''\n                })}}\n                >\n                <Modal.Header closeButton>\n                    <Modal.Title>Account Details</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                {!!errorMessage && errorMessage !== '' ? (\n                      <Alert variant=\"danger\" style={{ whiteSpace: \"pre-wrap\" }} onClose={() => setErrorMessage(\"\")} dismissible >\n                        {errorMessage}\n                      </Alert>\n                    ) : null}\n                    <form>\n                        <div className=\"col\">\n                            <div>\n                                <label className=\"lms-input-label\" htmlFor=\"firstName\">\n                                    First Name\n                                </label>\n                                <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    id=\"firstName\"\n                                    name=\"firstName\"\n                                    defaultValue={selectedAdmin.firstName}\n                                    onChange={(e) => onInputChange(e.target.name, e.target.value)}\n                                    placeholder=\"\"\n                                />\n                            </div>\n                            <div>\n                                <label className=\"lms-input-label\" htmlFor=\"lastName\">\n                                    Last Name\n                                </label>\n                                <input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    id=\"lastName\"\n                                    name=\"lastName\"\n                                    defaultValue={selectedAdmin.lastName}\n                                    onChange={(e) => onInputChange(e.target.name, e.target.value)}\n                                    placeholder=\"\"\n                                />\n                            </div>\n                            <div>\n                                <label className=\"lms-input-label\" htmlFor=\"email\">\n                                    Email\n                                </label>\n                                <input\n                                    type=\"email\"\n                                    className=\"form-control\"\n                                    id=\"email\"\n                                    name=\"email\"\n                                    defaultValue={selectedAdmin.email}\n                                    disabled={!!selectedAdmin.adminId ? true: false}\n                                    onChange={(e) => onInputChange(e.target.name, e.target.value)}\n                                    placeholder=\"\"\n                                />\n                            </div>\n                            <div>\n                                <label>Account Type</label>\n                                <select id=\"role\" name=\"role\" defaultValue={selectedAdmin.role} onChange={(e) => onInputChange(e.target.name, e.target.value)} className=\"form-control\">\n                                    <option value=\"\">Please select the account type of the user</option>\n                                    {Object.keys(ADMIN_TYPES).map((item) =>{\n                                        return <option value={ADMIN_TYPES[item]}>{ADMIN_TYPES[item]}</option>\n                                    })}\n                                </select>\n                            </div>\n                            \n\n\n                        </div>\n                    </form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={(e)=>onClickAction(\"save\")}>\n                    Save\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            {/* Deactivate / Activate Account Modal */}\n            <Modal\n                size=\"m\"\n                show={showActivationModal}\n                backdrop=\"static\"\n                keyboard={false}\n                onHide={() => setShowActivationModal(!showActivationModal)}\n                >\n                <Modal.Header closeButton>\n                    <Modal.Title>{!!selectedAdmin && selectedAdmin.status === 'ACTIVE' ? 'Deactivate Account' : 'Activate Account'}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Are you sure you want to {!!selectedAdmin && selectedAdmin.status === 'ACTIVE' ? 'deactivate the account' : 'activate the account'} of {selectedAdmin.firstName} {selectedAdmin.lastName}? \n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={(e)=> onClickAction(!!selectedAdmin && selectedAdmin.status === 'ACTIVE' ? 'deactivate' : 'activate')}>\n                    {!!selectedAdmin && selectedAdmin.status === 'ACTIVE' ? 'Deactivate' : 'Activate'}\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            {/* Reset Password Modal */}\n            <Modal\n                size=\"m\"\n                show={showResetPasswordModal}\n                backdrop=\"static\"\n                keyboard={false}\n                onHide={() => setShowResetPasswordModal(!showResetPasswordModal)}\n                >\n                <Modal.Header closeButton>\n                    <Modal.Title>Reset Password</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Are you sure you want to reset the password of {selectedAdmin.firstName} {selectedAdmin.lastName}?\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={(e)=> onClickAction(\"resetPass\")}>\n                        Reset\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n            <footer className=\"footer\">© 2021 Tagpros Education</footer>\n            </div>\n    );\n};"]},"metadata":{},"sourceType":"module"}