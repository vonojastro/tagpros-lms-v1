{"ast":null,"code":"import { api } from \"../api\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\";\nimport { getLiveChatRecipientsSuccess, getLiveChatWithRecipientsSuccess } from \"../redux/actions/messages\";\nconst LIVE_MESSAGES_ENDPOINT = '/messages/live';\nexport const getAPIKey = () => {\n  switch (process.env) {\n    case 'Development':\n      return 'a7ecc3541826dd4726fd';\n\n    case 'Staging':\n      return '139f92bdfd2074d69892';\n\n    case 'Production':\n      return 'bf80131454cd25174552';\n\n    default:\n      return 'a7ecc3541826dd4726fd';\n  }\n};\nexport const getCluster = () => {\n  switch (process.env) {\n    case 'Development':\n      return 'ap1';\n\n    case 'Staging':\n      return 'ap1';\n\n    case 'Production':\n      return 'ap1';\n\n    default:\n      return 'ap1';\n  }\n};\nexport const getLiveChatRecipients = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(LIVE_MESSAGES_ENDPOINT + \"/me\");\n    callback && callback(true, response.data);\n    dispatch(getLiveChatRecipientsSuccess(response.data));\n  } catch (error) {\n    console.log(\"(getLiveChatRecipients) Status:\", error);\n    callback && callback(false, error);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const getLiveChatWithRecipients = async (recipientId, dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(LIVE_MESSAGES_ENDPOINT + \"/\" + recipientId);\n    callback && callback(true, response.data);\n    dispatch(getLiveChatWithRecipientsSuccess(response.data));\n  } catch (error) {\n    console.log(\"(getLiveChatWithRecipients) Status:\", error);\n    callback && callback(false, error);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const getMyStudents = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(LIVE_MESSAGES_ENDPOINT + \"/students\");\n    callback && callback(true, response.data);\n  } catch (error) {\n    console.log(\"(getMyStudents) Status:\", error);\n    callback && callback(false, error);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const getMyTeachers = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(LIVE_MESSAGES_ENDPOINT + \"/teachers\");\n    callback && callback(true, response.data);\n  } catch (error) {\n    console.log(\"(getMyTeachers) Status:\", error);\n    callback && callback(false, error);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const addLiveMessage = async (args, dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.post(LIVE_MESSAGES_ENDPOINT + \"/add\", args);\n    callback && callback(true, response.data);\n  } catch (error) {\n    console.log(\"(addLiveMessage) Status:\", error);\n    callback && callback(false, error);\n  } finally {}\n};","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/api/messages.js"],"names":["api","onLoadingScreen","offLoadingScreen","getLiveChatRecipientsSuccess","getLiveChatWithRecipientsSuccess","LIVE_MESSAGES_ENDPOINT","getAPIKey","process","env","getCluster","getLiveChatRecipients","dispatch","callback","response","get","data","error","console","log","getLiveChatWithRecipients","recipientId","getMyStudents","getMyTeachers","addLiveMessage","args","post"],"mappings":"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","sourcesContent":["import { api } from \"../api\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\";\nimport { getLiveChatRecipientsSuccess, getLiveChatWithRecipientsSuccess } from \"../redux/actions/messages\";\n\nconst LIVE_MESSAGES_ENDPOINT = '/messages/live';\n\nexport const getAPIKey = () =>{\n\tswitch(process.env)\n\t{\n\t\tcase 'Development':\n\t\t\treturn 'a7ecc3541826dd4726fd';\n\t\tcase 'Staging':\n\t\t\treturn '139f92bdfd2074d69892';\n\t\tcase 'Production':\n\t\t\treturn 'bf80131454cd25174552';\n\t\tdefault:\n\t\t\treturn 'a7ecc3541826dd4726fd';\n\t}\n};\n\nexport const getCluster = () =>{\n\tswitch(process.env)\n\t{\n\t\tcase 'Development':\n\t\t\treturn 'ap1';\n\t\tcase 'Staging':\n\t\t\treturn 'ap1';\n\t\tcase 'Production':\n\t\t\treturn 'ap1';\n\t\tdefault:\n\t\t\treturn 'ap1';\n\t}\n}\n\nexport const getLiveChatRecipients = async (dispatch, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.get(LIVE_MESSAGES_ENDPOINT + \"/me\");\n\t\tcallback && callback(true, response.data);\n\t\tdispatch(getLiveChatRecipientsSuccess(response.data));\n\t} catch (error) {\n\t\tconsole.log(\"(getLiveChatRecipients) Status:\", error);\n\t\tcallback && callback(false, error);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const getLiveChatWithRecipients = async (recipientId,dispatch, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.get(LIVE_MESSAGES_ENDPOINT + \"/\" + recipientId);\n\t\tcallback && callback(true, response.data);\n\t\tdispatch(getLiveChatWithRecipientsSuccess(response.data));\n\t} catch (error) {\n\t\tconsole.log(\"(getLiveChatWithRecipients) Status:\", error);\n\t\tcallback && callback(false, error);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const getMyStudents = async (dispatch, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.get(LIVE_MESSAGES_ENDPOINT + \"/students\");\n\t\tcallback && callback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(getMyStudents) Status:\", error);\n\t\tcallback && callback(false, error);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const getMyTeachers = async (dispatch, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.get(LIVE_MESSAGES_ENDPOINT + \"/teachers\");\n\t\tcallback && callback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(getMyTeachers) Status:\", error);\n\t\tcallback && callback(false, error);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const addLiveMessage = async (args, dispatch, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.post(LIVE_MESSAGES_ENDPOINT + \"/add\", args);\n\t\tcallback && callback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(addLiveMessage) Status:\", error);\n\t\tcallback && callback(false, error);\n\t} finally {\n\t}\n};"]},"metadata":{},"sourceType":"module"}