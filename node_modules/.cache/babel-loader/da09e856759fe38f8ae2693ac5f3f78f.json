{"ast":null,"code":"import { api } from \"../api\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\";\nimport { getShoppingCartSuccess, addCartItemSuccess, updateCartSuccess, deleteFromCartSuccess } from \"../redux/actions/cart\";\nconst CART_ENDPOINT = '/cart';\nexport const getShoppingCart = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(CART_ENDPOINT + \"/me\");\n    callback && callback(true, response.data);\n    dispatch(getShoppingCartSuccess(response.data));\n  } catch (error) {\n    console.log(\"(getShoppingCart) Status:\", error);\n    callback && callback(false, error);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const addItemToCart = async (dispatch, args, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.post(CART_ENDPOINT + \"/add\", args);\n    dispatch(addCartItemSuccess(response.data));\n    callback(true, response.data);\n  } catch (error) {\n    console.log(\"(addItemToCart) Status:\", error);\n    callback(false);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const updateCartItem = async (dispatch, args, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.post(CART_ENDPOINT + \"/update\", args);\n    dispatch(updateCartSuccess(response.data));\n    callback(true, response.data);\n  } catch (error) {\n    console.log(\"(updateCartItem) Status:\", error);\n    callback(false);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const deleteCartItem = async (dispatch, args, callback) => {\n  try {\n    // dispatch(onLoadingScreen());\n    const response = await api.post(CART_ENDPOINT + \"/remove\", args);\n    dispatch(deleteFromCartSuccess(response.data));\n    callback(true, response.data);\n  } catch (error) {\n    console.log(\"(deleteCartItem) Status:\", error);\n    callback(false); // dispatch(offLoadingScreen());\n  } finally {// dispatch(offLoadingScreen());\n  }\n};","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/api/cart.js"],"names":["api","onLoadingScreen","offLoadingScreen","getShoppingCartSuccess","addCartItemSuccess","updateCartSuccess","deleteFromCartSuccess","CART_ENDPOINT","getShoppingCart","dispatch","callback","response","get","data","error","console","log","addItemToCart","args","post","updateCartItem","deleteCartItem"],"mappings":"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","sourcesContent":["import { api } from \"../api\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\";\nimport { getShoppingCartSuccess, addCartItemSuccess, updateCartSuccess, deleteFromCartSuccess } from \"../redux/actions/cart\";\n\nconst CART_ENDPOINT = '/cart';\n\nexport const getShoppingCart = async (dispatch, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.get(CART_ENDPOINT + \"/me\");\n\t\tcallback && callback(true, response.data);\n\t\tdispatch(getShoppingCartSuccess(response.data));\n\t} catch (error) {\n\t\tconsole.log(\"(getShoppingCart) Status:\", error);\n\t\tcallback && callback(false, error);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const addItemToCart = async (dispatch, args, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.post(CART_ENDPOINT + \"/add\", args);\n\n\t\tdispatch(addCartItemSuccess(response.data));\n\t\tcallback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(addItemToCart) Status:\", error);\n\t\tcallback(false);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const updateCartItem = async (dispatch, args, callback) => {\n\ttry {\n        dispatch(onLoadingScreen());\n\t\tconst response = await api.post(CART_ENDPOINT + \"/update\", args);\n\n\t\tdispatch(updateCartSuccess(response.data));\n\t\tcallback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(updateCartItem) Status:\", error);\n\t\tcallback(false);\n        dispatch(offLoadingScreen());\n\t} finally {\n\t\tdispatch(offLoadingScreen());\n\t}\n};\n\nexport const deleteCartItem = async (dispatch, args, callback) => {\n\ttry {\n        // dispatch(onLoadingScreen());\n\t\tconst response = await api.post(CART_ENDPOINT + \"/remove\", args);\n\n\t\tdispatch(deleteFromCartSuccess(response.data));\n\t\tcallback(true, response.data);\n\t} catch (error) {\n\t\tconsole.log(\"(deleteCartItem) Status:\", error);\n\t\tcallback(false);\n        // dispatch(offLoadingScreen());\n\t} finally {\n\t\t// dispatch(offLoadingScreen());\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}