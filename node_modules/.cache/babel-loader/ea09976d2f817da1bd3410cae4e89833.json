{"ast":null,"code":"import { api } from \"../api\";\nimport { fetchUserSuccess, setResetPasswordVerification, setResetPasswordResponse } from \"../redux/actions/auth\";\nimport { getAllAccountsSuccess, updateAccountStatusAction } from \"../redux/actions/account\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\";\nconst ACCOUNT_ENDPOINT = \"/account\";\nconst AUTH_ENDPOINT = \"/auth\";\nexport const getUserProfile = async dispatch => {\n  try {\n    const response = await api.get(ACCOUNT_ENDPOINT + \"/me\");\n    dispatch(fetchUserSuccess(response.data));\n    console.log(response);\n  } catch (error) {\n    console.log(\"(getUserProfile) Status:\", error);\n  }\n};\nexport const getAllAccounts = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(ACCOUNT_ENDPOINT + \"/list\");\n    dispatch(getAllAccountsSuccess(response.data));\n    !!callback && callback(true);\n    console.log(response);\n  } catch (error) {\n    console.log(\"(getAllAccounts) Status:\", error);\n    !!callback && callback(false);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const updateAccountStatus = async (dispatch, args, callback) => {\n  try {\n    //dispatch(onLoadingScreen());\n    const response = await api.post(ACCOUNT_ENDPOINT + \"/status\", args);\n    dispatch(updateAccountStatusAction(response.data));\n    !!callback && callback(true);\n  } catch (error) {\n    console.log(\"Status:\", error);\n    !!callback && callback(false); //dispatch(offLoadingScreen());\n  } finally {//dispatch(offLoadingScreen());\n  }\n};\nexport const updateAccountDetails = async (dispatch, args, callback) => {\n  try {\n    const response = await api.post(ACCOUNT_ENDPOINT + \"/me\", args);\n    dispatch(fetchUserSuccess(response.data));\n    !!callback && callback(true);\n  } catch (error) {\n    console.log(\"Status:\", error);\n    !!callback && callback(false);\n  }\n};\nexport const changePassword = async (args, callback) => {\n  try {\n    const response = await api.post(ACCOUNT_ENDPOINT + \"/password\", args);\n    !!callback && callback(true, response);\n  } catch (error) {\n    console.log(\"Status:\", error);\n    !!callback && callback(false, error);\n  }\n};\nexport const forgotPassword = async (dispatch, args) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.post(AUTH_ENDPOINT + \"/forgot-password\", args);\n    dispatch(setResetPasswordVerification(response.data));\n  } catch (error) {\n    dispatch(setResetPasswordVerification(error.response.data));\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const changePasswordNoCB = async (dispatch, args) => {\n  try {\n    dispatch(onLoadingScreen());\n    await api.post(AUTH_ENDPOINT + \"/forgot-password/reset/\", args, {\n      headers: {\n        Authorization: \"Bearer \" + args.token\n      }\n    });\n    dispatch(setResetPasswordResponse({\n      message: \"You have change your password successfully.\",\n      status: \"success\"\n    }));\n  } catch (error) {\n    console.log(\"ERROR\", error.response.data);\n    dispatch(setResetPasswordResponse(error.response.data));\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\nexport const resendVerificationEmail = (dispatch, _ref) => {\n  let {\n    EMAIL_ADD\n  } = _ref;\n  return api.get('auth/verify', {\n    params: {\n      EMAIL_ADD\n    }\n  });\n};","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/api/account.js"],"names":["api","fetchUserSuccess","setResetPasswordVerification","setResetPasswordResponse","getAllAccountsSuccess","updateAccountStatusAction","onLoadingScreen","offLoadingScreen","ACCOUNT_ENDPOINT","AUTH_ENDPOINT","getUserProfile","dispatch","response","get","data","console","log","error","getAllAccounts","callback","updateAccountStatus","args","post","updateAccountDetails","changePassword","forgotPassword","changePasswordNoCB","headers","Authorization","token","message","status","resendVerificationEmail","EMAIL_ADD","params"],"mappings":"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","sourcesContent":["import { api } from \"../api\";\nimport {\n  fetchUserSuccess,\n  setResetPasswordVerification,\n  setResetPasswordResponse,\n} from \"../redux/actions/auth\";\nimport {\n  getAllAccountsSuccess,\n  updateAccountStatusAction,\n} from \"../redux/actions/account\";\nimport { onLoadingScreen, offLoadingScreen } from \"../redux/actions/ui-elements\";\n\nconst ACCOUNT_ENDPOINT = \"/account\";\nconst AUTH_ENDPOINT = \"/auth\";\n\nexport const getUserProfile = async (dispatch) => {\n  try {\n    const response = await api.get(ACCOUNT_ENDPOINT + \"/me\");\n\n    dispatch(fetchUserSuccess(response.data));\n\n    console.log(response);\n  } catch (error) {\n    console.log(\"(getUserProfile) Status:\", error);\n  }\n};\n\nexport const getAllAccounts = async (dispatch, callback) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.get(ACCOUNT_ENDPOINT + \"/list\");\n\n    dispatch(getAllAccountsSuccess(response.data));\n\n    !!callback && callback(true);\n    console.log(response);\n  } catch (error) {\n    console.log(\"(getAllAccounts) Status:\", error);\n    !!callback && callback(false);\n    dispatch(offLoadingScreen());\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\n\nexport const updateAccountStatus = async (dispatch, args, callback) => {\n  try {\n    //dispatch(onLoadingScreen());\n\n    const response = await api.post(ACCOUNT_ENDPOINT + \"/status\", args);\n    dispatch(updateAccountStatusAction(response.data));\n    !!callback && callback(true);\n  } catch (error) {\n    console.log(\"Status:\", error);\n    !!callback && callback(false);\n    //dispatch(offLoadingScreen());\n  } finally {\n    //dispatch(offLoadingScreen());\n  }\n};\n\nexport const updateAccountDetails = async (dispatch, args, callback) => {\n  try {\n    const response = await api.post(ACCOUNT_ENDPOINT + \"/me\", args);\n    dispatch(fetchUserSuccess(response.data));\n    !!callback && callback(true);\n  } catch (error) {\n    console.log(\"Status:\", error);\n    !!callback && callback(false);\n  }\n};\n\nexport const changePassword = async (args, callback) => {\n  try {\n    const response = await api.post(ACCOUNT_ENDPOINT + \"/password\", args);\n    !!callback && callback(true, response);\n  } catch (error) {\n    console.log(\"Status:\", error);\n    !!callback && callback(false, error);\n  }\n};\n\nexport const forgotPassword = async (dispatch, args) => {\n  try {\n    dispatch(onLoadingScreen());\n    const response = await api.post(AUTH_ENDPOINT + \"/forgot-password\", args);\n    dispatch(setResetPasswordVerification(response.data));\n  } catch (error) {\n    dispatch(setResetPasswordVerification(error.response.data));\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\n\nexport const changePasswordNoCB = async (dispatch, args) => {\n  try {\n    dispatch(onLoadingScreen());\n\n    await api.post(AUTH_ENDPOINT + \"/forgot-password/reset/\", args, {\n      headers: { Authorization: \"Bearer \" + args.token },\n    });\n\n    dispatch(\n      setResetPasswordResponse({\n        message: \"You have change your password successfully.\",\n        status: \"success\",\n      })\n    );\n  } catch (error) {\n    console.log(\"ERROR\", error.response.data);\n    dispatch(setResetPasswordResponse(error.response.data));\n  } finally {\n    dispatch(offLoadingScreen());\n  }\n};\n\nexport const resendVerificationEmail = (dispatch, { EMAIL_ADD }) => {\n  return api.get('auth/verify', { params: { EMAIL_ADD } });\n};\n"]},"metadata":{},"sourceType":"module"}