{"ast":null,"code":"import Immutable from \"immutable\";\nimport { GET_NOTIFICATIONS, READ_NOTIFICATIONS } from \"../actions/notification\";\nconst initialState = {\n  data: {\n    notifications: []\n  }\n};\n\nconst notification = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Immutable.fromJS(initialState);\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState = state;\n\n  switch (action.type) {\n    case GET_NOTIFICATIONS:\n      newState = newState.setIn([\"data\", \"notifications\"], action.data);\n      break;\n\n    case READ_NOTIFICATIONS:\n      newState = newState.set(\"notification\", action.data);\n      break;\n\n    default:\n      return state;\n  }\n\n  return newState;\n};\n\nexport default notification;","map":{"version":3,"sources":["/Users/vonojastro/Desktop/lms-frontend-v2/src/redux/reducers/notification.js"],"names":["Immutable","GET_NOTIFICATIONS","READ_NOTIFICATIONS","initialState","data","notifications","notification","state","fromJS","action","newState","type","setIn","set"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AAEA,SACIC,iBADJ,EAEIC,kBAFJ,QAGO,yBAHP;AAKA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,aAAa,EAAE;AADX;AADW,CAArB;;AAMA,MAAMC,YAAY,GAAG,YAAoD;AAAA,MAAnDC,KAAmD,uEAA3CP,SAAS,CAACQ,MAAV,CAAiBL,YAAjB,CAA2C;AAAA,MAAXM,MAAW;AACvE,MAAIC,QAAQ,GAAGH,KAAf;;AACA,UAAQE,MAAM,CAACE,IAAf;AACE,SAAKV,iBAAL;AACES,MAAAA,QAAQ,GAAGA,QAAQ,CAACE,KAAT,CAAe,CAAC,MAAD,EAAS,eAAT,CAAf,EAA0CH,MAAM,CAACL,IAAjD,CAAX;AACA;;AAEF,SAAKF,kBAAL;AACEQ,MAAAA,QAAQ,GAAGA,QAAQ,CAACG,GAAT,CAAa,cAAb,EAA6BJ,MAAM,CAACL,IAApC,CAAX;AACA;;AACF;AACE,aAAOG,KAAP;AATJ;;AAYA,SAAOG,QAAP;AACD,CAfD;;AAiBA,eAAeJ,YAAf","sourcesContent":["import Immutable from \"immutable\";\n\nimport {\n    GET_NOTIFICATIONS,\n    READ_NOTIFICATIONS\n} from \"../actions/notification\";\n\nconst initialState = { \n    data: {\n      notifications: []\n    }\n};\n\nconst notification = (state = Immutable.fromJS(initialState), action) => {\n  let newState = state;\n  switch (action.type) {\n    case GET_NOTIFICATIONS:\n      newState = newState.setIn([\"data\", \"notifications\"], action.data);\n      break;\n\n    case READ_NOTIFICATIONS:\n      newState = newState.set(\"notification\", action.data);\n      break;\n    default:\n      return state;\n  }\n\n  return newState;\n};\n  \nexport default notification;"]},"metadata":{},"sourceType":"module"}