import { __assign, __rest } from "tslib";
import { useState, } from 'react';
import * as React from 'react';
import { withEditorContext } from '../Editor';
import OrderedListIcon from './icons/OrderedListIcon';
import UnorderedListIcon from './icons/UnorderedListIcon';
// tslint:disable:max-line-length
export var BtnBold = createButton('Bold', 'ùêÅ', 'bold');
export var BtnClearFormatting = createButton('Clear formatting', 'TÃ≤‚Çì', 'removeFormat');
export var BtnItalic = createButton('Italic', 'ùë∞', 'italic');
export var BtnLink = createButton('Link', 'üîó', function (selected) {
    if (selected && selected.nodeName === 'A') {
        document.execCommand('unlink');
    }
    else {
        // eslint-disable-next-line no-alert
        document.execCommand('createLink', false, prompt('URL', ''));
    }
});
export var BtnNumberedList = createButton('Numbered list', React.createElement(OrderedListIcon, null), 'insertOrderedList');
export var BtnRedo = createButton('Redo', '‚Ü∑', 'redo');
export var BtnUnderline = createButton('Underline', React.createElement("span", { style: { textDecoration: 'underline' } }, "\uD835\uDC14"), 'underline');
export var BtnUndo = createButton('Undo', '‚Ü∂', 'undo');
export var BtnBulletList = createButton('Bullet list', React.createElement(UnorderedListIcon, null), 'insertUnorderedList');
export function Button(props) {
    var _a = useState(false), hovered = _a[0], setHovered = _a[1];
    var active = props.active, styles = props.styles, el = props.el, selection = props.selection, inputProps = __rest(props, ["active", "styles", "el", "selection"]);
    var style = __assign(__assign(__assign(__assign(__assign({}, styles.button.normal), props.style), (hovered ? styles.button.hovered : {})), (hovered ? props.hoverStyle : {})), (active ? styles.button.active : {}));
    var onHover = function (e) {
        setHovered(true);
        props.onMouseEnter && props.onMouseEnter(e);
    };
    var onUnHover = function (e) {
        setHovered(false);
        props.onMouseLeave && props.onMouseLeave(e);
    };
    return (React.createElement("button", __assign({ type: "button" }, inputProps, { style: style, onMouseEnter: onHover, onMouseLeave: onUnHover })));
}
function createButton(title, content, command) {
    ButtonFactory.displayName = title.replace(/\s/g, '');
    return withEditorContext(ButtonFactory);
    function ButtonFactory(props) {
        var selection = props.selection, buttonProps = __rest(props, ["selection"]);
        var active = false;
        if (typeof command === 'string') {
            active = !!selection && document.queryCommandState(command);
        }
        return (React.createElement(Button, __assign({ title: title }, buttonProps, { onMouseDown: action, active: active }), content));
        function action() {
            if (typeof command === 'function') {
                command(selection);
            }
            else {
                document.execCommand(command);
            }
        }
    }
}
//# sourceMappingURL=buttons.js.map